USE REPRISE_HRU

Go
--HRU est monobase HR SPRINT multi bases création d'une table pour ventiler les salariés sur les différents SIREN
--Attention dans la table individu les salariés ne sont pas dans l'ordre des sociétés
--La source de données se trouve dans la table GENCONTRAT
--Le traitement va faire une boucle par salariés table INDIVIDU pour trouver le champ CEMP

--Reprise des conventions collectives champs source VALIDCONTRAT.CDCCN
--Hypothese table en partage 
--Voir la table CODE_CCN_HR_SPRINT

DECLARE 

@VAR_CCNEMPLOYEUR_LIGNE_EN_COURS int,
@VAR_CCNEMPLOYEUR_TOTAL_LIGNE int,
@VAR_PCV_SIREN varchar(35),
@VAR_PCV_CONVENTION varchar(17),--ne pas finir que par 1 ou 3
@VAR_PCV_CONVENTION_TEMPORAIRE int,
@VAR_PCV_VALEUR_POSSIBLE char(3),
@VAR_PCV_LIBELLE varchar(60),
@VAR_PCV_PREDEFINI char(3),
@VAR_PCV_NODOSSIER char(6),
@VAR_CONVENTION_EXISTE int,
@VAR_PCV_IDCC varchar(17);

SET @VAR_PCV_PREDEFINI='STD';
SET @VAR_PCV_NODOSSIER='000000';
SET @VAR_PCV_SIREN='999999999';
SET @VAR_CCNEMPLOYEUR_LIGNE_EN_COURS=1;
SELECT @VAR_CCNEMPLOYEUR_TOTAL_LIGNE=COUNT(*) FROM CCNEMPLOYEUR;

WHILE @VAR_CCNEMPLOYEUR_LIGNE_EN_COURS<=@VAR_CCNEMPLOYEUR_TOTAL_LIGNE

BEGIN

SELECT @VAR_PCV_IDCC=RIGHT([Code Convention],4) FROM CCNEMPLOYEUR WHERE CCN_EMPLOYEUR_LIGNE=@VAR_CCNEMPLOYEUR_LIGNE_EN_COURS;--récupération du code IDCC de la ligne en cours
SELECT @VAR_PCV_CONVENTION=CO_LIBRE FROM CODE_CCN_HR_SPRINT WHERE CO_ABREGE=@VAR_PCV_IDCC

SELECT @VAR_CONVENTION_EXISTE=COUNT(*) FROM HR_SPRINT_CONVENTIONCOLL WHERE PCV_SIREN=@VAR_PCV_SIREN AND @VAR_PCV_IDCC=PCV_IDCC;

IF @VAR_CONVENTION_EXISTE=0 --si l'IDCC n'existe pas

BEGIN
	
	SELECT @VAR_PCV_CONVENTION_TEMPORAIRE=COUNT(*) FROM HR_SPRINT_CONVENTIONCOLL;
	SELECT TOP (1) @VAR_PCV_VALEUR_POSSIBLE=VAL_CODE FROM VALEUR_POSSIBLE_CCN WHERE VAL_UTILISER='-' ORDER BY VAL_LIGNE ASC;
		
	SET @VAR_PCV_CONVENTION=@VAR_PCV_VALEUR_POSSIBLE;

	SELECT @VAR_PCV_LIBELLE=CO_LIBRE FROM CODE_CCN_HR_SPRINT WHERE CO_ABREGE=@VAR_PCV_IDCC;

	INSERT INTO HR_SPRINT_CONVENTIONCOLL
	VALUES (@VAR_PCV_SIREN,@VAR_PCV_CONVENTION,@VAR_PCV_LIBELLE,@VAR_PCV_PREDEFINI,@VAR_PCV_NODOSSIER,@VAR_PCV_IDCC);

	UPDATE VALEUR_POSSIBLE_CCN SET VAL_UTILISER='X' WHERE VAL_CODE=@VAR_PCV_CONVENTION;

	Print 'Création de la convention idcc '+@VAR_PCV_IDCC+ ''+@VAR_PCV_LIBELLE+'le code HRS sera '+@VAR_PCV_CONVENTION

END

ELSE

Print 'Passage ligne suivante '+CAST(@VAR_CCNEMPLOYEUR_LIGNE_EN_COURS AS varchar(255))+'/'+CAST(@VAR_CCNEMPLOYEUR_TOTAL_LIGNE AS varchar(255))

 
SET @VAR_CCNEMPLOYEUR_LIGNE_EN_COURS=@VAR_CCNEMPLOYEUR_LIGNE_EN_COURS+1;
END

Go

DECLARE 

@VAR_CMATR varchar(50),
@VAR_MATRICULEHRS varchar(10),--donnée de l'INSERT
@VAR_MATRICULEHRS_TEMPORAIRE int, --incrémentation du matricule
@VAR_AUXILIAIRE varchar(50),
@VAR_CEMP varchar(35),
@VAR_STATUT varchar(50),
@VAR_SIREN varchar(50),
@VAR_LIGNE_INDIVIDU int,
@VAR_TOTAL_INDIVIDUS int,
@VAR_RAISON_SOCIALE varchar(255),
@VAR_NATURECONTROLE varchar(255),
@VAR_RESULTATCONTROLE varchar(255),
@VAR_COMMENTAIRE varchar(255),
@VAR_VENTILATION_INDIVIDU int,
@VAR_VENTILATION_CEMP int,
@VAR_IND_REPRISE_HR_SPRINT_SALARIE char(1),
@VAR_IND_REPRISE_HR_SPRINT_CONTRATRAVAIL char(1),
@VAR_IND_REPRISE_HR_SPRINT_DEPORTSAL char(1),
@VAR_IND_REPRISE_HR_SPRINT_SALARIECOMPL char(1),
@VAR_IND_REPRISE_HR_SPRINT_TIERS char(1),
@VAR_IND_REPRISE_HR_SPRINT_RIB char(1),
@VAR_IND_REPRISE_HR_SPRINT_AXE char(1),
@VAR_IND_REPRISE_HR_SPRINT_CVENTIL char(1),
@VAR_IND_REPRISE_HR_SPRINT_CVENTILENTETE char(1),
@VAR_IND_REPRISE_HR_SPRINT_CSECTION char(1),
@VAF_IND_REPRISE_HR_SPRINT_PAIEENCOURS char(1),
@VAR_IND_REPRISE_HR_SPRINT_HISTOBULLETIN char(1),
@VAR_IND_REPRISE_HR_SPRINT_HISTOCUMSAL char(1),
@VAR_IND_REPRISE_HR_SPRINT_ENFANTSALARIE char(1),
@VAR_IND_REPRISE_HR_SPRINT_PASTAUX char(1),
@VAR_IND_REPRISE_HR_SPRINT_ABSENCESALARIE char(1),
@VAR_IND_REPRISE_HR_SPRINT_PAIEENCOURS char(1),
@VAR_IND_REPRISE_HR_SPRINT_PGHISTODETAIL char(1);

SET @VAR_IND_REPRISE_HR_SPRINT_SALARIE='-';
SET @VAR_IND_REPRISE_HR_SPRINT_CONTRATRAVAIL='-';
SET @VAR_IND_REPRISE_HR_SPRINT_DEPORTSAL='-';
SET @VAR_IND_REPRISE_HR_SPRINT_SALARIECOMPL='-'
SET @VAR_IND_REPRISE_HR_SPRINT_TIERS='-';
SET @VAR_IND_REPRISE_HR_SPRINT_RIB='-';
SET @VAR_IND_REPRISE_HR_SPRINT_AXE='-';
SET @VAR_IND_REPRISE_HR_SPRINT_CVENTIL='-';
SET @VAR_IND_REPRISE_HR_SPRINT_CVENTILENTETE='-';
SET @VAR_IND_REPRISE_HR_SPRINT_CSECTION='-';
SET @VAF_IND_REPRISE_HR_SPRINT_PAIEENCOURS='-';
SET @VAR_IND_REPRISE_HR_SPRINT_HISTOBULLETIN='-';
SET @VAR_IND_REPRISE_HR_SPRINT_HISTOCUMSAL='-';
SET @VAR_IND_REPRISE_HR_SPRINT_ENFANTSALARIE='-';
SET @VAR_IND_REPRISE_HR_SPRINT_PASTAUX='-';
SET @VAR_IND_REPRISE_HR_SPRINT_ABSENCESALARIE='-';
SET @VAR_IND_REPRISE_HR_SPRINT_PAIEENCOURS='-';
SET @VAR_IND_REPRISE_HR_SPRINT_PGHISTODETAIL='-';


SET @VAR_LIGNE_INDIVIDU=1;
SET @VAR_STATUT='Eligible';

SELECT @VAR_TOTAL_INDIVIDUS=COUNT(MATRI) FROM GENCONTRAT;

WHILE @VAR_LIGNE_INDIVIDU<=@VAR_TOTAL_INDIVIDUS

	BEGIN

	SELECT @VAR_CMATR=MATRI FROM GENCONTRAT WHERE GENCONTRAT_LIGNE=@VAR_LIGNE_INDIVIDU;--Récupération du matricule du contrat en cours
	
	SELECT @VAR_CEMP=CEMP FROM GENCONTRAT WHERE GENCONTRAT_LIGNE=@VAR_LIGNE_INDIVIDU; --récupération de la société du contrat en cours

	SELECT @VAR_SIREN=Siren FROM EMPLOYEUR WHERE EMPLOYEUR=@VAR_CEMP; --récupération du SIREN du contrat en cours

	SELECT @VAR_RAISON_SOCIALE=Raison_sociale FROM EMPLOYEUR WHERE EMPLOYEUR=@VAR_CEMP;
	
	SET @VAR_MATRICULEHRS='En attente';

	SELECT @VAR_VENTILATION_CEMP=COUNT(*) FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR AND @VAR_CEMP=IND_CEMP;--test si le matricule existe déjà sur la société
	
	IF @VAR_VENTILATION_CEMP=0 --si le matricule n'existe pas sur la société
		
		BEGIN
	
		INSERT INTO VENTILATION_INDIVIDUS
		
		VALUES(@VAR_CEMP,@VAR_SIREN,@VAR_CMATR,CAST(@VAR_MATRICULEHRS AS VARCHAR(10)),@VAR_AUXILIAIRE,@VAR_STATUT,
		@VAR_IND_REPRISE_HR_SPRINT_SALARIE,@VAR_IND_REPRISE_HR_SPRINT_CONTRATRAVAIL,@VAR_IND_REPRISE_HR_SPRINT_DEPORTSAL,@VAR_IND_REPRISE_HR_SPRINT_SALARIECOMPL,@VAR_IND_REPRISE_HR_SPRINT_TIERS,@VAR_IND_REPRISE_HR_SPRINT_RIB,
		@VAR_IND_REPRISE_HR_SPRINT_AXE,@VAR_IND_REPRISE_HR_SPRINT_CVENTIL,@VAR_IND_REPRISE_HR_SPRINT_CVENTILENTETE,@VAR_IND_REPRISE_HR_SPRINT_CSECTION,@VAR_IND_REPRISE_HR_SPRINT_PAIEENCOURS,@VAR_IND_REPRISE_HR_SPRINT_HISTOBULLETIN,
		@VAR_IND_REPRISE_HR_SPRINT_HISTOCUMSAL,@VAR_IND_REPRISE_HR_SPRINT_ENFANTSALARIE,@VAR_IND_REPRISE_HR_SPRINT_PASTAUX,@VAR_IND_REPRISE_HR_SPRINT_ABSENCESALARIE,@VAR_IND_REPRISE_HR_SPRINT_PGHISTODETAIL);
	
		PRINT 'Le matricule '+@VAR_CMATR+' est dans la société numéro '+@VAR_CEMP+' numéro SIREN '+@VAR_SIREN+' raison sociale '+@VAR_RAISON_SOCIALE+' nouveau matricule ' +@VAR_MATRICULEHRS+' traitrement ligne '+CAST(@VAR_LIGNE_INDIVIDU AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_INDIVIDUS AS VARCHAR(255))
	 
	 
		SET @VAR_COMMENTAIRE='Le matricule '+@VAR_CMATR+' est dans la société numéro '+@VAR_CEMP+' numéro SIREN '+@VAR_SIREN+' raison sociale '+@VAR_RAISON_SOCIALE+' nouveau matricule ' +@VAR_MATRICULEHRS+' traitrement ligne '+CAST(@VAR_LIGNE_INDIVIDU AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_INDIVIDUS AS VARCHAR(255));
		SET @VAR_NATURECONTROLE='Ventilation des individus';
		SET @VAR_RESULTATCONTROLE='Ok';

		END

	ELSE --si le matricule existe déjà

		BEGIN
			
		PRINT 'Le matricule '+@VAR_CMATR+' est déjà dans la société numéro '+@VAR_CEMP+' numéro SIREN '+@VAR_SIREN+' raison sociale '+@VAR_RAISON_SOCIALE+' nouveau matricule ' +@VAR_MATRICULEHRS+' traitrement ligne '+CAST(@VAR_LIGNE_INDIVIDU AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_INDIVIDUS AS VARCHAR(255))
	 
	 
		SET @VAR_COMMENTAIRE='Le matricule '+@VAR_CMATR+' est déjà dans la société numéro '+@VAR_CEMP+' numéro SIREN '+@VAR_SIREN+' raison sociale '+@VAR_RAISON_SOCIALE+' nouveau matricule ' +@VAR_MATRICULEHRS+' traitrement ligne '+CAST(@VAR_LIGNE_INDIVIDU AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_INDIVIDUS AS VARCHAR(255));
		SET @VAR_NATURECONTROLE='Ventilation des individus';
	
	SET @VAR_COMMENTAIRE='Le matricule '+@VAR_CMATR+' est déjà dans la société numéro '+@VAR_CEMP+' numéro SIREN '+@VAR_SIREN+' raison sociale '+@VAR_RAISON_SOCIALE+' nouveau matricule ' +@VAR_MATRICULEHRS+' traitrement ligne '+CAST(@VAR_LIGNE_INDIVIDU AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_INDIVIDUS AS VARCHAR(255));
		SET @VAR_NATURECONTROLE='Ventilation des individus';
		SET @VAR_RESULTATCONTROLE='Ok';

		
		END

	SET	@VAR_LIGNE_INDIVIDU=@VAR_LIGNE_INDIVIDU+1;

	INSERT INTO JOURNAL_DES_TRAITEMENTS
	VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);
	
		
	END


GO

--Gestion de la renumération des matricules

--Le traitement aura lieu dans une table de travail TRAVAIL_RENUMEROTAION_MATRICULE

--Pour chaque matricule dans la table VENTILATION_INDIVIDUS on va chercher l'employeur (traitement à optimiser il doit tester le nbre de salarié*nbre de sociétés)

--Si Renumerotation matricule dans la table PARAMETRES = X alors on renumerote sinon on conserve HRU

DECLARE

@VAR_PARAMETRES_RENUMEROTATION char(1),
@VAR_MATRICULEHRS_ANCIEN_VARCHAR varchar(10),
@VAR_MATRICULEHRS_ANCIEN_INT int,
@VAR_MATRICULEHRS varchar(10),
@VAR_SOCIETE_LIGNE int,--société en cours
@VAR_SOCIETE_TOTAL int,--total des sociétés
@VAR_RAISON_SOCIALE varchar(255),
@VAR_NATURECONTROLE varchar(255),
@VAR_RESULTATCONTROLE varchar(255),
@VAR_COMMENTAIRE varchar(255),
@VAR_CEMP varchar(255),
@VAR_LIGNE_INDIVIDU int,--salarié en cours table individu
@VAR_CMATR varchar(35), --matricule en cours 
@VAR_TOTAL_INDIVIDUS int,--donne le nombre de salariés par sociétés
@VAR_CEMP_SALARIE varchar(35),--CEMP du salarié en cours
@VAR_TRAV1_CEMP varchar(35),--CEMP du salarié en cours table de travail
@VAR_TRAV1_MATRICULEHRS_TEMPORAIRE varchar(35),
@VAR_TRAV1_MATRICULEHRS varchar(35),
@VAR_TRAV1_MATRICULEHRU varchar(35); --matricule en cours table de travail

SET @VAR_TRAV1_MATRICULEHRS_TEMPORAIRE=0;
SET @VAR_TRAV1_MATRICULEHRS=' ';
SET @VAR_TOTAL_INDIVIDUS=0;
SELECT @VAR_LIGNE_INDIVIDU=MIN(IND_LIGNE) FROM VENTILATION_INDIVIDUS;
SET @VAR_NATURECONTROLE='Renumérotation des matricules';
SET @VAR_RESULTATCONTROLE='Ok';
SET @VAR_SOCIETE_LIGNE=1;

SELECT @VAR_SOCIETE_TOTAL=COUNT(*) FROM EMPLOYEUR;--nombre de sociétés à traiter


SELECT @VAR_PARAMETRES_RENUMEROTATION=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='Renumerotation matricule';

IF @VAR_PARAMETRES_RENUMEROTATION='-' --on conserve le code HRU

BEGIN

UPDATE VENTILATION_INDIVIDUS SET IND_MATRICULEHRS=IND_MATRICULEHRU;

Print 'Conservation des matricules HRU'

END

IF @VAR_PARAMETRES_RENUMEROTATION='X' --on conserve le code HRU

BEGIN

	WHILE @VAR_SOCIETE_LIGNE<=@VAR_SOCIETE_TOTAL --Boucle par sociétés

	BEGIN

	SELECT @VAR_CEMP=Employeur FROM EMPLOYEUR WHERE SOCIETE_LIGNE=@VAR_SOCIETE_LIGNE;--récupération de la société à traiter
	SELECT @VAR_TOTAL_INDIVIDUS=MAX(IND_LIGNE) FROM VENTILATION_INDIVIDUS;--donne le nombre de salariés total


		WHILE @VAR_LIGNE_INDIVIDU<=@VAR_TOTAL_INDIVIDUS  --Boucle par salariés 

	
			BEGIN

			SELECT @VAR_CMATR=IND_MATRICULEHRU FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_LIGNE_INDIVIDU; --récupération du matricule en cours
			SELECT @VAR_CEMP_SALARIE=IND_CEMP FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_LIGNE_INDIVIDU;--récupération de l'employeur
		
			IF @VAR_CEMP_SALARIE=@VAR_CEMP --Si le salarié est dans la société en cours alors on ajoute à la table de travail et on indique +1 dans le matricule
		
			BEGIN

			PRINT 'Société en cours '+@VAR_CEMP+' traitement '+CAST(@VAR_SOCIETE_LIGNE AS VARCHAR(255))+'/'+CAST(@VAR_SOCIETE_TOTAL AS VARCHAR(255))++' le salarié '+@VAR_CMATR+' est dans la société '+@VAR_CEMP_SALARIE+' on ajoute à la table de travail ligne en cours '+CAST(@VAR_LIGNE_INDIVIDU AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_INDIVIDUS AS VARCHAR(255))
			SET @VAR_COMMENTAIRE='Société en cours '+@VAR_CEMP+' traitement '+CAST(@VAR_SOCIETE_LIGNE AS VARCHAR(255))+'/'+CAST(@VAR_SOCIETE_TOTAL AS VARCHAR(255))+'/'+' le salarié '+@VAR_CMATR+' est dans la société '+@VAR_CEMP_SALARIE+' on ajoute à la table de travail ligne en cours '+CAST(@VAR_LIGNE_INDIVIDU AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_INDIVIDUS AS VARCHAR(255));

			INSERT INTO JOURNAL_DES_TRAITEMENTS  --Ajout du commentaire dans la table des traitements
			VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);

			SET @VAR_TRAV1_CEMP=@VAR_CEMP_SALARIE;
			SET @VAR_TRAV1_MATRICULEHRU=@VAR_CMATR;
			SET @VAR_TRAV1_MATRICULEHRS_TEMPORAIRE=@VAR_TRAV1_MATRICULEHRS_TEMPORAIRE+1;--incrémentation du code matricule de la société
			
			--Ajout des 0 en 4,3,2 ème position

				IF @VAR_TRAV1_MATRICULEHRS_TEMPORAIRE<10

				SET @VAR_TRAV1_MATRICULEHRS=CONCAT('00',@VAR_CEMP_SALARIE,'000',CAST(@VAR_TRAV1_MATRICULEHRS_TEMPORAIRE AS VARCHAR(10)));

				ELSE IF @VAR_TRAV1_MATRICULEHRS_TEMPORAIRE>10 AND @VAR_TRAV1_MATRICULEHRS_TEMPORAIRE<99
				
				SET @VAR_TRAV1_MATRICULEHRS=CONCAT('00',@VAR_CEMP_SALARIE,'00',CAST(@VAR_TRAV1_MATRICULEHRS_TEMPORAIRE AS VARCHAR(10)));
				
				ELSE IF @VAR_TRAV1_MATRICULEHRS_TEMPORAIRE>100 AND @VAR_TRAV1_MATRICULEHRS_TEMPORAIRE<999
				
				SET @VAR_TRAV1_MATRICULEHRS=CONCAT('00',@VAR_CEMP_SALARIE,'0',CAST(@VAR_TRAV1_MATRICULEHRS_TEMPORAIRE AS VARCHAR(10)));

				ELSE IF @VAR_TRAV1_MATRICULEHRS_TEMPORAIRE>1000
				
				SET @VAR_TRAV1_MATRICULEHRS=CAST(@VAR_TRAV1_MATRICULEHRS_TEMPORAIRE AS VARCHAR(10));

				INSERT INTO TRAVAIL_RENUMEROTATION_MATRICULE
				VALUES (@VAR_TRAV1_CEMP,@VAR_TRAV1_MATRICULEHRU,@VAR_TRAV1_MATRICULEHRS_TEMPORAIRE,@VAR_TRAV1_MATRICULEHRS);--alimentation de la table de travail

				UPDATE VENTILATION_INDIVIDUS SET IND_MATRICULEHRS=@VAR_TRAV1_MATRICULEHRS WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_CEMP=@VAR_CEMP_SALARIE;

				END

				ELSE

				BEGIN
				PRINT 'Société en cours '+@VAR_CEMP+' le salarié '+@VAR_CMATR+' est dans la société '+@VAR_CEMP_SALARIE+' on ajoute  pas à la table de travail ligne en cours '+CAST(@VAR_LIGNE_INDIVIDU AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_INDIVIDUS AS VARCHAR(255))
				SET @VAR_COMMENTAIRE='Société en cours '+@VAR_CEMP+' le salarié '+@VAR_CMATR+' est dans la société '+@VAR_CEMP_SALARIE+' on ajoute  pas à la table de travail ligne en cours '+CAST(@VAR_LIGNE_INDIVIDU AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_INDIVIDUS AS VARCHAR(255));
			
				INSERT INTO JOURNAL_DES_TRAITEMENTS  --Ajout du commentaire dans la table des traitements
				VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);

				END

			SET @VAR_LIGNE_INDIVIDU=@VAR_LIGNE_INDIVIDU+1;--boucle par salarié
		
			END

		DELETE TRAVAIL_RENUMEROTATION_MATRICULE;--suppression des enregistrements pour le prochain tour
		SET @VAR_TRAV1_MATRICULEHRS_TEMPORAIRE=0;
		SELECT @VAR_LIGNE_INDIVIDU=MIN(IND_LIGNE) FROM VENTILATION_INDIVIDUS;--Remise 0 du compteur salarié à traiter
		SET @VAR_SOCIETE_LIGNE=@VAR_SOCIETE_LIGNE+1;--boucle par société

	END
END

GO

--Gestion des nouveaux codes établissements
--attention dans la table Etablissement on trouve plusieurs fois les mêmes valeurs

DECLARE

@VAR_SOCIETE_LIGNE int,--société en cours
@VAR_SOCIETE_TOTAL int,--total des sociétés
@VAR_SOCIETE_CEMP char(4),--société à traiter
@VAR_ETABLISSEMENT_LIGNE int, --établissement en cours
@VAR_ETABLISSEMENT_TOTAL int, --total des établissement
@VAR_SOCIETE_ETABLISSEMENT char(4), --va lire les 4 première position de gauche du champ etablissement dans etablissement pour trouver la société
@VAR_ETABLISSEMENT_CODE_HRU varchar(35),--code établissement HRU
@VAR_ETABLISSEMENT_CODE_HRS_TEMP int, --Incrémentation des établissements
@VAR_ETABLISSEMENT_CODE_HRS char(3),--code établissement HRS
@VAR_RAISON_SOCIALE varchar(255),
@VAR_NATURECONTROLE varchar(255),
@VAR_RESULTATCONTROLE varchar(255),
@VAR_COMMENTAIRE varchar(255),
@VAR_TYPE_TRANSCO varchar(35),--alimente la table de transco
@VAR_TYPE_VALEUR_HRU int,--test si l'établissement existe déjà dans la table de transco
@VAR_TRA_SIREN varchar(35); --SIREN de la société

SET @VAR_TYPE_TRANSCO='Etablissement'
SET @VAR_ETABLISSEMENT_CODE_HRS_TEMP=0;
SET @VAR_SOCIETE_LIGNE=1; 
SET @VAR_ETABLISSEMENT_LIGNE=1;

SELECT @VAR_SOCIETE_TOTAL=COUNT(*) FROM EMPLOYEUR;
SELECT @VAR_ETABLISSEMENT_TOTAL=COUNT(*) FROM ETABLISSEMENT;

WHILE @VAR_SOCIETE_LIGNE<=@VAR_SOCIETE_TOTAL --boucle par société

BEGIN

SELECT @VAR_SOCIETE_CEMP=Employeur FROM EMPLOYEUR WHERE @VAR_SOCIETE_LIGNE=SOCIETE_LIGNE;--récupération de la société à traiter
SELECT @VAR_TRA_SIREN=Siren FROM EMPLOYEUR WHERE @VAR_SOCIETE_LIGNE=SOCIETE_LIGNE; --récupération du SIREN


	WHILE @VAR_ETABLISSEMENT_LIGNE<=@VAR_ETABLISSEMENT_TOTAL --boucle par établissement

	BEGIN

	SELECT @VAR_SOCIETE_ETABLISSEMENT=LEFT(Etablissement,4) FROM ETABLISSEMENT WHERE  ETABLISSEMENT_LIGNE=@VAR_ETABLISSEMENT_LIGNE;--récupération du code société
		
		IF @VAR_SOCIETE_ETABLISSEMENT=@VAR_SOCIETE_CEMP --Si le code société de l'établissement correspond à l'établissement en cours alors traitement

			BEGIN

			SELECT @VAR_ETABLISSEMENT_CODE_HRU=Etablissement FROM ETABLISSEMENT WHERE ETABLISSEMENT_LIGNE=@VAR_ETABLISSEMENT_LIGNE;
			SELECT @VAR_TYPE_VALEUR_HRU=COUNT(*) FROM TRANSCO WHERE TRA_VALEURHRU=@VAR_ETABLISSEMENT_CODE_HRU;--recherche si l'établissement a déjà été traité

			IF @VAR_TYPE_VALEUR_HRU=0 --Test si l'établissement a déjà été importé

				BEGIN

				SET @VAR_ETABLISSEMENT_CODE_HRS_TEMP=@VAR_ETABLISSEMENT_CODE_HRS_TEMP+1;--Incrémentation du compteur
			
				
					IF @VAR_ETABLISSEMENT_CODE_HRS_TEMP<10--Ajout des 0 

						BEGIN
				
						SET @VAR_ETABLISSEMENT_CODE_HRS=CONCAT('00',CAST(@VAR_ETABLISSEMENT_CODE_HRS_TEMP AS VARCHAR(3)));
				
						END

					ELSE

						BEGIN

						SET @VAR_ETABLISSEMENT_CODE_HRS=CONCAT('0',CAST(@VAR_ETABLISSEMENT_CODE_HRS_TEMP AS VARCHAR(3)));

						END
		
				Print 'Société en cours '+@VAR_SOCIETE_CEMP+' l établissement '+@VAR_ETABLISSEMENT_CODE_HRU+' devient '+@VAR_ETABLISSEMENT_CODE_HRS-- Affiche du message
				SET @VAR_COMMENTAIRE='Société en cours '+@VAR_SOCIETE_CEMP+' l établissement '+@VAR_ETABLISSEMENT_CODE_HRU+' devient '+@VAR_ETABLISSEMENT_CODE_HRS;
				
				INSERT INTO TRANSCO
				VALUES (@VAR_TYPE_TRANSCO,@VAR_ETABLISSEMENT_CODE_HRU,@VAR_ETABLISSEMENT_CODE_HRS,@VAR_TRA_SIREN);

				END
				
				ELSE --L'établissement existe déjà

				BEGIN

				Print 'L établissement a déjà été traité'
				SET @VAR_COMMENTAIRE='L établissement a déjà été traité';

				END
			END

			ELSE--l'établissement ne fait pas partie de la société en cours

			BEGIN

			Print 'L établissement ne fait pas partie de la société'
			SET @VAR_COMMENTAIRE='L établissement ne fait pas partie de la société';
			END
								   
			INSERT INTO JOURNAL_DES_TRAITEMENTS  --Ajout du commentaire dans la table des traitements
			VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);
			

	SET @VAR_ETABLISSEMENT_LIGNE=@VAR_ETABLISSEMENT_LIGNE+1;

	END

SET @VAR_ETABLISSEMENT_CODE_HRS_TEMP=0;
SET @VAR_ETABLISSEMENT_LIGNE=1;
SET @VAR_SOCIETE_LIGNE=@VAR_SOCIETE_LIGNE+1;

END

GO

--Alimentation de la table HR_SPRINT_ETABLISS

DECLARE

@VAR_ET_SIREN varchar(35),
@VAR_ET_ETABLISSEMENT char(3),
@VAR_ET_LIBELLE varchar(35),
@VAR_ET_ABREGE varchar(35),
@VAR_ET_ADRESSE1 varchar(50),
@VAR_ET_CODEPOSTAL char(5),
@VAR_ET_VILLE varchar(35),
@VAR_ET_DIVTERRIT char(5),
@VAR_ET_PAYS char(3),
@VAR_ET_LANGUE char(3),
@VAR_ET_SOCIETE char(3),
@VAR_ET_JURIDIQUE char(3),
@VAR_ET_SIRET char(14),
@VAR_NIC_ETABLISSEMENT varchar(5),
@VAR_ET_APE char(5),
@VAR_CODE_ETAB_HR_SPRINT char(3), --code établissement HR Sprint
@VAR_CODE_ETAB_HRU char(13),-- code établissement HRU
@VAR_NBRE_ETABLISSEMENT int,--nbre total d'établissement
@VAR_ETABLISSEMENT_EN_COURS int; --ligne en cours

SELECT @VAR_ETABLISSEMENT_EN_COURS=MIN(TRA_ID) FROM TRANSCO WHERE TRA_TYPE='Etablissement';
SELECT @VAR_NBRE_ETABLISSEMENT=MAX(TRA_ID) FROM TRANSCO WHERE TRA_TYPE='Etablissement';
SET @VAR_ET_DIVTERRIT='';
SET @VAR_ET_SOCIETE='001';
SET @VAR_ET_PAYS='FRA';
SET @VAR_ET_LANGUE='';
SET @VAR_ET_JURIDIQUE='';

WHILE @VAR_ETABLISSEMENT_EN_COURS<=@VAR_NBRE_ETABLISSEMENT

BEGIN

SELECT @VAR_CODE_ETAB_HR_SPRINT=TRA_VALEURHRS FROM TRANSCO WHERE TRA_ID=@VAR_ETABLISSEMENT_EN_COURS; --récupération du code établissement HRS
SET @VAR_ET_ETABLISSEMENT=@VAR_CODE_ETAB_HR_SPRINT;
SELECT @VAR_CODE_ETAB_HRU=TRA_VALEURHRU FROM TRANSCO WHERE TRA_ID=@VAR_ETABLISSEMENT_EN_COURS;--récupération du code établissement HRU
SELECT @VAR_ET_SIREN=TRA_SIREN FROM TRANSCO WHERE TRA_ID=@VAR_ETABLISSEMENT_EN_COURS; --récupération du SIREN de l'établissement

SELECT TOP(1) @VAR_ET_LIBELLE=[Raison Sociale] FROM ETABLISSEMENT WHERE Etablissement=@VAR_CODE_ETAB_HRU;
SELECT TOP(1) @VAR_ET_ABREGE=[Raison Sociale] FROM ETABLISSEMENT WHERE Etablissement=@VAR_CODE_ETAB_HRU;
SELECT TOP(1) @VAR_NIC_ETABLISSEMENT=[Nic] FROM ETABLISSEMENT WHERE Etablissement=@VAR_CODE_ETAB_HRU;--récupération du NIC etablissement
SET @VAR_ET_SIRET=CONCAT(@VAR_ET_SIREN,@VAR_NIC_ETABLISSEMENT);
Print @VAR_ET_SIRET
SELECT TOP(1) @VAR_ET_APE=[Code APET] FROM ETABLISSEMENT WHERE Etablissement=@VAR_CODE_ETAB_HRU;--récupération du NIC etablissement
SELECT TOP(1) @VAR_ET_ADRESSE1=Voie FROM ETABLISSEMENT WHERE Etablissement=@VAR_CODE_ETAB_HRU;--récupération du NIC etablissement
SELECT TOP(1) @VAR_ET_CODEPOSTAL=[Code postal] FROM ETABLISSEMENT WHERE Etablissement=@VAR_CODE_ETAB_HRU;--récupération du NIC etablissement
SELECT TOP(1) @VAR_ET_VILLE=[Localité] FROM ETABLISSEMENT WHERE Etablissement=@VAR_CODE_ETAB_HRU;--récupération du NIC etablissement

INSERT INTO HR_SPRINT_ETABLISS
VALUES (@VAR_ET_SIREN,@VAR_ET_ETABLISSEMENT,@VAR_ET_LIBELLE,@VAR_ET_ABREGE,@VAR_ET_ADRESSE1,@VAR_ET_CODEPOSTAL,@VAR_ET_VILLE,@VAR_ET_DIVTERRIT,@VAR_ET_PAYS,
@VAR_ET_LANGUE,@VAR_ET_SOCIETE,@VAR_ET_JURIDIQUE,@VAR_ET_SIRET,@VAR_ET_APE);

PRINT 'Création de l établissement '+@VAR_ET_LIBELLE

SET @VAR_ETABLISSEMENT_EN_COURS=@VAR_ETABLISSEMENT_EN_COURS+1;

END

GO

--Création des libellés d'emploi/coefficient/qualification/niveau/zones libres
--Les libellés sont dans la table VALIDCONTRAT il faut lire l'ensemble des lignes et importer dans la table TRANSCO si on ne connait pas la valeur
--Attention les tables libres peuvent etre partagés donc on utilisera le SIREN 9999999 comme valeur

DECLARE
@VAR_SOCIETE_TOTAL int,
@VAR_SOCIETE_LIGNE int,
@VAR_NATURECONTROLE varchar(255),
@VAR_RESULTATCONTROLE varchar(255),
@VAR_COMMENTAIRE varchar(255),
@VAR_CONTRAT_EN_COURS int,
@VAR_CONTRAT_TOTAL int,
@VAR_EMPLOI_VALEUR_HRU varchar(35),
@VAR_EMPLOI_VALEUR_HRS char(3),--valeur HRS
@VAR_EMPLOI_TEMPORAIRE int, --code de transco
@VAR_EMPLOI_VALEUR_HRU_TRANSCO int,
@VAR_COEFFICIENT_VALEUR_HRU_TRANSCO int,
@VAR_POSITION_VALEUR_HRU_TRANSCO int,
@VAR_NIVEAU_VALEUR_HRU_TRANSCO int,
@VAR_QUALIFICATION_VALEUR_HRU_TRANSCO int,
@VAR_TRANSCO_TYPE varchar(35),
@VAR_TRA_SIREN varchar(35),
@VAR_CEMP_SOCIETE varchar(35),
@VAR_CEMP_SALARIE varchar(35),
@VAR_SALARIE varchar(35),
@VAR_COEFFICIENT_VALEUR_HRU varchar(35),
@VAR_QUALIFICATION_VALEUR_HRU varchar(35),
@VAR_NIVEAU_VALEUR_HRU varchar(35),
@VAR_POSITION_VALEUR_HRU varchar(35),
@VAR_COEFFICIENT_TEMPORAIRE int,
@VAR_COEFFICIENT_VALEUR_HRS char(3),
@VAR_QUALIFICATION_VALEUR_HRS char(3),
@VAR_CTA01_VALEUR_HRU varchar(35),
@VAR_CTA01_VALEUR_HRS varchar(35),
@VAR_CTA01_TEMPORAIRE varchar(35),
@VAR_CTA01_VALEUR_HRU_TRANSCO varchar(35),
@VAR_CTA02_VALEUR_HRU varchar(35),
@VAR_CTA02_VALEUR_HRS varchar(35),
@VAR_CTA02_TEMPORAIRE varchar(35),
@VAR_CTA02_VALEUR_HRU_TRANSCO varchar(35),
@VAR_PAR_PLE_PARTAGE char(1),
@VAR_PAR_TABLE_LIBRE_PARTAGE char(1),
@VAR_NIVEAU_VALEUR_HRS char(3);

SET @VAR_EMPLOI_TEMPORAIRE=0;
SELECT @VAR_SOCIETE_TOTAL=COUNT(*) FROM EMPLOYEUR;--nombre de sociétés à traiter
SELECT @VAR_CONTRAT_TOTAL=COUNT(*) FROM VALIDCONTRAT;--total contrat à traiter
SET @VAR_SOCIETE_LIGNE=1;
SET @VAR_CONTRAT_EN_COURS=1;

SELECT @VAR_PAR_PLE_PARTAGE=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='Partage PLE';
SELECT @VAR_PAR_TABLE_LIBRE_PARTAGE=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='Partage Table libre';

WHILE @VAR_CONTRAT_EN_COURS<=@VAR_CONTRAT_TOTAL--boucle par contrat
	
BEGIN 

	SELECT @VAR_SALARIE=MATRI FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS;--récupération du code matricule salarié
	SELECT @VAR_CEMP_SALARIE=CEMP FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS;--récupération CEMP SALARIE
	SELECT @VAR_EMPLOI_VALEUR_HRU=LQUAL FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS; -- récupération du libellé emploi sur le contrat en cours
	SELECT @VAR_COEFFICIENT_VALEUR_HRU=COFFI FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS;--récupération du coefficient
	SELECT @VAR_POSITION_VALEUR_HRU=POSIT FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS; --récupération de la position
	SELECT @VAR_QUALIFICATION_VALEUR_HRU=QUALI FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS;--récupération de la qualification
	SELECT @VAR_NIVEAU_VALEUR_HRU=NIVEA FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS;--récupération de la qualification
	SELECT @VAR_TRA_SIREN=Siren FROM EMPLOYEUR WHERE Employeur=@VAR_CEMP_SALARIE; --récupération du SIREN du contrat
	IF @VAR_PAR_PLE_PARTAGE='X' -- si on partage les libellés d'emploi 
	BEGIN
		SET @VAR_TRA_SIREN='999999999'
		SELECT @VAR_EMPLOI_VALEUR_HRU_TRANSCO=COUNT(*) FROM TRANSCO WHERE TRA_VALEURHRU=@VAR_EMPLOI_VALEUR_HRU AND TRA_SIREN=@VAR_TRA_SIREN; --test si la valeur existe déjà
		Print 'Attention client en mode partage des libellés d emploi'
	END
	ELSE--si on ne partage pas les libellés d'emploi
	BEGIN
			SELECT @VAR_EMPLOI_VALEUR_HRU_TRANSCO=COUNT(*) FROM TRANSCO WHERE TRA_VALEURHRU=@VAR_EMPLOI_VALEUR_HRU AND TRA_SIREN=@VAR_TRA_SIREN; --test si la valeur existe déjà
	END
	
	SELECT @VAR_COEFFICIENT_VALEUR_HRU_TRANSCO=COUNT(*) FROM TRANSCO WHERE TRA_VALEURHRU=@VAR_COEFFICIENT_VALEUR_HRU AND TRA_SIREN=@VAR_TRA_SIREN;
	SELECT @VAR_QUALIFICATION_VALEUR_HRU_TRANSCO=COUNT(*) FROM TRANSCO WHERE TRA_VALEURHRU=@VAR_QUALIFICATION_VALEUR_HRU AND TRA_SIREN=@VAR_TRA_SIREN;
	SELECT @VAR_CEMP_SALARIE=CEMP FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS;--récupération de l'employeur du contrat
	IF @VAR_PAR_TABLE_LIBRE_PARTAGE='X' --si on partage les tables
	BEGIN
		SELECT @VAR_CTA01_VALEUR_HRU=CTA01 FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS;--récupération du code stat
		SELECT @VAR_CTA01_VALEUR_HRU_TRANSCO=COUNT(*) FROM TRANSCO WHERE TRA_VALEURHRU=@VAR_CTA01_VALEUR_HRU; --test si le code stat existe
		SELECT @VAR_CTA02_VALEUR_HRU=CTA02 FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS;--récupération du code travail n1
		SELECT @VAR_CTA02_VALEUR_HRU_TRANSCO=COUNT(*) FROM TRANSCO WHERE TRA_VALEURHRU=@VAR_CTA02_VALEUR_HRU;--controle si la valeur existe
		Print 'Attention client en mode partage des tables libres'

	END

	ELSE 

	BEGIN
	SELECT @VAR_CTA01_VALEUR_HRU=CTA01 FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS;--récupération du code stat
		SELECT @VAR_CTA01_VALEUR_HRU_TRANSCO=COUNT(*) FROM TRANSCO WHERE TRA_VALEURHRU=@VAR_CTA01_VALEUR_HRU AND TRA_SIREN=@VAR_TRA_SIREN; --test si le code stat existe
		SELECT @VAR_CTA02_VALEUR_HRU=CTA02 FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS;--récupération du code travail n1
		SELECT @VAR_CTA02_VALEUR_HRU_TRANSCO=COUNT(*) FROM TRANSCO WHERE TRA_VALEURHRU=@VAR_CTA02_VALEUR_HRU AND TRA_SIREN=@VAR_TRA_SIREN;--controle si la valeur existe

	END
	--libellé emploi

		IF @VAR_EMPLOI_VALEUR_HRU_TRANSCO=0 --Ajout d'un nouveau code emploi

		BEGIN
						
			SET @VAR_TRANSCO_TYPE='Emploi';
			SET @VAR_NATURECONTROLE='Transco emploi';
			SET @VAR_RESULTATCONTROLE='Ok';

			SELECT @VAR_EMPLOI_TEMPORAIRE=COUNT(*) FROM TRANSCO WHERE TRA_TYPE='Emploi' AND TRA_SIREN=@VAR_TRA_SIREN;

			SET @VAR_EMPLOI_TEMPORAIRE=@VAR_EMPLOI_TEMPORAIRE+1;--incrémentation du code
	
			IF @VAR_EMPLOI_TEMPORAIRE<10 --ajout des 0
			
			BEGIN
				SET @VAR_EMPLOI_VALEUR_HRS=CONCAT('00',CAST(@VAR_EMPLOI_TEMPORAIRE AS char(3)));--passage au format texte
			END

			IF @VAR_EMPLOI_TEMPORAIRE>10 AND @VAR_EMPLOI_TEMPORAIRE<100 

			BEGIN
				SET @VAR_EMPLOI_VALEUR_HRS=CONCAT('0',CAST(@VAR_EMPLOI_TEMPORAIRE AS char(3)));--passage au format texte
			END
		
			IF @VAR_EMPLOI_TEMPORAIRE>100 

			BEGIN
				SET @VAR_EMPLOI_VALEUR_HRS=CAST(@VAR_EMPLOI_TEMPORAIRE AS char(3));--passage au format texte
			END
				

			INSERT INTO TRANSCO
			VALUES (@VAR_TRANSCO_TYPE,@VAR_EMPLOI_VALEUR_HRU,@VAR_EMPLOI_VALEUR_HRS,@VAR_TRA_SIREN);

			PRINT 'Le libellé emploi de HRU '+@VAR_EMPLOI_VALEUR_HRU+' devient le code '+@VAR_EMPLOI_VALEUR_HRS+' contrat en cours '+CAST(@VAR_CONTRAT_EN_COURS AS varchar(255))+'/'+CAST(@VAR_CONTRAT_TOTAL AS VARCHAR(255))
			SET @VAR_COMMENTAIRE='Le libellé emploi de HRU '+@VAR_EMPLOI_VALEUR_HRU+' devient le code '+@VAR_EMPLOI_VALEUR_HRS+' contrat en cours '+CAST(@VAR_CONTRAT_EN_COURS AS varchar(255))+'/'+CAST(@VAR_CONTRAT_TOTAL AS VARCHAR(255));
	
		END

		ELSE --si le libellé d'emploi existe déjà

		BEGIN

			SET @VAR_TRANSCO_TYPE='Emploi';
			SET @VAR_NATURECONTROLE='Transco emploi';
			SET @VAR_RESULTATCONTROLE='Ok';

			PRINT 'Le libellé emploi de HRU '+@VAR_EMPLOI_VALEUR_HRU+' a déjà été traité contrat en cours '+CAST(@VAR_CONTRAT_EN_COURS AS varchar(255))+'/'+CAST(@VAR_CONTRAT_TOTAL AS VARCHAR(255)) 
			SET @VAR_COMMENTAIRE='Le libellé emploi de HRU '+@VAR_EMPLOI_VALEUR_HRU+' a déjà été traité contrat en cours '+CAST(@VAR_CONTRAT_EN_COURS AS varchar(255))+'/'+CAST(@VAR_CONTRAT_TOTAL AS VARCHAR(255));
	
		END
		
		INSERT INTO JOURNAL_DES_TRAITEMENTS  --Ajout du commentaire dans la table des traitements
		VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);

	--Gestion du CTA01
	
	IF @VAR_CTA01_VALEUR_HRU_TRANSCO=0 --Ajout d'un nouveau code emploi

		BEGIN
						
			SET @VAR_TRANSCO_TYPE='CTA01';
			SET @VAR_NATURECONTROLE='Transco CTA01';
			SET @VAR_RESULTATCONTROLE='Ok';

			SELECT @VAR_CTA01_TEMPORAIRE=COUNT(*) FROM TRANSCO WHERE TRA_TYPE='CTA01' AND TRA_SIREN=@VAR_TRA_SIREN;

			SET @VAR_CTA01_TEMPORAIRE=@VAR_CTA01_TEMPORAIRE+1;--incrémentation du code
	
			IF @VAR_CTA01_TEMPORAIRE<10 --ajout des 0
			
			BEGIN
				SET @VAR_CTA01_VALEUR_HRS=CONCAT('00',CAST(@VAR_CTA01_TEMPORAIRE AS char(3)));--passage au format texte
			END

			IF @VAR_CTA01_TEMPORAIRE>10 AND @VAR_EMPLOI_TEMPORAIRE<100 

			BEGIN
				SET @VAR_CTA01_VALEUR_HRS=CONCAT('0',CAST(@VAR_CTA01_TEMPORAIRE AS char(3)));--passage au format texte
			END
		
			IF @VAR_CTA01_TEMPORAIRE>100 

			BEGIN
				SET @VAR_CTA01_VALEUR_HRS=CAST(@VAR_CTA01_TEMPORAIRE AS char(3));--passage au format texte
			END
				

			INSERT INTO TRANSCO
			VALUES (@VAR_TRANSCO_TYPE,@VAR_CTA01_VALEUR_HRU,@VAR_CTA01_VALEUR_HRS,@VAR_TRA_SIREN);

			PRINT 'Le code CTA01 de HRU '+@VAR_CTA01_VALEUR_HRU+' devient le code '+@VAR_CTA01_VALEUR_HRS+' contrat en cours '+CAST(@VAR_CONTRAT_EN_COURS AS varchar(255))+'/'+CAST(@VAR_CONTRAT_TOTAL AS VARCHAR(255))
			SET @VAR_COMMENTAIRE='Le code CTA01 de HRU '+@VAR_CTA01_VALEUR_HRU+' devient le code '+@VAR_CTA01_VALEUR_HRS+' contrat en cours '+CAST(@VAR_CONTRAT_EN_COURS AS varchar(255))+'/'+CAST(@VAR_CONTRAT_TOTAL AS VARCHAR(255));
	
		END

		ELSE --si le CTA01 existe

		BEGIN

			SET @VAR_TRANSCO_TYPE='CTA01';
			SET @VAR_NATURECONTROLE='Transco CTA01';
			SET @VAR_RESULTATCONTROLE='Ok';

			PRINT 'Le code CTA01 '+@VAR_CTA01_VALEUR_HRU+' a déjà été traité contrat en cours '+CAST(@VAR_CONTRAT_EN_COURS AS varchar(255))+'/'+CAST(@VAR_CONTRAT_TOTAL AS VARCHAR(255)) 
			SET @VAR_COMMENTAIRE='Le code CTA01 '+@VAR_CTA01_VALEUR_HRU+' a déjà été traité contrat en cours '+CAST(@VAR_CONTRAT_EN_COURS AS varchar(255))+'/'+CAST(@VAR_CONTRAT_TOTAL AS VARCHAR(255));
	
		END
		
		INSERT INTO JOURNAL_DES_TRAITEMENTS  --Ajout du commentaire dans la table des traitements
		VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);

	--Gestion du code CTA02
	
	IF @VAR_CTA02_VALEUR_HRU_TRANSCO=0 --Ajout d'un nouveau code emploi

		BEGIN
						
			SET @VAR_TRANSCO_TYPE='CTA02';
			SET @VAR_NATURECONTROLE='Transco travail CTA02';
			SET @VAR_RESULTATCONTROLE='Ok';

			SELECT @VAR_CTA02_TEMPORAIRE=COUNT(*) FROM TRANSCO WHERE TRA_TYPE='CTA02' AND TRA_SIREN=@VAR_TRA_SIREN;

			SET @VAR_CTA02_TEMPORAIRE=@VAR_CTA02_TEMPORAIRE+1;--incrémentation du code
	
			IF @VAR_CTA02_TEMPORAIRE<10 --ajout des 0
			
			BEGIN
				SET @VAR_CTA02_VALEUR_HRS=CONCAT('00',CAST(@VAR_CTA02_TEMPORAIRE AS char(3)));--passage au format texte
			END

			IF @VAR_CTA02_TEMPORAIRE>10 AND @VAR_EMPLOI_TEMPORAIRE<100 

			BEGIN
				SET @VAR_CTA02_VALEUR_HRS=CONCAT('0',CAST(@VAR_CTA02_TEMPORAIRE AS char(3)));--passage au format texte
			END
		
			IF @VAR_CTA02_TEMPORAIRE>100 

			BEGIN
				SET @VAR_CTA02_VALEUR_HRS=CAST(@VAR_CTA02_TEMPORAIRE AS char(3));--passage au format texte
			END
				

			INSERT INTO TRANSCO
			VALUES (@VAR_TRANSCO_TYPE,@VAR_CTA02_VALEUR_HRU,@VAR_CTA02_VALEUR_HRS,@VAR_TRA_SIREN);

			PRINT 'Le code CTA02 de HRU '+@VAR_CTA02_VALEUR_HRU+' devient le code '+@VAR_CTA02_VALEUR_HRS+' contrat en cours '+CAST(@VAR_CONTRAT_EN_COURS AS varchar(255))+'/'+CAST(@VAR_CONTRAT_TOTAL AS VARCHAR(255))
			SET @VAR_COMMENTAIRE='Le code CTA02 de HRU '+@VAR_CTA02_VALEUR_HRU+' devient le code '+@VAR_CTA02_VALEUR_HRS+' contrat en cours '+CAST(@VAR_CONTRAT_EN_COURS AS varchar(255))+'/'+CAST(@VAR_CONTRAT_TOTAL AS VARCHAR(255));
	
		END

		ELSE --si le code CTA02 existe déjà

		BEGIN

			SET @VAR_TRANSCO_TYPE='CTA02';
			SET @VAR_NATURECONTROLE='Transco CTA02';
			SET @VAR_RESULTATCONTROLE='Ok';

			PRINT 'Le code CTA02 de HRU '+@VAR_CTA02_VALEUR_HRU+' a déjà été traité contrat en cours '+CAST(@VAR_CONTRAT_EN_COURS AS varchar(255))+'/'+CAST(@VAR_CONTRAT_TOTAL AS VARCHAR(255)) 
			SET @VAR_COMMENTAIRE='Le code CTA02 de HRU '+@VAR_CTA02_VALEUR_HRU+' a déjà été traité contrat en cours '+CAST(@VAR_CONTRAT_EN_COURS AS varchar(255))+'/'+CAST(@VAR_CONTRAT_TOTAL AS VARCHAR(255));
	
		END
		
		INSERT INTO JOURNAL_DES_TRAITEMENTS  --Ajout du commentaire dans la table des traitements
		VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);

		SET @VAR_CONTRAT_EN_COURS=@VAR_CONTRAT_EN_COURS+1;--incrémentation du compteur

		

	END--fin de boucle par contrat sur la société en cours

GO

--Reprise des classifications

DECLARE

@VAR_PMI_SIREN varchar(35),
@VAR_PMI_NATURE char(3),
@VAR_PMI_CONVENTION char(3),
@VAR_PMI_TYPENATURE char(3),
@VAR_PMI_CODE varchar(17),
@VAR_PMI_LIBELLE varchar(35),
@VAR_PMI_PREDEFINI char(3),
@VARPMI_NODOSSIER char(6),
@VAR_IDCC char(4),
@VAR_TOTAL_LIGNES_CLASSIF_1 int,
@VAR_TOTAL_LIGNES_CLASSIF_2 int,
@VAR_TOTAL_LIGNES_CLASSIF_3 int,
@VAR_TOTAL_LIGNES_CLASSIF_4 int,
@VAR_TOTAL_LIGNES_CLASSIF_5 int,
@VAR_LIGNE_EN_COURS_CLASSIF_1 int,
@VAR_LIGNE_EN_COURS_CLASSIF_2 int,
@VAR_LIGNE_EN_COURS_CLASSIF_3 int,
@VAR_LIGNE_EN_COURS_CLASSIF_4 int,
@VAR_LIGNE_EN_COURS_CLASSIF_5 int;

SET @VAR_LIGNE_EN_COURS_CLASSIF_1=1;
SET @VAR_LIGNE_EN_COURS_CLASSIF_2=1;
SET @VAR_LIGNE_EN_COURS_CLASSIF_3=1;
SET @VAR_LIGNE_EN_COURS_CLASSIF_4=1;
SET @VAR_LIGNE_EN_COURS_CLASSIF_5=1;

SELECT @VAR_TOTAL_LIGNES_CLASSIF_1=COUNT(*) FROM TRSCLASSIFICATION1;
SELECT @VAR_TOTAL_LIGNES_CLASSIF_3=COUNT(*) FROM TRSCLASSIFICATION3;
SELECT @VAR_TOTAL_LIGNES_CLASSIF_4=COUNT(*) FROM TRSCLASSIFICATION4;
SELECT @VAR_TOTAL_LIGNES_CLASSIF_5=COUNT(*) FROM TRSCLASSIFICATION5;

SET @VAR_PMI_SIREN='999999999';

--Classification 1 =Qualification

WHILE @VAR_LIGNE_EN_COURS_CLASSIF_1<=@VAR_TOTAL_LIGNES_CLASSIF_1

BEGIN


SET @VAR_PMI_NATURE='QUA';
SELECT @VAR_IDCC=LEFT(CLASSIF1,4) FROM TRSCLASSIFICATION1 WHERE TRSCLASSIFICATION1_LIGNE=@VAR_LIGNE_EN_COURS_CLASSIF_1;
SELECT @VAR_PMI_CONVENTION=PCV_CONVENTION FROM HR_SPRINT_CONVENTIONCOLL WHERE PCV_IDCC=@VAR_IDCC;
SET @VAR_PMI_TYPENATURE='VAL'
SELECT @VAR_PMI_CODE=RUBCHRU FROM TRSCLASSIFICATION1 WHERE TRSCLASSIFICATION1_LIGNE=@VAR_LIGNE_EN_COURS_CLASSIF_1;
SELECT @VAR_PMI_LIBELLE=RUBCHRU FROM TRSCLASSIFICATION1 WHERE TRSCLASSIFICATION1_LIGNE=@VAR_LIGNE_EN_COURS_CLASSIF_1;

SET @VAR_PMI_PREDEFINI='STD';
SET @VARPMI_NODOSSIER='000000';

INSERT INTO HR_SPRINT_MINIMUMCONVENT
VALUES (@VAR_PMI_SIREN,@VAR_PMI_NATURE,@VAR_PMI_CONVENTION,@VAR_PMI_TYPENATURE,@VAR_PMI_CODE,@VAR_PMI_LIBELLE,@VAR_PMI_PREDEFINI,@VARPMI_NODOSSIER);

Print 'Création de la qualification'+@VAR_PMI_LIBELLE+' sur la convention IDCC '+@VAR_PMI_CONVENTION+' ligne en cours '+cast(@VAR_LIGNE_EN_COURS_CLASSIF_1 as varchar(255))+'/'+cast(@VAR_TOTAL_LIGNES_CLASSIF_1 as varchar(255))

SET @VAR_LIGNE_EN_COURS_CLASSIF_1=@VAR_LIGNE_EN_COURS_CLASSIF_1+1;

END

--Classification 3 =Coefficient

WHILE @VAR_LIGNE_EN_COURS_CLASSIF_3<=@VAR_TOTAL_LIGNES_CLASSIF_3

BEGIN


SET @VAR_PMI_NATURE='COE';

SELECT @VAR_IDCC=LEFT(CLASSIF3,4) FROM TRSCLASSIFICATION3 WHERE TRSCLASSIFICATION3_LIGNE=@VAR_LIGNE_EN_COURS_CLASSIF_3;
SELECT @VAR_PMI_CONVENTION=PCV_CONVENTION FROM HR_SPRINT_CONVENTIONCOLL WHERE PCV_IDCC=@VAR_IDCC;SET @VAR_PMI_TYPENATURE='VAL'
SELECT @VAR_PMI_CODE=RUBCHRU FROM TRSCLASSIFICATION3 WHERE TRSCLASSIFICATION3_LIGNE=@VAR_LIGNE_EN_COURS_CLASSIF_3;
SELECT @VAR_PMI_LIBELLE=RUBCHRU FROM TRSCLASSIFICATION3 WHERE TRSCLASSIFICATION3_LIGNE=@VAR_LIGNE_EN_COURS_CLASSIF_3;

SET @VAR_PMI_PREDEFINI='STD';
SET @VARPMI_NODOSSIER='000000';

INSERT INTO HR_SPRINT_MINIMUMCONVENT
VALUES (@VAR_PMI_SIREN,@VAR_PMI_NATURE,@VAR_PMI_CONVENTION,@VAR_PMI_TYPENATURE,@VAR_PMI_CODE,@VAR_PMI_LIBELLE,@VAR_PMI_PREDEFINI,@VARPMI_NODOSSIER);

Print 'Création du coefficient '+@VAR_PMI_LIBELLE+' sur la convention IDCC '+@VAR_PMI_CONVENTION+' ligne en cours '+cast(@VAR_LIGNE_EN_COURS_CLASSIF_3 as varchar(255))+'/'+cast(@VAR_TOTAL_LIGNES_CLASSIF_3 as varchar(255))

SET @VAR_LIGNE_EN_COURS_CLASSIF_3=@VAR_LIGNE_EN_COURS_CLASSIF_3+1;

END

--Classification 4 =Niveau

WHILE @VAR_LIGNE_EN_COURS_CLASSIF_4<=@VAR_TOTAL_LIGNES_CLASSIF_4

BEGIN


SET @VAR_PMI_NATURE='NIV';
SELECT @VAR_IDCC=LEFT(CLASSIF4,4) FROM TRSCLASSIFICATION4 WHERE TRSCLASSIFICATION4_LIGNE=@VAR_LIGNE_EN_COURS_CLASSIF_4;
SELECT @VAR_PMI_CONVENTION=PCV_CONVENTION FROM HR_SPRINT_CONVENTIONCOLL WHERE PCV_IDCC=@VAR_IDCC;SET @VAR_PMI_TYPENATURE='VAL'SET @VAR_PMI_TYPENATURE='VAL'
SELECT @VAR_PMI_CODE=RUBCHRU FROM TRSCLASSIFICATION4 WHERE TRSCLASSIFICATION4_LIGNE=@VAR_LIGNE_EN_COURS_CLASSIF_4;
SELECT @VAR_PMI_LIBELLE=RUBCHRU FROM TRSCLASSIFICATION4 WHERE TRSCLASSIFICATION4_LIGNE=@VAR_LIGNE_EN_COURS_CLASSIF_4;

SET @VAR_PMI_PREDEFINI='STD';
SET @VARPMI_NODOSSIER='000000';

INSERT INTO HR_SPRINT_MINIMUMCONVENT
VALUES (@VAR_PMI_SIREN,@VAR_PMI_NATURE,@VAR_PMI_CONVENTION,@VAR_PMI_TYPENATURE,@VAR_PMI_CODE,@VAR_PMI_LIBELLE,@VAR_PMI_PREDEFINI,@VARPMI_NODOSSIER);

Print 'Création du niveau '+@VAR_PMI_LIBELLE+' sur la convention IDCC '+@VAR_PMI_CONVENTION+' ligne en cours '+cast(@VAR_LIGNE_EN_COURS_CLASSIF_4 as varchar(255))+'/'+cast(@VAR_TOTAL_LIGNES_CLASSIF_4 as varchar(255))

SET @VAR_LIGNE_EN_COURS_CLASSIF_4=@VAR_LIGNE_EN_COURS_CLASSIF_4+1;

END

--Classification 5 =Echelon 

WHILE @VAR_LIGNE_EN_COURS_CLASSIF_5<=@VAR_TOTAL_LIGNES_CLASSIF_5

BEGIN


SET @VAR_PMI_NATURE='IND';
SELECT @VAR_IDCC=LEFT(CLASSIF5,4) FROM TRSCLASSIFICATION5 WHERE TRSCLASSIFICATION5_LIGNE=@VAR_LIGNE_EN_COURS_CLASSIF_5;
SELECT @VAR_PMI_CONVENTION=PCV_CONVENTION FROM HR_SPRINT_CONVENTIONCOLL WHERE PCV_IDCC=@VAR_IDCC;SET @VAR_PMI_TYPENATURE='VAL'SET @VAR_PMI_TYPENATURE='VAL'SET @VAR_PMI_TYPENATURE='VAL'
SELECT @VAR_PMI_CODE=RUBCHRU FROM TRSCLASSIFICATION5 WHERE TRSCLASSIFICATION5_LIGNE=@VAR_LIGNE_EN_COURS_CLASSIF_5;
SELECT @VAR_PMI_LIBELLE=RUBCHRU FROM TRSCLASSIFICATION5 WHERE TRSCLASSIFICATION5_LIGNE=@VAR_LIGNE_EN_COURS_CLASSIF_5;

SET @VAR_PMI_PREDEFINI='STD';
SET @VARPMI_NODOSSIER='000000';

INSERT INTO HR_SPRINT_MINIMUMCONVENT
VALUES (@VAR_PMI_SIREN,@VAR_PMI_NATURE,@VAR_PMI_CONVENTION,@VAR_PMI_TYPENATURE,@VAR_PMI_CODE,@VAR_PMI_LIBELLE,@VAR_PMI_PREDEFINI,@VARPMI_NODOSSIER);

Print 'Création de l indice '+@VAR_PMI_LIBELLE+' sur la convention IDCC '+@VAR_PMI_CONVENTION+' ligne en cours '+cast(@VAR_LIGNE_EN_COURS_CLASSIF_5 as varchar(255))+'/'+cast(@VAR_TOTAL_LIGNES_CLASSIF_5 as varchar(255))

SET @VAR_LIGNE_EN_COURS_CLASSIF_5=@VAR_LIGNE_EN_COURS_CLASSIF_5+1;

END

GO

DECLARE 

@VAR_AUXI_LONGUEUR int,
@VAR_AUXI_PREFIXE varchar(35),
@VAR_AUXI_PREFIXE_LONGUEUR int,
@VAR_MATRICULE_LONGUEUR int,
@VAR_MATRICUE_RIGHT int;

SELECT @VAR_AUXI_LONGUEUR=CAST(PAR_VALEUR AS int) FROM PARAMETRES WHERE PAR_NOM LIKE 'AUXI_LONGUEUR'; --récupération de la longueur des comptes auxiliaire
SELECT @VAR_AUXI_PREFIXE=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM LIKE 'AUXI_PREFIXE'; --récupération du prefixe
SET @VAR_AUXI_PREFIXE_LONGUEUR=LEN(@VAR_AUXI_PREFIXE)--nbre de caractères du prefixe
SELECT TOP(1) @VAR_MATRICULE_LONGUEUR=LEN(IND_MATRICULEHRS) FROM VENTILATION_INDIVIDUS --longueur des matricule

--Le code auxiliaire à une longueur @VAR_AUXI_LONGUEUR. Il commence par un préfixe @VAR_AUXI_PREFIXE + Matricule

--Longueur de l'auxiliaire - longueur du prefixe = longueur du code matricule à prendre

SET @VAR_MATRICUE_RIGHT=@VAR_AUXI_LONGUEUR-@VAR_AUXI_PREFIXE_LONGUEUR;

Print 'Nbre de caractères à prendre dans le matricule= '+CAST(@VAR_MATRICUE_RIGHT AS Varchar(255))

GO

--Gestion des codes matricules < 10 positions

DECLARE

@VAR_LONGUEUR_MATRICULE_HRU int,
@VAR_LONGUEUR_CIBLE int,
@VAR_INDIVIDUS_EN_COURS int,
@VAR_NB_CARACTERE_BOURAGE int,
@VAR_INDIVIDUS_TOTAL int;

SET @VAR_LONGUEUR_CIBLE=10;
SELECT @VAR_INDIVIDUS_EN_COURS=MIN(IND_LIGNE) FROM VENTILATION_INDIVIDUS;
SELECT @VAR_INDIVIDUS_TOTAL=MAX(IND_LIGNE) FROM VENTILATION_INDIVIDUS;


WHILE @VAR_INDIVIDUS_EN_COURS<=@VAR_INDIVIDUS_TOTAL

BEGIN

SELECT @VAR_LONGUEUR_MATRICULE_HRU=LEN(IND_MATRICULEHRU) FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_INDIVIDUS_EN_COURS

SET @VAR_NB_CARACTERE_BOURAGE=@VAR_LONGUEUR_CIBLE-@VAR_LONGUEUR_MATRICULE_HRU;

IF @VAR_NB_CARACTERE_BOURAGE=3

BEGIN

	UPDATE VENTILATION_INDIVIDUS SET IND_MATRICULEHRS=CONCAT('000',IND_MATRICULEHRU) WHERE IND_LIGNE=@VAR_INDIVIDUS_EN_COURS;

END

IF @VAR_NB_CARACTERE_BOURAGE=2

BEGIN

	UPDATE VENTILATION_INDIVIDUS SET IND_MATRICULEHRS=CONCAT('00',IND_MATRICULEHRU) WHERE IND_LIGNE=@VAR_INDIVIDUS_EN_COURS;

END

IF @VAR_NB_CARACTERE_BOURAGE=1

BEGIN

	UPDATE VENTILATION_INDIVIDUS SET IND_MATRICULEHRS=CONCAT('0',IND_MATRICULEHRU) WHERE IND_LIGNE=@VAR_INDIVIDUS_EN_COURS;

END

PRINT 'Justification nbre de caractere HRU 10-'+CAST(@VAR_LONGUEUR_MATRICULE_HRU as varchar(255))+'='+CAST(@VAR_NB_CARACTERE_BOURAGE as varchar(255))+' ligne en cours '+cast(@VAR_INDIVIDUS_EN_COURS AS varchar(255))+'/'+cast(@VAR_INDIVIDUS_TOTAL as varchar(255))

SET @VAR_INDIVIDUS_EN_COURS=@VAR_INDIVIDUS_EN_COURS+1;

END

GO

--Création des auxilaires

DECLARE 

@VAR_AUXI_LONGUEUR int,
@VAR_AUXI_PREFIXE varchar(35),
@VAR_AUXI_PREFIXE_LONGUEUR int,
@VAR_MATRICULE_LONGUEUR int,
@VAR_MATRICUE_RIGHT int,
@VAR_SALARIE_LIGNE int,
@VAR_SALARIE_TOTAL int,
@VAR_MATRICULE_SAL varchar(10),
@VAR_AUXILIAIRE varchar(35);

SET @VAR_MATRICULE_SAL=' ';
SELECT @VAR_SALARIE_LIGNE=MIN(IND_LIGNE) FROM VENTILATION_INDIVIDUS;
SELECT @VAR_SALARIE_TOTAL=MAX(IND_LIGNE) FROM VENTILATION_INDIVIDUS;

SELECT @VAR_AUXI_LONGUEUR=CAST(PAR_VALEUR AS int) FROM PARAMETRES WHERE PAR_NOM LIKE 'AUXI_LONGUEUR'; --récupération de la longueur des comptes auxiliaire
SELECT @VAR_AUXI_PREFIXE=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM LIKE 'AUXI_PREFIXE'; --récupération du prefixe
SET @VAR_AUXI_PREFIXE_LONGUEUR=LEN(@VAR_AUXI_PREFIXE)--nbre de caractères du prefixe
SELECT TOP(1) @VAR_MATRICULE_LONGUEUR=LEN(IND_MATRICULEHRS) FROM VENTILATION_INDIVIDUS --longueur des matricule

--Le code auxiliaire à une longueur @VAR_AUXI_LONGUEUR. Il commence par un préfixe @VAR_AUXI_PREFIXE + Matricule

--Longueur de l'auxiliaire - longueur du prefixe = longueur du code matricule à prendre

SET @VAR_MATRICUE_RIGHT=@VAR_AUXI_LONGUEUR-@VAR_AUXI_PREFIXE_LONGUEUR;

Print 'Nbre de caractères à prendre dans le matricule= '+CAST(@VAR_MATRICUE_RIGHT AS Varchar(255))


WHILE @VAR_SALARIE_LIGNE<=@VAR_SALARIE_TOTAL --mise à jour de l'auxiliaire

BEGIN



SELECT @VAR_MATRICULE_SAL=RIGHT(IND_MATRICULEHRS,@VAR_MATRICUE_RIGHT) FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_SALARIE_LIGNE;

SET @VAR_AUXILIAIRE=CONCAT(@VAR_AUXI_PREFIXE,@VAR_MATRICULE_SAL);

UPDATE VENTILATION_INDIVIDUS SET IND_AUXILIAIRE=@VAR_AUXILIAIRE WHERE IND_LIGNE=@VAR_SALARIE_LIGNE;

PRINT 'Création du code auxiliaire '+@VAR_AUXILIAIRE+' ligne en cours '+Cast(@VAR_SALARIE_LIGNE AS varchar(255))+'/'+Cast(@VAR_SALARIE_TOTAL AS varchar(255))

SET @VAR_SALARIE_LIGNE=@VAR_SALARIE_LIGNE+1;

END

GO


--Script de reprise des fichiers HRU vers HR SPRINT

--Reprise de la table INDIVIDU vers SALARIES

DECLARE

@VAR_PSA_SIREN varchar(255),--SIREN de la société
@VAR_PSA_SALARIE varchar(10),--
@VAR_PSA_NUMEROSS varchar(15),
@VAR_PSA_LIBELLE varchar(35),
@VAR_PSA_NOMJF varchar(35),
@VAR_PSA_PRENOM varchar(35),
@VAR_PSA_ETABLISSEMENT char(3),
@VAR_ETABLISSEMENT_SALARIE varchar(35),
@VAR_PSA_ADRESSE1 varchar (35),
@VAR_PSA_CODEPOSTAL char(9),
@VAR_PSA_VILLE varchar(50),
@VAR_PSA_PAYS varchar(3),
@VAR_PSA_DATENAISSANCE datetime,
@VAR_PSA_COMMUNENAISS varchar(35),
@VAR_PSA_DEPTNAISSANCE char(2),
@VAR_PSA_PAYSNAISSANCE char(3),
@VAR_PSA_NATIONALITE char(50),
@VAR_PSA_SEXE char(1),
@VAR_SEXE_TRANSCO char(2),
@VAR_PSA_SITUATIONFAMIL char(3),
@VAR_SITUATIONFAMIL char(1),
@VAR_PSA_DATEENTREE datetime,
@VAR_PSA_DATEANCIENNETE datetime,
@VAR_PSA_DATESORTIE datetime,
@VAR_PSA_CARTESEJOUR varchar(50),
@VAR_PSA_DATEEXPIRSEJOUR datetime,
@VAR_PSA_DELIVRPAR varchar(35),
@VAR_PSA_PERSACHARGE int,
@VAR_PSA_MODEREGLE char(3),
@VAR_HRU_MODE_REGLE char(1),
@VAR_PSA_AUXILIAIRE varchar(17),
@VAR_PSA_TELEPHONE varchar(35),
@VAR_PSA_PORTABLE varchar(35),
@VAR_PSA_COEFFICIENT varchar(3),
@VAR_COEFFICIENT_SALARIE varchar(35),
@VAR_PSA_QUALIFICATION varchar(3),
@VAR_QUALIFICATION_SALARIE varchar(35),
@VAR_PSA_CONDEEMPLOI varchar(50),
@VAR_PSA_LIBELLEEMPLOI char(3),
@VAR_LIBELLE_EMPLOI_SALARIE varchar(35),
@VAR_PSA_HORAIREMOIS varchar(35),
@VAR_PSA_HORHEBDO varchar(35),
@VAR_CALCUL_HORAIRE_HEBDO float,
@VAR_PSA_CIVILITE char(3),
@VAR_PSA_CONGESPAYES char(1),
@VAR_PSA_SALAIREMOIS1 varchar(35),
@VAR_PSA_SALAIREMOIS2 varchar(35),
@VAR_PSA_SALAIREMOIS3 varchar(35),
@VAR_PSA_SALAIREMOIS4 varchar(35),
@VAR_PSA_SALAIREMOIS5 varchar(35),
@VAR_PSA_TRAVAILN1 char(3),
@VAR_PSA_TRAVAILN2 char(3),
@VAR_PSA_TRAVAILN3 char(3),
@VAR_PSA_TRAVAILN4 char(3),
@VAR_PSA_CODESTATISTQUE char(3),
@VAR_PSA_MOTIFENTREE char(3),
@VAR_PSA_INDICE char(3),
@VAR_PSA_NIVEAU char(3),
@VAR_PSA_PRISEFFECTIF char(1),
@VAR_PSA_UNITEPRISEFF numeric(19,4),
@VAR_PSA_REGIMESS char(3),
@VAR_PSA_DATELIBRE1 datetime,
@VAR_PSA_DATELIBRE2 datetime,
@VAR_PSA_DATELIBRE3 datetime,
@VAR_PSA_DATELIBRE4 datetime,
@VAR_GCB01 char(1),
@VAR_GCB02 char(1),
@VAR_GCB03 char(1),
@VAR_GCB04 char(1),
@VAR_GCB05 char(1),
@VAR_GCB06 char(1),
@VAR_GCB07 char(1),
@VAR_GCB08 char(1),
@VAR_CTA01_VALEUR_HRU char(35),
@VAR_CTA01_VALEUR_HRS char(35),
@VAR_CTA02_VALEUR_HRU char(35),
@VAR_CTA02_VALEUR_HRS char(35),
@VAR_PAR_BOITE1 char(35),
@VAR_PAR_BOITE2 char(35),
@VAR_PAR_BOITE3 char(35),
@VAR_PAR_BOITE4 char(35),
@VAR_PSA_BOLLIBRE1 char(1),
@VAR_PSA_BOLLIBRE2 char(1),
@VAR_PSA_BOLLIBRE3 char(1),
@VAR_PSA_BOLLIBRE4 char(1),
@VAR_PSA_LIBREPCMB1 char(3),
@VAR_PSA_LIBREPCMB2 char(3),
@VAR_PSA_LIBREPCMB3 char(3),
@VAR_PSA_LIBREPCMB4 char(3),
@VAR_PAR_CODESTAT char(35),
@VAR_PAR_TRAVAILN1 char(35),
@VAR_PAR_TRAVAILN2 char(35),
@VAR_PAR_TRAVAILN3 char(35),
@VAR_PAR_TRAVAILN4 char(35),
@VAR_PAR_LIBREN1 char(35),
@VAR_PAR_LIBREN2 char(35),
@VAR_PAR_LIBREN3 char(35),
@VAR_PAR_LIBREN4 char(35),
@VAR_PSA_ORDREAT char(1),
@VAR_PSA_CONDEMPLOI char(3),
@VAR_PSA_DADSPROF char(3),
@VAR_PSA_DADSCAT char(3),
@VAR_PSA_TAUXTEMPSPARTIEL varchar(255),
@VAR_TAUX_TEMPS_PARTIEL_SALARIE char(3),
@VAR_PSA_REGIMEMAL char(3),
@VAR_PSA_REGIMEVIP char(3),
@VAR_PSA_REGIMEAT char(3),
@VAR_PSA_TYPDSNFRAC char(3),
@VAR_PSA_DSNFRACTION char(1),
@VAR_PSA_TYPENATTAUXPAS char(3),
@VAR_PSA_NATURETAUXPAS char(3),
@VAR_PSA_CODEEMPLOI char(4),
@VAR_PSA_CONVENTION varchar(17),
@VAR_PSA_CONVENTION_TEMPORAIRE varchar(17),
@VAR_SOCIETE_LIGNE int,--société en cours
@VAR_SOCIETE_TOTAL int,--total des sociétés
@VAR_RAISON_SOCIALE varchar(255),
@VAR_NATURECONTROLE varchar(255),
@VAR_RESULTATCONTROLE varchar(255),
@VAR_COMMENTAIRE varchar(255),
@VAR_CEMP varchar(255),
@VAR_LIGNE_INDIVIDU int,--salarié en cours table individu
@VAR_CMATR varchar(35), --matricule en cours 
@VAR_TOTAL_INDIVIDUS int,--donne le nombre de salariés par sociétés
@VAR_CEMP_SALARIE varchar(35),--CEMP du salarié en cours
@VAR_STATUT_MIGRATION varchar(35),
@VAR_T_NATUREAUXILIAIRE char(3),
@VAR_T_LIBELE varchar(255),
@VAR_T_COLLECTIF varchar(255),
@VAR_T_ABREGE varchar(255),
@VAR_PSA_PAYSNAISSANCE_TEMP char(2),
@VAR_PSA_UNITETRAVAIL char(2),
@VAR_PSA_NATIONALITE_TEMP char(3),
@VAR_PSA_MOTIFSORTIE char(3),
@VAR_CCDEP_TEST char(3),
@VAR_PAR_PLE_PARTAGE char(1),
@VAR_PAR_TABLE_LIBRE_PARTAGE char(1);

SET @VAR_T_COLLECTIF='421000'
SET @VAR_T_NATUREAUXILIAIRE='SAL';

SET @VAR_SOCIETE_LIGNE=1;
SELECT @VAR_SOCIETE_TOTAL=COUNT(*) FROM EMPLOYEUR;--nombre de sociétés à traiter

SELECT @VAR_LIGNE_INDIVIDU=MIN(IND_LIGNE) FROM VENTILATION_INDIVIDUS;
SELECT @VAR_TOTAL_INDIVIDUS=MAX(IND_LIGNE) FROM VENTILATION_INDIVIDUS;

WHILE @VAR_SOCIETE_LIGNE<=@VAR_SOCIETE_TOTAL --Boucle par sociétés

BEGIN

SELECT @VAR_CEMP=Employeur FROM EMPLOYEUR WHERE SOCIETE_LIGNE=@VAR_SOCIETE_LIGNE;--récupération de l'employeur 
SELECT @VAR_PSA_SIREN=Siren FROM EMPLOYEUR WHERE SOCIETE_LIGNE=@VAR_SOCIETE_LIGNE;--récupération du SIREN de l'employeur

	WHILE @VAR_LIGNE_INDIVIDU<=@VAR_TOTAL_INDIVIDUS  --Boucle par salariés 
	
	BEGIN

	SELECT @VAR_CMATR=IND_MATRICULEHRU FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_LIGNE_INDIVIDU; --Récupération du matricule en cours
	SELECT @VAR_CEMP_SALARIE=IND_CEMP FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_LIGNE_INDIVIDU;--récupération de l'employeur du salarié
	SELECT @VAR_STATUT_MIGRATION=IND_STATUS FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_CEMP=@VAR_CEMP;--récupération du statut de la migration
	
	IF @VAR_STATUT_MIGRATION='Etape Salaries'
		
	BEGIN

		PRINT 'Société en cours '+@VAR_CEMP+' société '+CAST(@VAR_SOCIETE_LIGNE AS VARCHAR(255))+'/'+CAST(@VAR_SOCIETE_TOTAL AS VARCHAR(255))+' le salarié est déjà migré '+@VAR_CMATR+' ligne en cours'+CAST(@VAR_LIGNE_INDIVIDU AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_INDIVIDUS AS VARCHAR(255))

		SET @VAR_LIGNE_INDIVIDU=@VAR_LIGNE_INDIVIDU+1;


	END 

	ELSE --si le salarié n'est pas encore migré

	BEGIN
		
		IF @VAR_CEMP_SALARIE=@VAR_CEMP --Si le matricule est sur sur la société en cours alors on migre
		
			BEGIN

			UPDATE VENTILATION_INDIVIDUS SET IND_STATUS='En cours' WHERE IND_MATRICULEHRU=@VAR_CMATR;

			PRINT 'Société en cours '+@VAR_CEMP+' société '+CAST(@VAR_SOCIETE_LIGNE AS VARCHAR(255))+'/'+CAST(@VAR_SOCIETE_TOTAL AS VARCHAR(255))+' le salarié '+@VAR_CMATR+' est dans la société '+@VAR_CEMP_SALARIE+' traitement du salarié  '+CAST(@VAR_LIGNE_INDIVIDU AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_INDIVIDUS AS VARCHAR(255))
			SET @VAR_COMMENTAIRE='Société en cours '+@VAR_CEMP+' société '+CAST(@VAR_SOCIETE_LIGNE AS VARCHAR(255))+'/'+CAST(@VAR_SOCIETE_TOTAL AS VARCHAR(255))+' le salarié '+@VAR_CMATR+' est dans la société '+@VAR_CEMP_SALARIE+' traitement du salarié  '+CAST(@VAR_LIGNE_INDIVIDU AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_INDIVIDUS AS VARCHAR(255));
			
			INSERT INTO JOURNAL_DES_TRAITEMENTS  --Ajout du commentaire dans la table des traitements
			VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);

			SELECT @VAR_PSA_SALARIE=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_CEMP=@VAR_CEMP;--récupération du matricule sur la société en cours
			SELECT @VAR_PSA_NUMEROSS=CONCAT(NSECU,CSECU) FROM INDIVIDU WHERE MATRI=@VAR_CMATR; --récupération du numéro SS
			SELECT @VAR_PSA_PRENOM=LPNOM FROM INDIVIDU WHERE MATRI=@VAR_CMATR;--récupération du prénom
			SELECT TOP(1) @VAR_ETABLISSEMENT_SALARIE=CDETS FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DVCTR DESC; --récupération du code établissement HRU
			SELECT @VAR_PSA_ETABLISSEMENT=TRA_VALEURHRS FROM TRANSCO WHERE TRA_TYPE='Etablissement' AND TRA_VALEURHRU=@VAR_ETABLISSEMENT_SALARIE AND TRA_SIREN=@VAR_PSA_SIREN;--récupération code établissement HRS
			SELECT @VAR_PSA_ADRESSE1=LRUES FROM INDIVIDU WHERE MATRI=@VAR_CMATR; --récupération adresse 1
			SELECT @VAR_PSA_CODEPOSTAL=CPOST FROM INDIVIDU WHERE MATRI=@VAR_CMATR;--récupération du code postal
			SELECT @VAR_PSA_VILLE=LVILS FROM INDIVIDU WHERE MATRI=@VAR_CMATR;--récupération ville
			SET @VAR_PSA_PAYS='FRA';--Pays mot RHPI ADPY voir si besoin de transco
			SELECT @VAR_PSA_DATENAISSANCE=CAST(DNAIS AS datetime) FROM INDIVIDU WHERE MATRI=@VAR_CMATR;--récupération datetime de naissance
			SELECT @VAR_PSA_COMMUNENAISS=LNAIS FROM INDIVIDU WHERE MATRI=@VAR_CMATR;--récupération villet de naissance
			SELECT @VAR_PSA_DEPTNAISSANCE=RIGHT(LEFT(NSECU,7),2) FROM INDIVIDU WHERE MATRI=@VAR_CMATR;--récupération code postal de naissance dans le numéro SS
			SELECT @VAR_PSA_PAYSNAISSANCE_TEMP=PNAIS FROM INDIVIDU WHERE MATRI=@VAR_CMATR;--récupération pays de naissance
			IF @VAR_PSA_PAYSNAISSANCE_TEMP='FR'
			SET @VAR_PSA_PAYSNAISSANCE='FRA';
			ELSE 
			SET @VAR_PSA_PAYSNAISSANCE=@VAR_PSA_PAYSNAISSANCE_TEMP; 		
			
			SELECT @VAR_PSA_NATIONALITE_TEMP=LNATI FROM INDIVIDU WHERE MATRI=@VAR_CMATR;--récupération de la nationalité
			IF @VAR_PSA_NATIONALITE_TEMP='FR'
			SET @VAR_PSA_NATIONALITE='FRA';
			ELSE 
			SET @VAR_PSA_NATIONALITE=@VAR_PSA_NATIONALITE_TEMP;
			

			SELECT @VAR_SEXE_TRANSCO=CISEX FROM INDIVIDU WHERE MATRI=@VAR_CMATR; --code sexe HRU
			SELECT @VAR_PSA_SEXE=COR_VALEURHRS FROM CORRESPONDANCE_HRU_HRS WHERE COR_CHAMPHRU='CISEX' AND COR_VALEURHRU=@VAR_SEXE_TRANSCO;
			IF @VAR_PSA_SEXE='F'
				SELECT @VAR_PSA_NOMJF=NMFAM FROM INDIVIDU WHERE MATRI=@VAR_CMATR; --récupération du Nom de jeune fille
			ELSE
				SET @VAR_PSA_NOMJF='';
			SELECT @VAR_SITUATIONFAMIL=CSITF FROM INDIVIDU WHERE MATRI=@VAR_CMATR;--code situation familiale HRU
			IF @VAR_SITUATIONFAMIL='M'
				SET @VAR_PSA_SITUATIONFAMIL='MAR';--marié 
			IF @VAR_SITUATIONFAMIL='C'
				SET @VAR_PSA_SITUATIONFAMIL='CEL';--celibataire
			IF @VAR_SITUATIONFAMIL='D'
			SET @VAR_PSA_SITUATIONFAMIL='DIV';--divorcé
			IF @VAR_SITUATIONFAMIL=''
			SET @VAR_PSA_SITUATIONFAMIL='90';--situation inconnue
			SET @VAR_PSA_PRISEFFECTIF='X';
			SELECT @VAR_PSA_LIBELLE=NMUSA FROM INDIVIDU WHERE MATRI=@VAR_CMATR; --récupération du Nom d'usage
			IF @VAR_PSA_LIBELLE='' AND @VAR_PSA_SEXE='M'
			SELECT @VAR_PSA_LIBELLE=NMFAM FROM INDIVIDU WHERE MATRI=@VAR_CMATR; --récupération du Nom d'usage
			SELECT TOP(1) @VAR_PSA_DATEENTREE=CAST(DENTR AS datetime) FROM GENCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DENTR DESC;--récupération dernière datetime d'entrée
			SELECT TOP(1) @VAR_PSA_DATEANCIENNETE=CAST(DDANC AS datetime) FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DDANC DESC;--récupération dernière datetime d'ancienneté
			SELECT TOP(1) @VAR_PSA_DATESORTIE=CAST(DDEP AS datetime) FROM GENCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DDEP ASC;--récupération dernière datetime de sortie
			SELECT @VAR_PSA_CARTESEJOUR=ETCAS FROM PERMSEJOUR WHERE MATRI=@VAR_CMATR--récupération carte de séjour
			SELECT @VAR_PSA_DATEEXPIRSEJOUR=CAST(ETFCS AS datetime) FROM PERMSEJOUR WHERE MATRI=@VAR_CMATR --récupération datetime fin carte de séjour
			SELECT @VAR_PSA_DELIVRPAR=ETCCS FROM PERMSEJOUR WHERE MATRI=@VAR_CMATR--récupération autorité carte de séjour
			SELECT @VAR_PSA_PERSACHARGE=COUNT(*) FROM ENFANTS WHERE MATRI=@VAR_CMATR; --récupération du nombre d'enfant
			SELECT @VAR_HRU_MODE_REGLE=MPAM1 FROM INDIVIDU WHERE MATRI=@VAR_CMATR; --récupération mode réglement HRU
			IF @VAR_HRU_MODE_REGLE='4'
			SET @VAR_PSA_MODEREGLE='VIR';
			IF @VAR_HRU_MODE_REGLE='5'
			SET @VAR_PSA_MODEREGLE='CHQ';
			SELECT TOP(1) @VAR_PSA_CONVENTION_TEMPORAIRE=RIGHT(CDCCN,4) FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DVCTR DESC;
			SELECT  @VAR_PSA_CONVENTION=PCV_CONVENTION FROM HR_SPRINT_CONVENTIONCOLL WHERE PCV_IDCC=@VAR_PSA_CONVENTION_TEMPORAIRE;
			SELECT TOP(1) @VAR_PSA_CODEEMPLOI=CINEM FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DVCTR DESC;
			SELECT @VAR_PSA_AUXILIAIRE=IND_AUXILIAIRE FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_SIREN=@VAR_PSA_SIREN; --récupération du code auxiliaire
			SELECT @VAR_PSA_PORTABLE=NTEL2 FROM INDIVIDU WHERE MATRI=@VAR_CMATR--récupération du portable
			SELECT @VAR_PSA_TELEPHONE=NTEL1 FROM INDIVIDU WHERE MATRI=@VAR_CMATR--récupération du fixe
			SELECT TOP(1)@VAR_PSA_COEFFICIENT=COFFI FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR ORDER BY DVCTR DESC;--récupération coefficient HRU
			SELECT TOP(1)@VAR_PSA_QUALIFICATION=QUALI FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR ORDER BY DVCTR DESC;--récupération qualication HRU
			SELECT TOP(1)@VAR_PSA_NIVEAU=NIVEA FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR ORDER BY DVCTR DESC;--récupération du niveau HRU
			SELECT TOP(1)@VAR_LIBELLE_EMPLOI_SALARIE=LQUAL FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR ORDER BY DVCTR DESC;--récupération libellé emploi HRU
			SELECT @VAR_PAR_PLE_PARTAGE=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='Partage PLE';
			IF @VAR_PAR_PLE_PARTAGE='X'--si on partage les libellés d'emploi
			BEGIN
					SELECT @VAR_PSA_LIBELLEEMPLOI=TRA_VALEURHRS FROM TRANSCO WHERE TRA_VALEURHRU=@VAR_LIBELLE_EMPLOI_SALARIE AND TRA_TYPE='Emploi' AND TRA_SIREN='999999999';--récupération libellé emploi transco 
			END

			ELSE
			BEGIN
				SELECT @VAR_PSA_LIBELLEEMPLOI=TRA_VALEURHRS FROM TRANSCO WHERE TRA_VALEURHRU=@VAR_LIBELLE_EMPLOI_SALARIE AND TRA_TYPE='Emploi' AND TRA_SIREN=@VAR_PSA_SIREN;--récupération libellé emploi transco 
			END
			SELECT TOP(1) @VAR_PSA_HORAIREMOIS=QHMOI FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DVCTR DESC;--récupération horaire mois
			
			IF @VAR_PSA_HORAIREMOIS='151,67'--si le salarié est à temps plein

			BEGIN
				SET @VAR_PSA_HORHEBDO='35';
			END
			ELSE --si le salarié est à temps partiel
			BEGIN

			SET @VAR_PSA_HORHEBDO='0';

			END

			IF @VAR_SEXE_TRANSCO='01'--Gestion de la civilité
			BEGIN
				SET @VAR_PSA_CIVILITE='MR';
			END
			ELSE
			BEGIN
				SET @VAR_PSA_CIVILITE='MME';
			END
			SET @VAR_PSA_CONGESPAYES='X';
			SELECT TOP(1) @VAR_PSA_SALAIREMOIS1=CAST(MSM AS varchar(35)) FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR ORDER BY DVCTR DESC;--récupération du salaire
			SET @VAR_PSA_SALAIREMOIS2='';
			SET @VAR_PSA_SALAIREMOIS3='';
			SET @VAR_PSA_SALAIREMOIS4='';		   
					   
			--SELECT TOP(1) @VAR_PSA_SALAIREMOIS2=CAST(MSM AS varchar(35)) FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR ORDER BY DVCTR DESC;--récupération du salaire
			--SELECT TOP(1) @VAR_PSA_SALAIREMOIS3=CAST(MSM AS varchar(35)) FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR ORDER BY DVCTR DESC;--récupération du salaire
			--SELECT TOP(1) @VAR_PSA_SALAIREMOIS4=CAST(MSM AS varchar(35)) FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR ORDER BY DVCTR DESC;--récupération du salaire
			--SELECT TOP(1) @VAR_PSA_SALAIREMOIS5=CAST(MSM AS varchar(35)) FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR ORDER BY DVCTR DESC;--récupération du salaire
			SELECT @VAR_PAR_CODESTAT=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='CODESTAT';
			SELECT @VAR_PAR_TRAVAILN1=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='TABLETRAVAILN1';
			SELECT @VAR_PAR_TABLE_LIBRE_PARTAGE=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='Partage Table libre';
			--récupération de la valeur CTA01
			IF @VAR_PAR_TABLE_LIBRE_PARTAGE='X'--si on partage les tables libres
			BEGIN
				SELECT @VAR_CTA01_VALEUR_HRU=CTA01 FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DVCTR DESC;
				SELECT @VAR_CTA01_VALEUR_HRS=TRA_VALEURHRS FROM TRANSCO WHERE TRA_TYPE='CTA01' AND TRA_SIREN='999999999' AND TRA_VALEURHRU=@VAR_CTA01_VALEUR_HRU;
				--récupération de la valeur CTA02
			
				SELECT @VAR_CTA02_VALEUR_HRU=CTA02 FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DVCTR DESC;
				SELECT @VAR_CTA02_VALEUR_HRS=TRA_VALEURHRS FROM TRANSCO WHERE TRA_TYPE='CTA02' AND TRA_SIREN='999999999' AND TRA_VALEURHRU=@VAR_CTA02_VALEUR_HRU;		
			END
			ELSE--si on ne partage pas

			BEGIN
				SELECT @VAR_CTA01_VALEUR_HRU=CTA01 FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DVCTR DESC;
				SELECT @VAR_CTA01_VALEUR_HRS=TRA_VALEURHRS FROM TRANSCO WHERE TRA_TYPE='CTA01' AND TRA_SIREN=@VAR_PSA_SIREN AND TRA_VALEURHRU=@VAR_CTA01_VALEUR_HRU;
				--récupération de la valeur CTA02
			
				SELECT @VAR_CTA02_VALEUR_HRU=CTA02 FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DVCTR DESC;
				SELECT @VAR_CTA02_VALEUR_HRS=TRA_VALEURHRS FROM TRANSCO WHERE TRA_TYPE='CTA02' AND TRA_SIREN=@VAR_PSA_SIREN AND TRA_VALEURHRU=@VAR_CTA02_VALEUR_HRU

			END
			
			IF @VAR_PAR_CODESTAT='CTA01'
			
			BEGIN
				SET @VAR_PSA_CODESTATISTQUE=@VAR_CTA01_VALEUR_HRS;
			END

			IF @VAR_PAR_TRAVAILN1='CTA02'
			BEGIN
				SET @VAR_PSA_TRAVAILN1=@VAR_CTA02_VALEUR_HRS;
			END

			SET @VAR_PSA_DATELIBRE1=01/01/1900;
			SET @VAR_PSA_DATELIBRE2=01/01/1900;
			SET @VAR_PSA_DATELIBRE3=01/01/1900;
			SET @VAR_PSA_DATELIBRE4=01/01/1900;

			--Gestion des boites à cocher


			UPDATE GENCONTRAT SET GCB01='X' WHERE GCB01='O';
			UPDATE GENCONTRAT SET GCB01='-' WHERE GCB01='';
			UPDATE GENCONTRAT SET GCB02='X' WHERE GCB02='O';
			UPDATE GENCONTRAT SET GCB02='-' WHERE GCB02='';
			UPDATE GENCONTRAT SET GCB03='X' WHERE GCB03='O';
			UPDATE GENCONTRAT SET GCB03='-' WHERE GCB03='';
			UPDATE GENCONTRAT SET GCB04='X' WHERE GCB04='O';
			UPDATE GENCONTRAT SET GCB04='-' WHERE GCB04='';
			UPDATE GENCONTRAT SET GCB05='X' WHERE GCB05='O';
			UPDATE GENCONTRAT SET GCB05='-' WHERE GCB05='';
			UPDATE GENCONTRAT SET GCB06='X' WHERE GCB06='O';
			UPDATE GENCONTRAT SET GCB06='-' WHERE GCB06='';
			UPDATE GENCONTRAT SET GCB07='X' WHERE GCB07='O';
			UPDATE GENCONTRAT SET GCB07='-' WHERE GCB07='';
			UPDATE GENCONTRAT SET GCB08='X' WHERE GCB08='O';
			UPDATE GENCONTRAT SET GCB08='-' WHERE GCB08='';

			SELECT TOP(1) @VAR_GCB01=GCB01 FROM GENCONTRAT WHERE MATRI=@VAR_CMATR ORDER BY DENTR DESC;
			SELECT TOP(1) @VAR_GCB02=GCB02 FROM GENCONTRAT WHERE MATRI=@VAR_CMATR ORDER BY DENTR DESC;
			SELECT TOP(1) @VAR_GCB04=GCB04 FROM GENCONTRAT WHERE MATRI=@VAR_CMATR ORDER BY DENTR DESC;
			SELECT TOP(1) @VAR_GCB05=GCB05 FROM GENCONTRAT WHERE MATRI=@VAR_CMATR ORDER BY DENTR DESC;
			SELECT TOP(1) @VAR_GCB06=GCB06 FROM GENCONTRAT WHERE MATRI=@VAR_CMATR ORDER BY DENTR DESC;
			SELECT TOP(1) @VAR_GCB07=GCB07 FROM GENCONTRAT WHERE MATRI=@VAR_CMATR ORDER BY DENTR DESC;
			SELECT TOP(1) @VAR_GCB08=GCB08 FROM GENCONTRAT WHERE MATRI=@VAR_CMATR ORDER BY DENTR DESC;

			
			SELECT @VAR_PAR_BOITE1=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='Boite à cocher 1';
			SELECT @VAR_PAR_BOITE2=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='Boite à cocher 2';
			SELECT @VAR_PAR_BOITE3=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='Boite à cocher 3';
			SELECT @VAR_PAR_BOITE4=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='Boite à cocher 4';

			--revoir syntaxe pour faire un CASE --https://docs.microsoft.com/fr-fr/sql/t-sql/language-elements/case-transact-sql?view=sql-server-ver15

			--boite à cocher 1
			
			IF @VAR_PAR_BOITE1='GCB01'
			BEGIN
				SET @VAR_PSA_BOLLIBRE1=@VAR_GCB01;
			END
			IF @VAR_PAR_BOITE1='GCB02'
			BEGIN
				SET @VAR_PSA_BOLLIBRE1=@VAR_GCB02;
			END
			IF @VAR_PAR_BOITE1='GCB03'
			BEGIN
				SET @VAR_PSA_BOLLIBRE1=@VAR_GCB03;
			END
			IF @VAR_PAR_BOITE1='GCB04'
			BEGIN
				SET @VAR_PSA_BOLLIBRE1=@VAR_GCB04;
			END
				IF @VAR_PAR_BOITE1='GCB05'
			BEGIN
				SET @VAR_PSA_BOLLIBRE1=@VAR_GCB05;
			END
				IF @VAR_PAR_BOITE1='GCB06'
			BEGIN
			SET @VAR_PSA_BOLLIBRE1=@VAR_GCB05;
			END
			IF @VAR_PAR_BOITE1='GCB07'
			BEGIN
			SET @VAR_PSA_BOLLIBRE1=@VAR_GCB07;
			END
			IF @VAR_PAR_BOITE1='GCB08'
			BEGIN
			SET @VAR_PSA_BOLLIBRE1=@VAR_GCB08;
			END
			--Boite à coher 2
			IF @VAR_PAR_BOITE2='GCB01'
			BEGIN
			SET @VAR_PSA_BOLLIBRE2=@VAR_GCB01;
			END
			IF @VAR_PAR_BOITE2='GCB02'
			BEGIN
			SET @VAR_PSA_BOLLIBRE2=@VAR_GCB02;
			END
			IF @VAR_PAR_BOITE2='GCB03'
			BEGIN
			SET @VAR_PSA_BOLLIBRE2=@VAR_GCB03;
			END
			IF @VAR_PAR_BOITE2='GCB04'
			BEGIN
			SET @VAR_PSA_BOLLIBRE2=@VAR_GCB04;
			END
			IF @VAR_PAR_BOITE2='GCB05'
			BEGIN
			SET @VAR_PSA_BOLLIBRE2=@VAR_GCB05;
			END
			IF @VAR_PAR_BOITE2='GCB06'
			BEGIN
			SET @VAR_PSA_BOLLIBRE2=@VAR_GCB05;
			END
			IF @VAR_PAR_BOITE2='GCB07'
			BEGIN
			SET @VAR_PAR_BOITE2=@VAR_GCB07;
			END
			IF @VAR_PAR_BOITE2='GCB08'
			BEGIN
			SET @VAR_PSA_BOLLIBRE2=@VAR_GCB08;
			END

			--Boite à coher 3
			IF @VAR_PAR_BOITE3='GCB01'
			BEGIN
			SET @VAR_PSA_BOLLIBRE3=@VAR_GCB01;
			END
			IF @VAR_PAR_BOITE3='GCB02'
			BEGIN
			SET @VAR_PSA_BOLLIBRE3=@VAR_GCB02;
			END
			IF @VAR_PAR_BOITE3='GCB03'
			BEGIN
			SET @VAR_PSA_BOLLIBRE3=@VAR_GCB03;
			END
			IF @VAR_PAR_BOITE3='GCB04'
			BEGIN
			SET @VAR_PSA_BOLLIBRE3=@VAR_GCB04;
			END
			IF @VAR_PAR_BOITE3='GCB05'
			BEGIN
			SET @VAR_PSA_BOLLIBRE3=@VAR_GCB05;
			END
			IF @VAR_PAR_BOITE3='GCB06'
			BEGIN
			SET @VAR_PSA_BOLLIBRE3=@VAR_GCB05;
			END
			IF @VAR_PAR_BOITE3='GCB07'
			BEGIN
			SET @VAR_PSA_BOLLIBRE3=@VAR_GCB07;
			END
			IF @VAR_PAR_BOITE3='GCB08'
			BEGIN
			SET @VAR_PSA_BOLLIBRE3=@VAR_GCB08;
			END

			--Boite à coher 4
			IF @VAR_PAR_BOITE4='GCB01'
			BEGIN
			SET @VAR_PSA_BOLLIBRE4=@VAR_GCB01;
			END
			IF @VAR_PAR_BOITE4='GCB02'
			BEGIN
			SET @VAR_PSA_BOLLIBRE4=@VAR_GCB02;
			END
			IF @VAR_PAR_BOITE4='GCB03'
			BEGIN
			SET @VAR_PSA_BOLLIBRE4=@VAR_GCB03;
			END
			IF @VAR_PAR_BOITE4='GCB04'
			BEGIN
			SET @VAR_PSA_BOLLIBRE4=@VAR_GCB04;
			END
			IF @VAR_PAR_BOITE4='GCB05'
			BEGIN
			SET @VAR_PSA_BOLLIBRE4=@VAR_GCB05;
			END
			IF @VAR_PAR_BOITE4='GCB06'
			BEGIN
			SET @VAR_PSA_BOLLIBRE4=@VAR_GCB05;
			END
			IF @VAR_PAR_BOITE4='GCB07'
			BEGIN
			SET @VAR_PSA_BOLLIBRE4=@VAR_GCB07;
			END
			IF @VAR_PAR_BOITE4='GCB08'
			BEGIN
			SET @VAR_PSA_BOLLIBRE4=@VAR_GCB08;
			END

			SET @VAR_PSA_ORDREAT='1';
			SELECT TOP(1) @VAR_PSA_REGIMEMAL=RGBAS FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DVCTR DESC;--régime SS de base
			SELECT TOP(1) @VAR_PSA_REGIMESS=RGBAS FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DVCTR DESC;--régime SS de base
			SELECT TOP(1) @VAR_PSA_REGIMEAT=RGBAS FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DVCTR DESC;--régime SS de base
			SELECT TOP(1) @VAR_PSA_REGIMEVIP=RGBAS FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DVCTR DESC;--régime SS de base
			SET @VAR_PSA_TYPDSNFRAC='ETB'
			SET @VAR_PSA_DSNFRACTION='1'; 
			SET @VAR_PSA_TYPENATTAUXPAS='ETB';
			SET @VAR_PSA_NATURETAUXPAS='13';
			SELECT TOP(1) @VAR_TAUX_TEMPS_PARTIEL_SALARIE=APTAC FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DVCTR DESC;--taux temps partiel
			IF @VAR_TAUX_TEMPS_PARTIEL_SALARIE='100'
			BEGIN
				SET @VAR_PSA_TAUXTEMPSPARTIEL='';
				SET @VAR_PSA_CONDEMPLOI='C';
			END
			ELSE
			BEGIN
				SET @VAR_PSA_TAUXTEMPSPARTIEL=@VAR_TAUX_TEMPS_PARTIEL_SALARIE;
				SET @VAR_PSA_CONDEMPLOI='P';
			END
			SELECT  @VAR_PSA_DADSCAT=CCATS FROM VALIDCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DVCTR DESC;
			IF @VAR_PSA_DADSCAT='1'
			SET @VAR_PSA_DADSCAT='01';
			ELSE
			SET @VAR_PSA_DADSCAT='04';
			IF @VAR_PSA_DADSCAT='01'
			SET @VAR_PSA_DADSPROF='29';
			ELSE 
			SET @VAR_PSA_DADSPROF='02';
			SET @VAR_PSA_UNITEPRISEFF=1;
			SET @VAR_PSA_UNITETRAVAIL='07';
			SET @VAR_PSA_MOTIFENTREE='001';
			
			SELECT @VAR_CCDEP_TEST=CCDEP FROM GENCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DENTR DESC; 
			
			IF LEN(@VAR_CCDEP_TEST)=3

			SELECT @VAR_PSA_MOTIFSORTIE=CCDEP FROM GENCONTRAT WHERE MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP ORDER BY DENTR DESC; 
			
			ELSE

			SET @VAR_PSA_MOTIFSORTIE='';

			INSERT INTO HR_SPRINT_SALARIES
			VALUES (@VAR_PSA_SIREN,@VAR_PSA_SALARIE,@VAR_PSA_NUMEROSS,@VAR_PSA_LIBELLE,@VAR_PSA_NOMJF,@VAR_PSA_PRENOM,@VAR_PSA_ETABLISSEMENT,@VAR_PSA_ADRESSE1,@VAR_PSA_CODEPOSTAL,
			@VAR_PSA_VILLE,@VAR_PSA_PAYS,@VAR_PSA_DATENAISSANCE,@VAR_PSA_COMMUNENAISS,@VAR_PSA_DEPTNAISSANCE,@VAR_PSA_PAYSNAISSANCE,@VAR_PSA_NATIONALITE,
			@VAR_PSA_SEXE,@VAR_PSA_SITUATIONFAMIL,@VAR_PSA_DATEENTREE,@VAR_PSA_DATEANCIENNETE,@VAR_PSA_DATESORTIE,@VAR_PSA_CARTESEJOUR,@VAR_PSA_DATEEXPIRSEJOUR,
			@VAR_PSA_DELIVRPAR,@VAR_PSA_PERSACHARGE,@VAR_PSA_MODEREGLE,@VAR_PSA_AUXILIAIRE,@VAR_PSA_TELEPHONE,@VAR_PSA_PORTABLE,@VAR_PSA_COEFFICIENT,
			@VAR_PSA_QUALIFICATION,@VAR_PSA_CONDEEMPLOI,@VAR_PSA_LIBELLEEMPLOI,@VAR_PSA_CODEEMPLOI,@VAR_PSA_CONVENTION,@VAR_PSA_HORAIREMOIS,@VAR_PSA_CIVILITE,@VAR_PSA_CONGESPAYES,@VAR_PSA_SALAIREMOIS1,@VAR_PSA_SALAIREMOIS2,
			@VAR_PSA_SALAIREMOIS3,@VAR_PSA_SALAIREMOIS4,@VAR_PSA_SALAIREMOIS5,@VAR_PSA_TRAVAILN1,@VAR_PSA_TRAVAILN2,@VAR_PSA_TRAVAILN3,@VAR_PSA_TRAVAILN4,
			@VAR_PSA_CODESTATISTQUE,@VAR_PSA_MOTIFENTREE,@VAR_PSA_INDICE,@VAR_PSA_NIVEAU,@VAR_PSA_PRISEFFECTIF,@VAR_PSA_UNITEPRISEFF,@VAR_PSA_REGIMESS,
			@VAR_PSA_DATELIBRE1,@VAR_PSA_DATELIBRE2,@VAR_PSA_DATELIBRE3,@VAR_PSA_DATELIBRE4,
			@VAR_PSA_BOLLIBRE1,@VAR_PSA_BOLLIBRE2,@VAR_PSA_BOLLIBRE3,@VAR_PSA_BOLLIBRE4,
			@VAR_PSA_LIBREPCMB1,@VAR_PSA_LIBREPCMB2,@VAR_PSA_LIBREPCMB3,@VAR_PSA_LIBREPCMB4,
			@VAR_PSA_ORDREAT,@VAR_PSA_CONDEMPLOI,@VAR_PSA_DADSPROF,@VAR_PSA_DADSCAT,@VAR_PSA_TAUXTEMPSPARTIEL,
			@VAR_PSA_REGIMEMAL,@VAR_PSA_REGIMEVIP,@VAR_PSA_REGIMEAT,@VAR_PSA_TYPDSNFRAC,@VAR_PSA_DSNFRACTION,@VAR_PSA_TYPENATTAUXPAS,@VAR_PSA_NATURETAUXPAS,@VAR_PSA_UNITETRAVAIL,@VAR_PSA_MOTIFSORTIE,@VAR_PSA_HORHEBDO);

			UPDATE VENTILATION_INDIVIDUS SET IND_STATUS='Etape Salaries', IND_REPRISE_HR_SPRINT_SALARIE='X' WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_CEMP=@VAR_CEMP; --mise à jour du statuts
			
			--alimentation de la table des TIERS

			SET @VAR_T_LIBELE=CONCAT(@VAR_PSA_LIBELLE,' ',@VAR_PSA_PRENOM);
			SET @VAR_T_ABREGE=@VAR_T_LIBELE;

			INSERT INTO HR_SPRINT_TIERS
			VALUES(@VAR_PSA_SIREN,@VAR_PSA_AUXILIAIRE,@VAR_T_NATUREAUXILIAIRE,@VAR_T_LIBELE,@VAR_T_COLLECTIF,@VAR_T_ABREGE,@VAR_PSA_ADRESSE1,
			@VAR_PSA_CODEPOSTAL,@VAR_PSA_VILLE);


			END

		ELSE--Si il n'est pas dans la société en cours

			BEGIN

			PRINT 'Société en cours '+@VAR_CEMP+' le salarié '+@VAR_CMATR+' est dans la société '+@VAR_CEMP_SALARIE+' passage au salarié suivant '+CAST(@VAR_LIGNE_INDIVIDU AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_INDIVIDUS AS VARCHAR(255))
			SET @VAR_COMMENTAIRE='Société en cours '+@VAR_CEMP+' le salarié '+@VAR_CMATR+' est dans la société '+@VAR_CEMP_SALARIE+' passage au salarié suivant '+CAST(@VAR_LIGNE_INDIVIDU AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_INDIVIDUS AS VARCHAR(255));
			
			INSERT INTO JOURNAL_DES_TRAITEMENTS  --Ajout du commentaire dans la table des traitements
			VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);

		
			END

	SET @VAR_LIGNE_INDIVIDU=@VAR_LIGNE_INDIVIDU+1;
	
	--RAZ des valeurs
	SET @VAR_PSA_SALARIE ='';
	SET @VAR_PSA_NUMEROSS='';
	SET @VAR_PSA_LIBELLE='';
	SET @VAR_PSA_NOMJF='';
	SET @VAR_PSA_PRENOM ='';
	SET @VAR_PSA_ETABLISSEMENT='';
	SET @VAR_ETABLISSEMENT_SALARIE='';
	SET @VAR_PSA_ADRESSE1='';
	SET @VAR_PSA_CODEPOSTAL='';
	SET @VAR_PSA_VILLE='';
	SET @VAR_PSA_PAYS='';
	SET @VAR_PSA_DATENAISSANCE='';
	SET @VAR_PSA_COMMUNENAISS='';
	SET @VAR_PSA_DEPTNAISSANCE='';
	SET @VAR_PSA_PAYSNAISSANCE='';
	SET @VAR_PSA_NATIONALITE='';
	SET @VAR_PSA_SEXE ='';
	SET @VAR_SEXE_TRANSCO='';
	SET @VAR_PSA_SITUATIONFAMIL='';
	SET @VAR_SITUATIONFAMIL=''
	SET @VAR_PSA_DATEENTREE=01/01/1900;
	SET @VAR_PSA_DATEANCIENNETE=01/01/1900;
	SET @VAR_PSA_DATESORTIE=01/01/1900;
	SET @VAR_PSA_CARTESEJOUR='';
	SET @VAR_PSA_DATEEXPIRSEJOUR=01/01/1900;
	SET @VAR_PSA_DELIVRPAR='';
	SET @VAR_PSA_PERSACHARGE=0;
	SET @VAR_PSA_MODEREGLE='';
	SET @VAR_HRU_MODE_REGLE='';
	SET @VAR_PSA_AUXILIAIRE ='';
	SET @VAR_PSA_TELEPHONE='';
	SET @VAR_PSA_PORTABLE='';
	SET @VAR_PSA_COEFFICIENT='';
	SET @VAR_COEFFICIENT_SALARIE='';
	SET @VAR_PSA_QUALIFICATION='';
	SET @VAR_QUALIFICATION_SALARIE='';
	SET @VAR_PSA_CONDEEMPLOI='';
	SET @VAR_PSA_LIBELLEEMPLOI='';
	SET @VAR_LIBELLE_EMPLOI_SALARIE='';
	SET @VAR_PSA_HORAIREMOIS='';
	SET @VAR_PSA_CIVILITE='';
	SET @VAR_PSA_CONGESPAYES='';
	SET @VAR_PSA_SALAIREMOIS1='';
	SET @VAR_PSA_SALAIREMOIS2='';
	SET @VAR_PSA_SALAIREMOIS3='';
	SET @VAR_PSA_SALAIREMOIS4='';
	SET @VAR_PSA_SALAIREMOIS5='';
	SET @VAR_PSA_TRAVAILN1='';
	SET @VAR_PSA_TRAVAILN2='';
	SET @VAR_PSA_TRAVAILN3='';
	SET @VAR_PSA_TRAVAILN4='';
	SET @VAR_PSA_CODESTATISTQUE='';
	SET @VAR_PSA_MOTIFENTREE='';
	SET @VAR_PSA_INDICE='';
	SET @VAR_PSA_NIVEAU='';
	SET @VAR_PSA_PRISEFFECTIF='';
	SET @VAR_PSA_REGIMESS='';
	SET @VAR_PSA_DATELIBRE1=01/01/1900;
	SET @VAR_PSA_DATELIBRE2=1900;
	SET @VAR_PSA_DATELIBRE3=1900;
	SET @VAR_PSA_DATELIBRE4=1900;
	SET @VAR_PSA_BOLLIBRE1='';
	SET @VAR_PSA_BOLLIBRE2='';
	SET @VAR_PSA_BOLLIBRE3='';
	SET @VAR_PSA_BOLLIBRE4='';
	SET @VAR_PSA_LIBREPCMB1='';
	SET @VAR_PSA_LIBREPCMB2='';
	SET @VAR_PSA_LIBREPCMB3='';
	SET @VAR_PSA_LIBREPCMB4='';
	SET @VAR_PSA_ORDREAT='';
	SET @VAR_PSA_CONDEMPLOI='';
	SET @VAR_PSA_DADSPROF='';
	SET @VAR_PSA_DADSCAT='';
	SET @VAR_PSA_TAUXTEMPSPARTIEL='';
	SET @VAR_PSA_REGIMEMAL='';
	SET @VAR_PSA_REGIMEVIP='';
	SET @VAR_PSA_REGIMEAT='';
	SET @VAR_PSA_DSNFRACTION='';
	SET @VAR_PSA_TYPENATTAUXPAS='';
	SET @VAR_PSA_NATURETAUXPAS='';
	
	END
END
SET @VAR_SOCIETE_LIGNE=@VAR_SOCIETE_LIGNE+1;--passage à la société suivante
SELECT @VAR_LIGNE_INDIVIDU=MIN(IND_LIGNE) FROM VENTILATION_INDIVIDUS;
--RAZ du compteur salarié pour recommencer

END

GO

--ajustement sur les noms

UPDATE HR_SPRINT_SALARIES SET PSA_NOMJF='' WHERE PSA_CIVILITE='MR' AND PSA_NOMJF<>'';
UPDATE HR_SPRINT_SALARIES SET PSA_LIBELLE=PSA_NOMJF WHERE PSA_SEXE='F' and PSA_LIBELLE='';

GO

--Reprise DEPORTSAL

DECLARE

@VAR_PSE_SIREN varchar(35),
@VAR_LIGNE_EMAIL int,
@VAR_SOCIETE_TOTAL int,
@VAR_SOCIETE_LIGNE int,
@VAR_TOTAL_EMAIL int,
@VAR_CEMP varchar(35),
@VAR_CMATR varchar(35),
@VAR_STATUT_MIGRATION varchar(35),
@VAR_PSE_EMAILPROF varchar(35),
@VAR_CEMP_SALARIE varchar(35),
@VAR_PSE_SALARIE varchar(35),
@VAR_NATURECONTROLE varchar(255),
@VAR_RESULTATCONTROLE varchar(255),
@VAR_COMMENTAIRE varchar(255);

SET @VAR_LIGNE_EMAIL=1;
SET @VAR_SOCIETE_LIGNE=1;
SELECT @VAR_SOCIETE_TOTAL=COUNT(*) FROM EMPLOYEUR;--nombre de sociétés à traiter
SELECT @VAR_TOTAL_EMAIL=COUNT(*) FROM EMAIL;

WHILE @VAR_SOCIETE_LIGNE<=@VAR_SOCIETE_TOTAL --Boucle par sociétés

BEGIN

SELECT @VAR_CEMP=Employeur FROM EMPLOYEUR WHERE SOCIETE_LIGNE=@VAR_SOCIETE_LIGNE;--récupération de l'employeur 
SELECT @VAR_PSE_SIREN=Siren FROM EMPLOYEUR WHERE SOCIETE_LIGNE=@VAR_SOCIETE_LIGNE;--récupération du SIREN de l'employeur

	WHILE @VAR_LIGNE_EMAIL<=@VAR_TOTAL_EMAIL  --Boucle par salariés 
	
	BEGIN

	SELECT @VAR_CMATR=MATRI FROM EMAIL WHERE EMAIL_LIGNE=@VAR_LIGNE_EMAIL; --Récupération du matricule en cours
	SELECT @VAR_CEMP_SALARIE=IND_CEMP FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR;--récupération de l'employeur du salarié
	SELECT @VAR_STATUT_MIGRATION=IND_STATUS FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR;--récupération du statut de la migration

	IF @VAR_CEMP_SALARIE=@VAR_CEMP --si le salarié est dans la société en cours

		BEGIN

					
			PRINT 'Société en cours '+@VAR_CEMP+' société '+CAST(@VAR_SOCIETE_LIGNE AS VARCHAR(255))+'/'+CAST(@VAR_SOCIETE_TOTAL AS VARCHAR(255))+' le salarié '+@VAR_CMATR+' est dans la société '+@VAR_CEMP_SALARIE+' traitement du salarié  '+CAST(@VAR_LIGNE_EMAIL AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_EMAIL AS VARCHAR(255))
			SET @VAR_COMMENTAIRE='Société en cours '+@VAR_CEMP+' société '+CAST(@VAR_SOCIETE_LIGNE AS VARCHAR(255))+'/'+CAST(@VAR_SOCIETE_TOTAL AS VARCHAR(255))+' le salarié '+@VAR_CMATR+' est dans la société '+@VAR_CEMP_SALARIE+' traitement du salarié  '+CAST(@VAR_LIGNE_EMAIL AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_EMAIL AS VARCHAR(255));
				
			INSERT INTO JOURNAL_DES_TRAITEMENTS  --Ajout du commentaire dans la table des traitements
			VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);

			SELECT @VAR_PSE_EMAILPROF=EMAIL FROM EMAIL WHERE EMAIL_LIGNE=@VAR_LIGNE_EMAIL;--récpération de l'émail salarié

			SELECT @VAR_PSE_SALARIE=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR;--récupération du matricule 

			INSERT INTO HR_SPRINT_DEPORTSAL
			VALUES (@VAR_PSE_SIREN,@VAR_PSE_SALARIE,@VAR_PSE_EMAILPROF);
			
			UPDATE VENTILATION_INDIVIDUS SET IND_STATUS='Etape DEPORTSAL', IND_REPRISE_HR_SPRINT_DEPORTSAL='X' WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_CEMP=@VAR_CEMP; --mise à jour du statuts


			SET @VAR_PSE_EMAILPROF='';
			SET @VAR_PSE_EMAILPROF='';
			SET @VAR_LIGNE_EMAIL=@VAR_LIGNE_EMAIL+1;

		END

	ELSE--si le salarié n'est pas dans la société en cours

	BEGIN

		
	PRINT 'Société en cours '+@VAR_CEMP+' le salarié '+@VAR_CMATR+' est dans la société '+@VAR_CEMP_SALARIE+' passage au salarié suivant '+CAST(@VAR_LIGNE_EMAIL AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_EMAIL AS VARCHAR(255))
	SET @VAR_COMMENTAIRE='Société en cours '+@VAR_CEMP+' le salarié '+@VAR_CMATR+' est dans la société '+@VAR_CEMP_SALARIE+' passage au salarié suivant '+CAST(@VAR_LIGNE_EMAIL AS VARCHAR(255))+'/'+CAST(@VAR_TOTAL_EMAIL AS VARCHAR(255));
			
	INSERT INTO JOURNAL_DES_TRAITEMENTS  --Ajout du commentaire dans la table des traitements
	VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);
	SET @VAR_LIGNE_EMAIL=@VAR_LIGNE_EMAIL+1;

	END

	END

SET @VAR_SOCIETE_LIGNE=@VAR_SOCIETE_LIGNE+1;--passage à la société suivante
SET @VAR_LIGNE_EMAIL=1;--RAZ email


END

GO

--SALARIECOMPL

DECLARE

@VAR_PSZ_SIREN varchar(35),
@VAR_PSZ_SALARIE varchar(10),
@VAR_PSZ_DIGITALIDENT varchar(50),
@VAR_IND_MATRICULEHRU varchar(10),
@VAR_INDIVIDU_LIGNE_EN_COURS int,
@VAR_TOTAL_INDIVIDUS int;

SELECT @VAR_INDIVIDU_LIGNE_EN_COURS=MIN(IND_LIGNE) FROM VENTILATION_INDIVIDUS;
SELECT @VAR_TOTAL_INDIVIDUS=MAX(IND_LIGNE) FROM VENTILATION_INDIVIDUS;

WHILE @VAR_INDIVIDU_LIGNE_EN_COURS<=@VAR_TOTAL_INDIVIDUS

BEGIN

SELECT @VAR_PSZ_SIREN=IND_SIREN FROM VENTILATION_INDIVIDUS WHERE @VAR_INDIVIDU_LIGNE_EN_COURS=IND_LIGNE;
SELECT @VAR_IND_MATRICULEHRU=IND_MATRICULEHRU FROM VENTILATION_INDIVIDUS WHERE @VAR_INDIVIDU_LIGNE_EN_COURS=IND_LIGNE;--matricule HRU en cours
SELECT @VAR_PSZ_SALARIE=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE @VAR_INDIVIDU_LIGNE_EN_COURS=IND_LIGNE;
SELECT @VAR_PSZ_DIGITALIDENT=IQIDEN FROM TRSMATRICULE WHERE MATRI=@VAR_IND_MATRICULEHRU;

INSERT INTO HR_SPRINT_SALARIECOMPL
VALUES (@VAR_PSZ_SIREN,@VAR_PSZ_SALARIE,@VAR_PSZ_DIGITALIDENT);

Print 'Génération du coffre pour le salarié '+@VAR_PSZ_SALARIE+' ligne en cours '+CAST(@VAR_INDIVIDU_LIGNE_EN_COURS as varchar(255))+'/'+CAST(@VAR_TOTAL_INDIVIDUS As varchar(255))

SET @VAR_INDIVIDU_LIGNE_EN_COURS=@VAR_INDIVIDU_LIGNE_EN_COURS+1;
END

GO

--Reprise tabla CONTRATTRAVAIl

--Boucle par GENCONTRAT 

--Les contrats sont dans GENCONTRAT (tout reprendre) et les détails se trouvent dans VALIDCONTRAT
--Jointure GENCONTRAT.GCREF=VALIDCONTRAT.GCREF
--1 contrat plusieurs valeurs dans VALIDOCONTRAT voir comment alimenter PGHISTODETAIL

--Pour chaque contrat faire une boucle pour trouver les dernières valeurs

DECLARE

@VAR_PCI_SIREN varchar(35),
@VAR_PCI_SALARIE varchar(10),
@VAR_PCI_ORDRE int,
@VAR_PCI_ORDRE_TEMPORAIRE int,
@VAR_PCI_TYPECONTRAT char(3),
@VAR_PCI_DEBUTCONTRAT datetime,
@VAR_PCI_FINCONTRAT datetime,
@VAR_PCI_ETABLISSEMENT char(3),
@VAR_ETABLISSEMENT_SALARIE varchar(35),
@VAR_PCI_ETABLIEUTRAV  char(3),
@VAR_PCI_DNASITUATADM char(3),
@VAR_PCI_PERPAIEMENTSAL char(3),
@VAR_PCI_INTITULCONTRAT char(3),
@VAR_PCI_TYPECDD char(3),
@VAR_PCI_REGIMELOCALDSN char(2),
@VAR_PCI_QUOTITE varchar(255),
@VAR_PCI_TYPEINSEE char(3),
@VAR_PCI_CODEINSEE char(5),
@VAR_PCI_ANCIENNUM char(35),
@VAR_PCI_PASEXCLU char(2),
@VAR_PCI_LIBELLEEMPLOI varchar(35),
@VAR_LIBELLE_EMPLOI_SALARIE varchar(35),
@VAR_PCI_MOTIFCTINT char(3),
@VAR_CONTRAT_EN_COURS int,
@VAR_TOTAL_CONTRAT_SALARIE int,
@VAR_TOTAL_CONTRAT int,
@VAR_SOCIETE_TOTAL int,
@VAR_SOCIETE_LIGNE int,
@VAR_CEMP varchar(35),
@VAR_CMATR varchar(35),
@VAR_CMATR_HRS varchar(10),
@VAR_STATUT_MIGRATION varchar(35),
@VAR_CEMP_SALARIE varchar(35),
@VAR_GCREF varchar(35),
@VAR_PCI_DNACODUNITEHOR char(2),
@VAR_PCI_SALARIEREMPL_HRU varchar(10),
@VAR_PCI_SALARIEREMPL varchar(10),
@VAR_PAR_PLE_PARTAGE char(1);

SET @VAR_CONTRAT_EN_COURS=1;
SET @VAR_SOCIETE_LIGNE=1;
SELECT @VAR_SOCIETE_TOTAL=COUNT(*) FROM EMPLOYEUR;--nombre de sociétés à traiter
SELECT @VAR_TOTAL_CONTRAT=COUNT(*) FROM GENCONTRAT; --nombre de contrat à traiter
SELECT @VAR_PAR_PLE_PARTAGE=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='Partage PLE';--récupération du paramétrage si partage libellé emploi

WHILE @VAR_SOCIETE_LIGNE<=@VAR_SOCIETE_TOTAL --Boucle par sociétés

BEGIN

SELECT @VAR_CEMP=Employeur FROM EMPLOYEUR WHERE SOCIETE_LIGNE=@VAR_SOCIETE_LIGNE;--récupération de l'employeur 
SELECT @VAR_PCI_SIREN=Siren FROM EMPLOYEUR WHERE SOCIETE_LIGNE=@VAR_SOCIETE_LIGNE;--récupération du SIREN de l'employeur

	WHILE @VAR_CONTRAT_EN_COURS<=@VAR_TOTAL_CONTRAT --boucle par contrat
	   	 
	BEGIN

	SELECT @VAR_CMATR=MATRI FROM GENCONTRAT WHERE GENCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS; --Récupération du matricule en cours HRU
	SELECT @VAR_CEMP_SALARIE=IND_CEMP FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR;--récupération de l'employeur du salarié
	SELECT @VAR_CMATR_HRS=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR;--récupération du matricule HRS 
	SELECT @VAR_STATUT_MIGRATION=IND_STATUS FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR;--récupération du statut de la migration


		IF @VAR_CEMP_SALARIE=@VAR_CEMP --test si le salarié est sur la société

		BEGIN

		SELECT @VAR_PCI_ORDRE_TEMPORAIRE=COUNT(*) FROM HR_SPRINT_CONTRATTRAVAIL WHERE PCI_SALARIE=@VAR_CMATR_HRS; --recherche du nombre de contrat salarié
		SELECT @VAR_GCREF=GCREF FROM GENCONTRAT WHERE GENCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS; --récupération code contrat pour jointure avec VENTILCONTRAT
		
		SELECT @VAR_PCI_SALARIE=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_CEMP=@VAR_CEMP;--récupération du matricule sur la société en cours
		
		IF @VAR_PCI_ORDRE_TEMPORAIRE=0--si le salarié n'avait pas de contrat alors numéro 1
			
			BEGIN
			
			SET @VAR_PCI_ORDRE=1;

			END
		ELSE--si le salarié avait déjà des contrats nombre de contrats +1
			BEGIN

			SET @VAR_PCI_ORDRE=@VAR_PCI_ORDRE_TEMPORAIRE+1;--incrémentation du compteur par salarié
			
			END
			
		SELECT @VAR_PCI_TYPECONTRAT=CTNAT FROM VALIDCONTRAT WHERE GCREF=@VAR_GCREF AND MATRI=@VAR_CMATR ORDER BY DVCTR DESC; --récupération du type contrat
		IF @VAR_PCI_TYPECONTRAT='01'
		SET @VAR_PCI_TYPECONTRAT='CDI';
		ELSE
		BEGIN
			SET @VAR_PCI_TYPECONTRAT='CCD';
			SET @VAR_PCI_TYPECDD='';
		END
		SELECT @VAR_PCI_DEBUTCONTRAT=CAST(DENTR AS datetime) FROM GENCONTRAT WHERE GENCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS; --récupération datetime d'entrée
		SELECT @VAR_PCI_FINCONTRAT=CAST(DDEP AS datetime) FROM GENCONTRAT WHERE GENCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS; --récupération datetime de sortie
		SELECT @VAR_PCI_SALARIEREMPL_HRU=MATRR FROM GENCONTRAT WHERE GENCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS;--récupération du matricule salarié remplacé
		SELECT @VAR_PCI_SALARIEREMPL=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_PCI_SALARIEREMPL_HRU AND IND_CEMP=@VAR_CEMP;--récupération du matricule HRS
		SELECT TOP(1) @VAR_ETABLISSEMENT_SALARIE=CDETS FROM VALIDCONTRAT WHERE GCREF=@VAR_GCREF AND MATRI=@VAR_CMATR ORDER BY DVCTR DESC; --récupération du code établissement HRU du contrat
		SELECT @VAR_PCI_ETABLISSEMENT=TRA_VALEURHRS FROM TRANSCO WHERE TRA_TYPE='Etablissement' AND TRA_VALEURHRU=@VAR_ETABLISSEMENT_SALARIE AND TRA_SIREN=@VAR_PCI_SIREN;--récupération code établissement HRS
		SET @VAR_PCI_ETABLIEUTRAV=@VAR_PCI_ETABLISSEMENT;--etablissement lieu de travail
		SET @VAR_PCI_DNASITUATADM='10';
		SET @VAR_PCI_PERPAIEMENTSAL='16';
		SET @VAR_PCI_INTITULCONTRAT='90';
		SET @VAR_PCI_PERPAIEMENTSAL='16';
		SET @VAR_PCI_REGIMELOCALDSN='99';
		SELECT TOP(1) @VAR_PCI_QUOTITE=QHMOI FROM VALIDCONTRAT WHERE GCREF=@VAR_GCREF AND MATRI=@VAR_CMATR ORDER BY DVCTR DESC --récupération quotité de travail
		IF @VAR_PCI_QUOTITE=''
		BEGIN
			SELECT TOP(1) @VAR_PCI_QUOTITE=NBJRF FROM VALIDCONTRAT WHERE GCREF=@VAR_GCREF AND MATRI=@VAR_CMATR ORDER BY DVCTR DESC
			SET @VAR_PCI_DNACODUNITEHOR='01';
		END
		ELSE 
		BEGIN
			SET @VAR_PCI_DNACODUNITEHOR='10';
		END
		SET @VAR_PCI_TYPEINSEE='ETB'
		SELECT TOP(1) @VAR_PCI_CODEINSEE=[Code Insee Commune] FROM ETABLISSEMENT WHERE Etablissement=@VAR_ETABLISSEMENT_SALARIE;--récupération code Insee de l'établissement
		SELECT @VAR_PCI_ANCIENNUM=GCANC FROM GENCONTRAT WHERE GENCONTRAT_LIGNE=@VAR_CONTRAT_EN_COURS; --récupération ancien numéro
		SET @VAR_PCI_PASEXCLU='01';

		SELECT TOP(1) @VAR_LIBELLE_EMPLOI_SALARIE=LQUAL FROM VALIDCONTRAT WHERE GCREF=@VAR_GCREF AND MATRI=@VAR_CMATR ORDER BY DVCTR DESC;

		IF @VAR_PAR_PLE_PARTAGE='X'--si on partage les libellés d'emploi
			BEGIN
					SELECT @VAR_PCI_LIBELLEEMPLOI=TRA_VALEURHRS FROM TRANSCO WHERE TRA_VALEURHRU=@VAR_LIBELLE_EMPLOI_SALARIE AND TRA_TYPE='Emploi' AND TRA_SIREN='999999999';--récupération libellé emploi transco 
			END

		ELSE
			BEGIN
				SELECT @VAR_PCI_LIBELLEEMPLOI=TRA_VALEURHRS FROM TRANSCO WHERE TRA_VALEURHRU=@VAR_LIBELLE_EMPLOI_SALARIE AND TRA_TYPE='Emploi' AND TRA_SIREN=@VAR_PCI_SIREN;--récupération libellé emploi transco 
			END
		
		SET @VAR_PCI_MOTIFCTINT='';

		Print 'Société en cours '+CAST(@VAR_SOCIETE_LIGNE AS varchar(35))+'/'+CAST(@VAR_SOCIETE_TOTAL AS VARCHAR(255))+' création pour le salarié '+@VAR_CMATR+' d un contrat ligne en cours '+CAST(@VAR_CONTRAT_EN_COURS AS varchar(255))+'/'+CAST(@VAR_TOTAL_CONTRAT AS varchar(255))

		INSERT INTO HR_SPRINT_CONTRATTRAVAIL
		VALUES (@VAR_PCI_SIREN,@VAR_PCI_SALARIE,@VAR_PCI_ORDRE,@VAR_PCI_TYPECONTRAT,@VAR_PCI_DEBUTCONTRAT,@VAR_PCI_FINCONTRAT,@VAR_PCI_ETABLISSEMENT,
		@VAR_PCI_ETABLIEUTRAV,@VAR_PCI_DNASITUATADM,@VAR_PCI_PERPAIEMENTSAL,@VAR_PCI_INTITULCONTRAT,@VAR_PCI_TYPECDD,@VAR_PCI_REGIMELOCALDSN,@VAR_PCI_QUOTITE,
		@VAR_PCI_TYPEINSEE,@VAR_PCI_CODEINSEE,@VAR_PCI_ANCIENNUM,@VAR_PCI_PASEXCLU,@VAR_PCI_DNACODUNITEHOR,@VAR_PCI_SALARIEREMPL,@VAR_PCI_LIBELLEEMPLOI,@VAR_PCI_MOTIFCTINT);

		UPDATE VENTILATION_INDIVIDUS SET IND_STATUS='Etape Contrat travail', IND_REPRISE_HR_SPRINT_CONTRATTRAVAIL='X' WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_CEMP=@VAR_CEMP; --mise à jour du statuts
 
 
		END-- fin de test si le salarié est sur la société

		ELSE --si il n'est pas sur la société

		BEGIN

		Print 'Société en cours '+CAST(@VAR_SOCIETE_LIGNE AS varchar(35))+'/'+CAST(@VAR_SOCIETE_TOTAL AS VARCHAR(255))+' le salarié '+@VAR_CMATR+' est sur la société '+@VAR_CEMP_SALARIE+' ligne en cours '+CAST(@VAR_CONTRAT_EN_COURS AS varchar(255))+'/'+CAST(@VAR_TOTAL_CONTRAT AS varchar(255))
		
		END

	
	SET @VAR_CONTRAT_EN_COURS=@VAR_CONTRAT_EN_COURS+1;--incrémentation du compteur pour passer au contrat suivant
	END
	   	 
SET @VAR_SOCIETE_LIGNE=@VAR_SOCIETE_LIGNE+1;
SET @VAR_CONTRAT_EN_COURS=1;

END
 

 GO


 --Reprise des RIB
 --Le script va faire une boucle à partir de VENTILATION_INDIVIDUS pas besoin de faire une boucle par société
 DECLARE

@VAR_R_SIREN varchar(35),
@VAR_R_AUXILIAIRE varchar(35),
@VAR_R_NUMERORIB int,
@VAR_R_PRINCIPAL char(1),
@VAR_R_ETABBQ varchar(8),
@VAR_R_GUICHET varchar(5),
@VAR_R_NUMEROCOMPTE varchar(20),
@VAR_R_CLERIB varchar(2),
@VAR_R_CODEIBAN varchar(70),
@VAR_R_CODEBIC varchar(35),
@VAR_R_DOMICILIATION varchar(24),
@VAR_R_SALAIRE char(1),
@VAR_R_ACOMPTE char(1),
@VAR_NATURECONTROLE varchar(255),
@VAR_SOCIETE_TOTAL int,
@VAR_SOCIETE_LIGNE int,
@VAR_SALARIE_TOTAL int,
@VAR_SALARIE_LIGNE int,
@VAR_CMATR varchar(35),
@VAR_R_PAYS char(3),
@VAR_R_DEVISE char(3),
@VAR_CONCAT_IBAN varchar(70),
@VAR_AN_TYPE varchar(255),
@VAR_AN_COMMENTAIRE varchar(255),
@VAR_RESULTATCONTROLE varchar(255),
@VAR_COMMENTAIRE varchar(255);

SET @VAR_R_PRINCIPAL='X';
SET @VAR_R_ACOMPTE='X';
SET @VAR_R_SALAIRE='X';
SET @VAR_R_NUMERORIB=1;

SET @VAR_NATURECONTROLE='Création des RIB';
SELECT @VAR_SALARIE_LIGNE=MIN(IND_LIGNE) FROM VENTILATION_INDIVIDUS;
SET @VAR_SOCIETE_LIGNE=1;

SELECT @VAR_SALARIE_TOTAL=MAX(IND_LIGNE) FROM VENTILATION_INDIVIDUS;

WHILE @VAR_SALARIE_LIGNE<=@VAR_SALARIE_TOTAL--boucle par salarié

BEGIN

SELECT @VAR_CMATR=IND_MATRICULEHRU FROM VENTILATION_INDIVIDUS WHERE @VAR_SALARIE_LIGNE=IND_LIGNE; --récupération du matricule HRU
SELECT @VAR_R_CODEIBAN=IBAN1 FROM INDIVIDU WHERE MATRI=@VAR_CMATR; --récupération de l'IBAN

IF LEN(@VAR_R_CODEIBAN)>1 --si le salarié a un IBAN 

	BEGIN
	
	SET @VAR_R_PAYS='FRA';
	SET @VAR_R_DEVISE='EUR';
	SELECT @VAR_R_AUXILIAIRE=IND_AUXILIAIRE FROM VENTILATION_INDIVIDUS WHERE @VAR_SALARIE_LIGNE=IND_LIGNE--récupération du code auxiliaire
	SELECT @VAR_R_SIREN=IND_SIREN FROM VENTILATION_INDIVIDUS WHERE @VAR_SALARIE_LIGNE=IND_LIGNE--SIREN du salarié
	SELECT @VAR_R_CODEIBAN=IBAN1 FROM INDIVIDU WHERE MATRI=@VAR_CMATR; --récupération de l'IBAN
	SELECT @VAR_R_CODEBIC=CBIC1 FROM INDIVIDU WHERE MATRI=@VAR_CMATR;--récupération du code BIC
	SELECT @VAR_R_ETABBQ=RIGHT(LEFT(IBAN1,9),5) FROM INDIVIDU WHERE MATRI=@VAR_CMATR;--code établissement
	SELECT @VAR_R_GUICHET=RIGHT(LEFT(IBAN1,14),5) FROM INDIVIDU WHERE MATRI=@VAR_CMATR;--code Guichet
	SELECT @VAR_R_NUMEROCOMPTE=RIGHT(LEFT(IBAN1,25),11) FROM INDIVIDU WHERE MATRI=@VAR_CMATR;---numéro de compte
	SELECT @VAR_R_CLERIB=RIGHT(IBAN1,2) FROM INDIVIDU WHERE MATRI=@VAR_CMATR--clé RIB
	SELECT @VAR_R_DOMICILIATION=LBNQ1 FROM INDIVIDU WHERE MATRI=@VAR_CMATR --récupération de la domiciliation
	
	SET @VAR_CONCAT_IBAN=CONCAT(LEFT(@VAR_R_CODEIBAN,4),@VAR_R_ETABBQ,@VAR_R_GUICHET,@VAR_R_NUMEROCOMPTE,@VAR_R_CLERIB)--reconstitution IBAN pour test

	IF @VAR_CONCAT_IBAN=@VAR_R_CODEIBAN --si le code est ok

		BEGIN

		INSERT INTO HR_SPRINT_RIB
		VALUES (@VAR_R_SIREN,@VAR_R_AUXILIAIRE,@VAR_R_NUMERORIB,@VAR_R_PRINCIPAL,@VAR_R_ETABBQ,@VAR_R_GUICHET,@VAR_R_NUMEROCOMPTE,@VAR_R_CLERIB,@VAR_R_CODEIBAN,
		@VAR_R_CODEBIC,@VAR_R_DOMICILIATION,@VAR_R_SALAIRE,@VAR_R_ACOMPTE,@VAR_R_PAYS,@VAR_R_DEVISE);

		UPDATE VENTILATION_INDIVIDUS SET IND_STATUS='Etape RIB', IND_REPRISE_HR_SPRINT_RIB='X' WHERE IND_AUXILIAIRE=@VAR_R_AUXILIAIRE AND IND_SIREN=@VAR_R_SIREN; --mise à jour du statuts


		PRINT 'Création du RIB pour l auxiliaire '+@VAR_R_AUXILIAIRE+'ligne en cours '+CAST(@VAR_SALARIE_LIGNE AS varchar(255))+'/'+CAST(@VAR_SALARIE_TOTAL AS varchar(255))

		SET @VAR_COMMENTAIRE='Création du RIB pour l auxiliaire '+@VAR_R_AUXILIAIRE+'ligne en cours '+CAST(@VAR_SALARIE_LIGNE AS varchar(255))+'/'+CAST(@VAR_SALARIE_TOTAL AS varchar(255));
		SET @VAR_RESULTATCONTROLE='Ok';
		
		INSERT INTO JOURNAL_DES_TRAITEMENTS  --Ajout du commentaire dans la table des traitements
		VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);
				
		UPDATE VENTILATION_INDIVIDUS SET IND_STATUS='Etape RIB' WHERE IND_AUXILIAIRE=@VAR_R_AUXILIAIRE;

		SET @VAR_SALARIE_LIGNE=@VAR_SALARIE_LIGNE+1; --incrémentation de la boucle

		END

	ELSE --si le code est différent

		BEGIN

		PRINT 'Incohérence entre la valeur IBAN recalculé '+@VAR_CONCAT_IBAN+'<>'+@VAR_R_CODEIBAN

		SET @VAR_AN_TYPE='Incohérence longueur IBAN';
		SET @VAR_AN_COMMENTAIRE='Incohérence entre la valeur IBAN recalculé '+@VAR_CONCAT_IBAN+'<>'+@VAR_R_CODEIBAN;
	
		INSERT INTO ANOMALIES
		VALUES (@VAR_AN_TYPE,@VAR_R_AUXILIAIRE,@VAR_AN_COMMENTAIRE);

		SET @VAR_COMMENTAIRE=@VAR_AN_COMMENTAIRE;
		SET @VAR_RESULTATCONTROLE='Ko';

		INSERT INTO JOURNAL_DES_TRAITEMENTS  --Ajout du commentaire dans la table des traitements
		VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);

		UPDATE VENTILATION_INDIVIDUS SET IND_STATUS='Etape RIB' WHERE IND_AUXILIAIRE=@VAR_R_AUXILIAIRE; --mise à jour du statut

		SET @VAR_SALARIE_LIGNE=@VAR_SALARIE_LIGNE+1; --incrémentation de la boucle

		END
	END

	ELSE--si le salarié n'a pas d'IBAN

	PRINT 'Le salarié n a pas d IBAN passage au salarié suivant '+CAST(@VAR_SALARIE_LIGNE AS varchar(255))+'/'+CAST(@VAR_SALARIE_TOTAL AS varchar(255))
	
	SET @VAR_COMMENTAIRE='Le salarié n a pas d IBAN passage au salarié suivant '+CAST(@VAR_SALARIE_LIGNE AS varchar(255))+'/'+CAST(@VAR_SALARIE_TOTAL AS varchar(255));
	SET @VAR_RESULTATCONTROLE='Ok';

	INSERT INTO JOURNAL_DES_TRAITEMENTS  --Ajout du commentaire dans la table des traitements
	VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);

	SET @VAR_SALARIE_LIGNE=@VAR_SALARIE_LIGNE+1; --incrémentation de la boucle
	UPDATE VENTILATION_INDIVIDUS SET IND_STATUS='Etape RIB' WHERE IND_AUXILIAIRE=@VAR_R_AUXILIAIRE; --mise à jour du statut


END

GO

--Génération de la table CHOIXCOD et MINIMUMCONVENT à partir de TRANSCO

DECLARE

@VAR_NATURECONTROLE varchar(255),
@VAR_RESULTATCONTROLE varchar(255),
@VAR_COMMENTAIRE varchar(255),
@VAR_LIGNE_TRANSCO int,
@VAR_TOTAL_LIGNE_TRANSCO int,
@VAR_CC_SIREN varchar(35),
@VAR_CC_TYPE char(3),
@VAR_CC_CODE char(3),
@VAR_CC_LIBELLE varchar(35),
@VAR_CC_ABREGE varchar(35),
@VAR_CC_LIBRE varchar(35),
@VAR_TRA_TYPE varchar(35),
@VAR_PMI_SIREN varchar(35),
@VAR_PMI_NATURE char(3),
@VAR_PMI_CONVENTION char(3),
@VAR_PMI_TYPENATURE char(3),
@VAR_PMI_CODE char(3),
@VAR_PMI_LIBELLE varchar(35),
@VAR_PMI_NATUREINT char(3),
@VAR_PMI_NATURERESULT char(3),
@VAR_PMI_SENSINT char(2),
@VAR_PMI_PREDEFINI char(3),
@VAR_PMI_NODOSSIER char(6);


SET @VAR_PMI_TYPENATURE='VAL';
SET @VAR_PMI_CONVENTION='000';
SET @VAR_PMI_PREDEFINI='STD';
SET @VAR_PMI_NODOSSIER='000000';
SET @VAR_RESULTATCONTROLE='Ok'
SET @VAR_NATURECONTROLE='Création table CHOIXCOD';
SELECT @VAR_LIGNE_TRANSCO=MIN(TRA_ID) FROM TRANSCO;
SELECT @VAR_TOTAL_LIGNE_TRANSCO=MAX(TRA_ID) FROM TRANSCO;

WHILE @VAR_LIGNE_TRANSCO<=@VAR_TOTAL_LIGNE_TRANSCO

BEGIN

SELECT @VAR_TRA_TYPE=TRA_TYPE FROM TRANSCO WHERE TRA_ID=@VAR_LIGNE_TRANSCO;--récupération du type de reprise
SELECT @VAR_CC_SIREN=TRA_SIREN FROM TRANSCO WHERE TRA_ID=@VAR_LIGNE_TRANSCO;--récupération du code SIREN de la société
SET @VAR_PMI_SIREN=@VAR_CC_SIREN;
SELECT @VAR_CC_CODE=TRA_VALEURHRS FROM TRANSCO WHERE TRA_ID=@VAR_LIGNE_TRANSCO;--récupération du nouveau code
SELECT @VAR_CC_LIBELLE=TRA_VALEURHRU FROM TRANSCO WHERE TRA_ID=@VAR_LIGNE_TRANSCO;--récupération du libellé ancienne valeur HRU
SELECT @VAR_CC_ABREGE=TRA_VALEURHRU FROM TRANSCO WHERE TRA_ID=@VAR_LIGNE_TRANSCO;--récupération du libellé ancienne valeur HRU
IF @VAR_TRA_TYPE='Emploi'

	BEGIN

	SET @VAR_CC_TYPE='PLE';

	PRINT 'Création de la valeur '+@VAR_CC_CODE+' pour le SIREN '+@VAR_CC_SIREN+' ligne en cous '+CAST(@VAR_LIGNE_TRANSCO AS varchar(255))+'/'+CAST(@VAR_TOTAL_LIGNE_TRANSCO AS Varchar(255))

	SET @VAR_COMMENTAIRE='Création de la valeur '+@VAR_CC_CODE+' pour le SIREN '+@VAR_CC_SIREN+' ligne en cous '+CAST(@VAR_LIGNE_TRANSCO AS varchar(255))+'/'+CAST(@VAR_TOTAL_LIGNE_TRANSCO AS Varchar(255));

	INSERT INTO HR_SPRINT_CHOIXCOD
	VALUES (@VAR_CC_SIREN,@VAR_CC_TYPE,@VAR_CC_CODE,@VAR_CC_LIBELLE,@VAR_CC_ABREGE);

	END

IF @VAR_TRA_TYPE='CTA01'--dans la table PARAMETRES il faut regarder la zone HR SPRINT de destination pour retrouver le CC_TYPE

	BEGIN

	SET @VAR_CC_TYPE=

	CASE

	--CODE STATISTIQUE

	WHEN EXISTS (SELECT * FROM PARAMETRES WHERE PAR_NOM='CODESTAT' AND PAR_VALEUR='CTA01')
		THEN 'PSQ'

	--TravailN1

	WHEN EXISTS (SELECT * FROM PARAMETRES WHERE PAR_NOM='TABLETRAVAILN1' AND PAR_VALEUR='CTA01')
		THEN 'PAG'

	END;

	PRINT 'Création de la valeur '+@VAR_CC_CODE+' pour le SIREN '+@VAR_CC_SIREN+' ligne en cous '+CAST(@VAR_LIGNE_TRANSCO AS varchar(255))+'/'+CAST(@VAR_TOTAL_LIGNE_TRANSCO AS Varchar(255))

	SET @VAR_COMMENTAIRE='Création de la valeur '+@VAR_CC_CODE+' pour le SIREN '+@VAR_CC_SIREN+' ligne en cous '+CAST(@VAR_LIGNE_TRANSCO AS varchar(255))+'/'+CAST(@VAR_TOTAL_LIGNE_TRANSCO AS Varchar(255));

	INSERT INTO HR_SPRINT_CHOIXCOD
	VALUES (@VAR_CC_SIREN,@VAR_CC_TYPE,@VAR_CC_CODE,@VAR_CC_LIBELLE,@VAR_CC_ABREGE);


	END

IF @VAR_TRA_TYPE='CTA02'

	BEGIN

	SET @VAR_CC_TYPE=

	CASE

	--CODE STATISTIQUE

	WHEN EXISTS (SELECT * FROM PARAMETRES WHERE PAR_NOM='CODESTAT' AND PAR_VALEUR='CTA02')
		THEN 'PSQ'

	--TravailN1

	WHEN EXISTS (SELECT * FROM PARAMETRES WHERE PAR_NOM='TABLETRAVAILN1' AND PAR_VALEUR='CTA02')
		THEN 'PAG'

	END;

	PRINT 'Création de la valeur '+@VAR_CC_CODE+' pour le SIREN '+@VAR_CC_SIREN+' ligne en cous '+CAST(@VAR_LIGNE_TRANSCO AS varchar(255))+'/'+CAST(@VAR_TOTAL_LIGNE_TRANSCO AS Varchar(255))

	SET @VAR_COMMENTAIRE='Création de la valeur '+@VAR_CC_CODE+' pour le SIREN '+@VAR_CC_SIREN+' ligne en cous '+CAST(@VAR_LIGNE_TRANSCO AS varchar(255))+'/'+CAST(@VAR_TOTAL_LIGNE_TRANSCO AS Varchar(255));

	INSERT INTO HR_SPRINT_CHOIXCOD
	VALUES (@VAR_CC_SIREN,@VAR_CC_TYPE,@VAR_CC_CODE,@VAR_CC_LIBELLE,@VAR_CC_ABREGE);


	END

IF @VAR_TRA_TYPE='Coefficient' OR @VAR_TRA_TYPE='Qualification' OR @VAR_TRA_TYPE='Niveau'  --sinon il s'agit d'une qualif/coeff/Niveau
	BEGIN

	IF @VAR_TRA_TYPE='Coefficient'

		BEGIN

		SET @VAR_PMI_NATURE='COE';

		END

	IF @VAR_TRA_TYPE='Qualification'

		BEGIN

		SET @VAR_PMI_NATURE='QUA';

		END

	IF @VAR_TRA_TYPE='Niveau'

		BEGIN

		SET @VAR_PMI_NATURE='NIV';

		END

	SELECT @VAR_PMI_LIBELLE=TRA_VALEURHRU FROM TRANSCO WHERE TRA_ID=@VAR_LIGNE_TRANSCO; 
	SELECT @VAR_PMI_CODE=TRA_VALEURHRS FROM TRANSCO WHERE TRA_ID=@VAR_LIGNE_TRANSCO; 

	INSERT INTO HR_SPRINT_MINIMUMCONVENT
	VALUES (@VAR_PMI_SIREN,@VAR_PMI_NATURE,@VAR_PMI_CONVENTION,@VAR_PMI_TYPENATURE,@VAR_PMI_CODE,@VAR_PMI_LIBELLE,@VAR_PMI_PREDEFINI,@VAR_PMI_NODOSSIER);

	PRINT 'Le type de transco est différent de emploi passage à la ligne suivante ligne en cours '+CAST(@VAR_LIGNE_TRANSCO AS varchar(255))+'/'+CAST(@VAR_TOTAL_LIGNE_TRANSCO AS Varchar(255))

	SET @VAR_COMMENTAIRE='Le type de transco est différent de emploi passage à la ligne suivante ligne en cours '+CAST(@VAR_LIGNE_TRANSCO AS varchar(255))+'/'+CAST(@VAR_TOTAL_LIGNE_TRANSCO AS Varchar(255));

	END

ELSE--il s'agit d'une autre transco

BEGIN

PRINT 'Le type de transco est différent de emploi passage à la ligne suivante ligne en cours '+CAST(@VAR_LIGNE_TRANSCO AS varchar(255))+'/'+CAST(@VAR_TOTAL_LIGNE_TRANSCO AS Varchar(255))

SET @VAR_COMMENTAIRE='Le type de transco est différent de emploi passage à la ligne suivante ligne en cours '+CAST(@VAR_LIGNE_TRANSCO AS varchar(255))+'/'+CAST(@VAR_TOTAL_LIGNE_TRANSCO AS Varchar(255));

END


INSERT INTO JOURNAL_DES_TRAITEMENTS  --Ajout du commentaire dans la table des traitements
VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);

SET @VAR_LIGNE_TRANSCO=@VAR_LIGNE_TRANSCO+1; 

END

GO

--Reprise RETENUESALARIE

DECLARE

@VAR_PRE_SIREN varchar(35),
@VAR_PRE_SALARIE varchar(10),
@VAR_PRE_ORDRE int,
@VAR_PRE_ORDRE_PRECEDENT int,
@VAR_PRE_LIBELLE varchar(35),
@VAR_PRE_DATEDEBUT datetime,
@VAR_PRE_DATEFIN datetime,
@VAR_SOLDE_SAISIE_ARRET numeric (9,2),
@VAR_PRE_MONTANTTOT varchar(255),
@VAR_PRE_ACTIF char(1),
@VAR_PRE_RETENUESAL char(3),
@VAR_PRE_REMBMAX char(1),
@VAR_PRE_MONTANTMENS varchar(255),
@VAR_PRE_NBMOIS int,
@VAR_CMATR varchar(10),
@VAR_TOTAL_SAISIEARRET int,
@VAR_SAISIEARRET_EN_COURS int,
@VAR_TOTAL_PENSION int,
@VAR_PENSION_EN_COURS int,
@VAR_CEMP varchar(35);

SELECT @VAR_TOTAL_SAISIEARRET=COUNT(*) FROM SAISIEARRET;
SELECT @VAR_TOTAL_PENSION=COUNT(*) FROM PENSIONALIMENTAIRE;

SET @VAR_SAISIEARRET_EN_COURS=1;
SET @VAR_PENSION_EN_COURS=1;
SET @VAR_PRE_DATEFIN='01/01/1900';
SET @VAR_PRE_REMBMAX='X';
SET @VAR_PRE_ACTIF='X';

--Reprise des saisies arrets
WHILE @VAR_SAISIEARRET_EN_COURS<=@VAR_TOTAL_SAISIEARRET

BEGIN

SELECT @VAR_CMATR=MATRI FROM SAISIEARRET WHERE SAISIEARRET_LIGNE=@VAR_SAISIEARRET_EN_COURS;--récupération du matricule 
SELECT @VAR_CEMP=CEMP FROM SAISIEARRET WHERE SAISIEARRET_LIGNE=@VAR_SAISIEARRET_EN_COURS; --récupération du CEMP
SELECT @VAR_PRE_SIREN=IND_SIREN FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_CEMP=@VAR_CEMP; --récupération du SIREN
SELECT @VAR_PRE_SALARIE=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_CEMP=@VAR_CEMP; --récupération du matricule HRS
SELECT @VAR_PRE_ORDRE=COUNT(PRE_ORDRE+1) FROM HR_SPRINT_RETENUESALAIRE WHERE PRE_SALARIE=@VAR_PRE_SALARIE AND PRE_SIREN=@VAR_PRE_SIREN;
IF @VAR_PRE_ORDRE=0
SET @VAR_PRE_ORDRE=1;
SELECT @VAR_PRE_DATEDEBUT=CAST(CONCAT(PENOT,'01') AS datetime) FROM SAISIEARRET WHERE SAISIEARRET_LIGNE=@VAR_SAISIEARRET_EN_COURS; --récupération de la date de début de la saisie
SELECT @VAR_SOLDE_SAISIE_ARRET=SUM(MTADD-MTSUB) FROM SAISIEARRET WHERE SAISIEARRET_LIGNE=@VAR_SAISIEARRET_EN_COURS;--récupération du solde de la saisie arret
SET @VAR_PRE_MONTANTTOT=CAST(@VAR_SOLDE_SAISIE_ARRET AS varchar(255));
SELECT @VAR_PRE_LIBELLE=REFER FROM SAISIEARRET WHERE SAISIEARRET_LIGNE=@VAR_SAISIEARRET_EN_COURS;
SET @VAR_PRE_RETENUESAL='001';
SET @VAR_PRE_MONTANTMENS='';
SET @VAR_PRE_NBMOIS='';

PRINT 'Traitement du salarié '+@VAR_PRE_SALARIE+' ligne en cours '+CAST(@VAR_SAISIEARRET_EN_COURS AS varchar(255))+'/'+CAST(@VAR_TOTAL_SAISIEARRET AS varchar(255))

INSERT INTO HR_SPRINT_RETENUESALAIRE
VALUES (@VAR_PRE_SIREN,@VAR_PRE_SALARIE,@VAR_PRE_ORDRE,@VAR_PRE_LIBELLE,@VAR_PRE_DATEDEBUT,@VAR_PRE_DATEFIN,@VAR_PRE_MONTANTTOT,@VAR_PRE_ACTIF,@VAR_PRE_RETENUESAL,@VAR_PRE_REMBMAX,@VAR_PRE_MONTANTMENS,@VAR_PRE_NBMOIS);


SET @VAR_SAISIEARRET_EN_COURS=@VAR_SAISIEARRET_EN_COURS+1;
END

--Reprise des pensions alimentaires

SELECT @VAR_PRE_DATEDEBUT=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='Date de démarrage'; --reprise au premier mois de la reprise sur Sprint sinon le logiciel vient régulariser depuis le début car il n'a pas d'historique des retenues

WHILE @VAR_PENSION_EN_COURS<=@VAR_TOTAL_PENSION

BEGIN

SELECT @VAR_CMATR=MATRI FROM PENSIONALIMENTAIRE WHERE PENSIONALIMENTAIRE_LIGNE=@VAR_PENSION_EN_COURS;--récupération du matricule 
SELECT @VAR_CEMP=CEMP FROM PENSIONALIMENTAIRE WHERE PENSIONALIMENTAIRE_LIGNE=@VAR_PENSION_EN_COURS; --récupération du CEMP
SELECT @VAR_PRE_SIREN=IND_SIREN FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_CEMP=@VAR_CEMP; --récupération du SIREN
SELECT @VAR_PRE_SALARIE=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_CEMP=@VAR_CEMP; --récupération du matricule HRS
SELECT @VAR_PRE_ORDRE=COUNT(PRE_ORDRE+1) FROM HR_SPRINT_RETENUESALAIRE WHERE PRE_SALARIE=@VAR_PRE_SALARIE AND PRE_SIREN=@VAR_PRE_SIREN;
IF @VAR_PRE_ORDRE =0
SET @VAR_PRE_ORDRE=1;
SELECT @VAR_PRE_DATEFIN=CAST(CONCAT(PEFIN,'01') AS datetime)FROM PENSIONALIMENTAIRE WHERE PENSIONALIMENTAIRE_LIGNE=@VAR_PENSION_EN_COURS AND PEFIN<>''; --récupération date de fin de la pension
SELECT @VAR_PRE_MONTANTMENS=MTPEN FROM PENSIONALIMENTAIRE WHERE PENSIONALIMENTAIRE_LIGNE=@VAR_PENSION_EN_COURS;--récupération du solde de la saisie arret
SELECT @VAR_PRE_LIBELLE=REFER FROM SAISIEARRET WHERE SAISIEARRET_LIGNE=@VAR_SAISIEARRET_EN_COURS;
SET @VAR_PRE_RETENUESAL='002';
SET @VAR_PRE_REMBMAX='-';
SET @VAR_PRE_MONTANTTOT=0;


PRINT 'Traitement du salarié '+@VAR_PRE_SALARIE+' ligne en cours '+CAST(@VAR_PENSION_EN_COURS AS varchar(255))+'/'+CAST(@VAR_TOTAL_PENSION AS varchar(255))

INSERT INTO HR_SPRINT_RETENUESALAIRE
VALUES (@VAR_PRE_SIREN,@VAR_PRE_SALARIE,@VAR_PRE_ORDRE,@VAR_PRE_LIBELLE,@VAR_PRE_DATEDEBUT,@VAR_PRE_DATEFIN,@VAR_PRE_MONTANTTOT,@VAR_PRE_ACTIF,@VAR_PRE_RETENUESAL,@VAR_PRE_REMBMAX,@VAR_PRE_MONTANTMENS,@VAR_PRE_NBMOIS);


SET @VAR_PENSION_EN_COURS=@VAR_PENSION_EN_COURS+1;
END

GO

--Reprise des taux PAS

DECLARE

@VAR_CMATR varchar(35),
@VAR_PKT_SIREN varchar(35),
@VAR_PKT_NUMEROSS varchar(15),
@VAR_PKT_SALARIE varchar(10),
@VAR_PKT_IDENTIFIANTIND varchar(35),
@VAR_PKT_PERIODE varchar(6),
@VAR_PKT_CRM varchar(18),
@VAR_PKT_DTPUBLICATION datetime,
@VAR_PKT_TAUXDGFIP varchar(5),
@VAR_NATURECONTROLE varchar(255),
@VAR_RESULTATCONTROLE varchar(255),
@VAR_COMMENTAIRE varchar(255),
@VAR_TAUXPAS_LIGNE_EN_COURS int,
@VAR_TAUXPAS_TOTAL int,
@VAR_PAR_TAUXPAS char(1);

SELECT @VAR_PAR_TAUXPAS=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='Reprise Taux Pas';--récupération si on migre la table

SET @VAR_PKT_DTPUBLICATION='01/01/1900';
SET @VAR_NATURECONTROLE='Création table PASTAUX';
SET @VAR_TAUXPAS_LIGNE_EN_COURS=1;
SELECT @VAR_TAUXPAS_TOTAL=COUNT(*) FROM TAUXPAS;

IF @VAR_PAR_TAUXPAS='X' --si on reprend la table

BEGIN

WHILE @VAR_TAUXPAS_LIGNE_EN_COURS<=@VAR_TAUXPAS_TOTAL

	BEGIN

	SELECT @VAR_CMATR=MATRI FROM TAUXPAS WHERE @VAR_TAUXPAS_LIGNE_EN_COURS=TAUXPAS_LIGNE;--récupération du Salarié en cours
	SELECT @VAR_PKT_SIREN=IND_SIREN FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR;--récupération du siren du salarié
	SELECT @VAR_PKT_SALARIE=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR;--récupération du matricule HRS
	SELECT @VAR_PKT_NUMEROSS=PSA_NUMEROSS FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PKT_SALARIE;--récupération du code SS
	SELECT @VAR_PKT_PERIODE=PRTAU FROM TAUXPAS WHERE @VAR_TAUXPAS_LIGNE_EN_COURS=TAUXPAS_LIGNE;--récupération de la période
	SELECT @VAR_PKT_CRM=IDTAU FROM TAUXPAS WHERE @VAR_TAUXPAS_LIGNE_EN_COURS=TAUXPAS_LIGNE;--récupération du CRM
	SET @VAR_PKT_IDENTIFIANTIND=@VAR_PKT_SALARIE;
	SELECT @VAR_PKT_TAUXDGFIP=VLTAU FROM TAUXPAS WHERE @VAR_TAUXPAS_LIGNE_EN_COURS=TAUXPAS_LIGNE;--récupération du taux

	INSERT INTO HR_SPRINT_PASTAUX
	VALUES (@VAR_PKT_SIREN,@VAR_PKT_NUMEROSS,@VAR_PKT_SALARIE,@VAR_PKT_IDENTIFIANTIND,@VAR_PKT_PERIODE,@VAR_PKT_CRM,@VAR_PKT_DTPUBLICATION,@VAR_PKT_TAUXDGFIP);

	UPDATE VENTILATION_INDIVIDUS SET IND_STATUS='Etape PAS', IND_REPRISE_HR_SPRINT_PASTAUX='X' WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_SIREN=@VAR_PKT_SIREN;

	Print 'Création du taux PAS ligne en cours '+CAST(@VAR_TAUXPAS_LIGNE_EN_COURS as varchar(255))+'/'+CAST(@VAR_TAUXPAS_TOTAL as varchar(255))


	INSERT INTO JOURNAL_DES_TRAITEMENTS  --Ajout du commentaire dans la table des traitements
	VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);


	SET @VAR_TAUXPAS_LIGNE_EN_COURS=@VAR_TAUXPAS_LIGNE_EN_COURS+1;
	END
END--Fin de Si

ELSE 

Print 'La table PASTAUX n est pas reprise'

GO

--Reprise des enfants

DECLARE

@VAR_CMATR varchar(35),
@VAR_ENFANT_EN_COURS int,
@VAR_ENFANT_TOTAL int,
@VAR_NBRE_ENFANT_AVANT_INSERT int,
@VAR_PEF_SIREN varchar(35),
@VAR_PEF_SALARIE varchar(10),
@VAR_PEF_ENFANT int,
@VAR_PEF_NOM varchar(35),
@VAR_PEF_PRENOM varchar(35),
@VAR_PEF_DATENAISSANCE date,
@VAR_PEF_ACHARGE char(1),
@VAR_PEF_NATIONALITE char(3),
@VAR_SEXE_TRANSCO char(2),
@VAR_PEF_SEXE char(1),
@VAR_PEF_TYPEPARENTAL char(3),
@VAR_NATURECONTROLE varchar(255),
@VAR_RESULTATCONTROLE varchar(255),
@VAR_COMMENTAIRE varchar(255);

SET @VAR_RESULTATCONTROLE='Ok';
SET @VAR_NATURECONTROLE='Création Table ENFANTSALARIES';
SET @VAR_NBRE_ENFANT_AVANT_INSERT=0;
SET @VAR_ENFANT_EN_COURS=1;
SELECT @VAR_ENFANT_TOTAL=COUNT(*) FROM ENFANTS;
SET @VAR_PEF_TYPEPARENTAL='001';
SET @VAR_PEF_ACHARGE='X';
SET @VAR_PEF_NATIONALITE='FRA';

WHILE @VAR_ENFANT_EN_COURS<=@VAR_ENFANT_TOTAL
BEGIN

SELECT @VAR_CMATR=MATRI FROM ENFANTS WHERE @VAR_ENFANT_EN_COURS=ENFANTS_LIGNE;--récupération du matricule HRU
SELECT @VAR_PEF_SALARIE=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR; --récupération du matricule HRS
SELECT @VAR_PEF_SIREN=IND_SIREN FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR;--récupération du SIREN
SELECT @VAR_NBRE_ENFANT_AVANT_INSERT=COUNT(*) FROM HR_SPRINT_ENFANTSALARIE WHERE PEF_SALARIE=@VAR_PEF_SALARIE;--compte le nombre d'enfant avant le prochain INSERT
SET @VAR_PEF_ENFANT=@VAR_NBRE_ENFANT_AVANT_INSERT+1; --incrémentation du compteur d'enfants
SELECT @VAR_PEF_NOM=NMENF FROM ENFANTS WHERE @VAR_ENFANT_EN_COURS=ENFANTS_LIGNE;--nom de l'enfant
SELECT @VAR_PEF_PRENOM=PRENF FROM ENFANTS WHERE @VAR_ENFANT_EN_COURS=ENFANTS_LIGNE;--prénom de l'enfant
SELECT @VAR_PEF_DATENAISSANCE=CAST(DNENF AS datetime) FROM ENFANTS WHERE @VAR_ENFANT_EN_COURS=ENFANTS_LIGNE;--datetime de naissance de l'enfant
SELECT @VAR_SEXE_TRANSCO=SXENF FROM ENFANTS WHERE @VAR_ENFANT_EN_COURS=ENFANTS_LIGNE;--datetime de naissance de l'enfant
IF @VAR_SEXE_TRANSCO='01'
SET @VAR_PEF_SEXE='M';
ELSE 
SET @VAR_PEF_SEXE='F';

INSERT INTO HR_SPRINT_ENFANTSALARIE
VALUES (@VAR_PEF_SIREN,@VAR_PEF_SALARIE,@VAR_PEF_ENFANT,@VAR_PEF_NOM,@VAR_PEF_PRENOM,@VAR_PEF_DATENAISSANCE,@VAR_PEF_ACHARGE,@VAR_PEF_NATIONALITE,@VAR_PEF_SEXE,@VAR_PEF_TYPEPARENTAL);

UPDATE VENTILATION_INDIVIDUS SET IND_STATUS='Etape Enfants', IND_REPRISE_HR_SPRINT_ENFANTSALARIE='X' WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_SIREN=@VAR_PEF_SIREN; 

Print 'Création de l enfant numéro '+CAST(@VAR_PEF_ENFANT AS varchar(255))+@VAR_PEF_NOM+@VAR_PEF_PRENOM+' pour le salarié '+@VAR_PEF_SALARIE+' ligne en cours '+CAST(@VAR_ENFANT_EN_COURS AS varchar(255))+'/'+CAST(@VAR_ENFANT_TOTAL AS varchar(255))
SET @VAR_COMMENTAIRE='Création de l enfant numéro '+CAST(@VAR_PEF_ENFANT AS varchar(255))+@VAR_PEF_NOM+@VAR_PEF_PRENOM+' pour le salarié '+@VAR_PEF_SALARIE+' ligne en cours '+CAST(@VAR_ENFANT_EN_COURS AS varchar(255))+'/'+CAST(@VAR_ENFANT_TOTAL AS varchar(255));

INSERT INTO JOURNAL_DES_TRAITEMENTS  --Ajout du commentaire dans la table des traitements
VALUES (@VAR_NATURECONTROLE,@VAR_RESULTATCONTROLE,@VAR_COMMENTAIRE);

SET @VAR_NBRE_ENFANT_AVANT_INSERT=0;
SET @VAR_PEF_ENFANT=0;
SET @VAR_ENFANT_EN_COURS=@VAR_ENFANT_EN_COURS+1;
END

GO

--Reprie des absences + CP

DECLARE

@VAR_CMATR char(10),
@VAR_CEMP char(10),
@VAR_PCN_SIREN varchar(35),
@VAR_PCN_ETABLISSEMENT char(3),
@VAR_PCN_SALARIE varchar(10),
@VAR_PCN_DATEDEBUT datetime,
@VAR_PCN_DATEFIN datetime,
@VAR_ORDRE_TEMPORAIRE int,
@VAR_PCN_ORDRE int,
@VAR_PCN_TYPECONGE char(3),
@VAR_PCN_SENSABS char(3),
@VAR_PCN_DATEVALIDITE datetime,
@VAR_PCN_LIBELLE varchar(70),
@VAR_PCN_JOURS varchar(255),
@VAR_PCN_HEURES varchar(255),
@VAR_PCN_BASE varchar(255),
@VAR_PCN_DEBUTDJ char(3),
@VAR_PCN_FINDJ char(3),
@VAR_PCN_TRAVAILN1 char(3),
@VAR_PCN_TRAVAILN2 char(3),
@VAR_PCN_TRAVAILN3 char(3),
@VAR_PCN_TRAVAILN4 char(3),
@VAR_PCN_TYPEMVT char(3),
@VAR_PCN_PERIODECP char(1),
@VAR_PCN_PERIODEPY char(2),
@VAR_PCN_TYPEIMPUTE char(3),
@VAR_PCN_ETATPOSTPAIE char(3),
@VAR_PCN_CODEETAPE char(1),
@VAR_NATURECONTROLE varchar(255),
@VAR_RESULTATCONTROLE varchar(255),
@VAR_COMMENTAIRE varchar(255),
@VAR_LIGNE_ABSENCES_EN_COURS int,
@VAR_LIGNE_TOTAL_ABSENCES int,
@VAR_LIGNE_INDIVIDU_EN_COURS int,
@VAR_LIGNE_TOTAL_INDIVIDUS int;

SET @VAR_PCN_ORDRE=0;
SET @VAR_NATURECONTROLE='Création table Absences';
SET @VAR_RESULTATCONTROLE='Ok';
SET @VAR_LIGNE_ABSENCES_EN_COURS=1;
SET @VAR_PCN_ETATPOSTPAIE='VAL';
SELECT @VAR_LIGNE_TOTAL_ABSENCES=COUNT(*) FROM EVENEMENTS;

WHILE @VAR_LIGNE_ABSENCES_EN_COURS<=@VAR_LIGNE_TOTAL_ABSENCES --boucle par absences

BEGIN

SELECT @VAR_CMATR=MATRI FROM EVENEMENTS WHERE EVENEMENTS_LIGNE=@VAR_LIGNE_ABSENCES_EN_COURS; --récupération matricule HRU
SELECT @VAR_PCN_SIREN=IND_SIREN FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR; -- récupération SIREN
SELECT @VAR_PCN_SALARIE=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR;--récupération matricule HRS
SELECT @VAR_PCN_ETABLISSEMENT=PSA_ETABLISSEMENT FROM HR_SPRINT_SALARIES WHERE @VAR_PCN_SALARIE=PSA_SALARIE;--récupération du code établissement
SELECT @VAR_PCN_DATEDEBUT=DBEVT FROM EVENEMENTS WHERE EVENEMENTS_LIGNE=@VAR_LIGNE_ABSENCES_EN_COURS;--récupération date de début
SELECT @VAR_PCN_DATEFIN=FIEVT FROM EVENEMENTS WHERE EVENEMENTS_LIGNE=@VAR_LIGNE_ABSENCES_EN_COURS;--récupération date de fin
SELECT @VAR_PCN_DATEVALIDITE=FIEVT FROM EVENEMENTS WHERE EVENEMENTS_LIGNE=@VAR_LIGNE_ABSENCES_EN_COURS; --récupération date de validité
SELECT @VAR_PCN_TYPECONGE=CDMTF FROM EVENEMENTS WHERE EVENEMENTS_LIGNE=@VAR_LIGNE_ABSENCES_EN_COURS;--type congé
SELECT @VAR_ORDRE_TEMPORAIRE=COUNT(*) FROM HR_SPRINT_ABSENCESALARIE WHERE PCN_SALARIE=@VAR_PCN_SALARIE;--compte le nombre d'absence du salarié déjà traité
SET @VAR_PCN_ORDRE=@VAR_ORDRE_TEMPORAIRE+1; --incrémente le compteur
SET @VAR_PCN_SENSABS='-';
SET @VAR_PCN_LIBELLE='Reprise FRH';

INSERT INTO HR_SPRINT_ABSENCESALARIE
VALUES (@VAR_PCN_SIREN,@VAR_PCN_ETABLISSEMENT,@VAR_PCN_SALARIE,@VAR_PCN_DATEDEBUT,@VAR_PCN_DATEFIN,@VAR_PCN_ORDRE,@VAR_PCN_TYPECONGE,@VAR_PCN_SENSABS,@VAR_PCN_DATEVALIDITE,
@VAR_PCN_LIBELLE,@VAR_PCN_JOURS,@VAR_PCN_HEURES,@VAR_PCN_BASE,@VAR_PCN_DEBUTDJ,@VAR_PCN_FINDJ,@VAR_PCN_TRAVAILN1,@VAR_PCN_TRAVAILN2,@VAR_PCN_TRAVAILN3,@VAR_PCN_TRAVAILN4,@VAR_PCN_TYPEMVT,@VAR_PCN_PERIODECP,@VAR_PCN_PERIODEPY,@VAR_PCN_TYPEIMPUTE,@VAR_PCN_ETATPOSTPAIE,@VAR_PCN_CODEETAPE);

UPDATE VENTILATION_INDIVIDUS SET IND_STATUS='Etape absences', IND_REPRISE_HR_SPRINT_ABSENCESALARIE='X' WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_SIREN=@VAR_PCN_SIREN;

PRINT 'Création d une absence ligne en cours '+CAST(@VAR_LIGNE_ABSENCES_EN_COURS AS VARCHAR(255))+'/'+CAST(@VAR_LIGNE_TOTAL_ABSENCES AS VARCHAR(255))

SET @VAR_LIGNE_ABSENCES_EN_COURS=@VAR_LIGNE_ABSENCES_EN_COURS+1;

END


--Reprise des compteurs CP

SELECT @VAR_LIGNE_INDIVIDU_EN_COURS=MIN(IND_LIGNE) FROM VENTILATION_INDIVIDUS;
SELECT @VAR_LIGNE_TOTAL_INDIVIDUS=MAX(IND_LIGNE) FROM VENTILATION_INDIVIDUS;

SET @VAR_PCN_TYPEMVT='CPA';
SET @VAR_PCN_DATEDEBUT='01/01/1900';
SET @VAR_PCN_DATEFIN='01/01/1900';

WHILE @VAR_LIGNE_INDIVIDU_EN_COURS<=@VAR_LIGNE_TOTAL_INDIVIDUS

BEGIN

SELECT @VAR_CMATR=IND_MATRICULEHRU FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_LIGNE_INDIVIDU_EN_COURS;--récupération du matricule HRU
SELECT @VAR_CEMP=IND_CEMP FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_LIGNE_INDIVIDU_EN_COURS;--récupération du CEMP
SELECT @VAR_PCN_SIREN=IND_SIREN FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_LIGNE_INDIVIDU_EN_COURS; --récupération du SIREN
SELECT @VAR_PCN_SALARIE=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_LIGNE_INDIVIDU_EN_COURS; --récupération du matricule HRS
SELECT @VAR_PCN_ETABLISSEMENT=PSA_ETABLISSEMENT FROM HR_SPRINT_SALARIES WHERE @VAR_PCN_SALARIE=PSA_SALARIE;--récupération du code établissement
--Gestion des CP acquis sur N
SELECT @VAR_PCN_JOURS=VLRES FROM COMPTEURS WHERE CDRG='CPD' AND CDSSR='050' AND MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP;--récupération du nbre de jours acquis sur N 
SET @VAR_PCN_DATEVALIDITE='31/05/2020';
SELECT @VAR_ORDRE_TEMPORAIRE=COUNT(*) FROM HR_SPRINT_ABSENCESALARIE WHERE PCN_SALARIE=@VAR_PCN_SALARIE;--compte le nombre d'absence du salarié déjà traité
SET @VAR_PCN_ORDRE=@VAR_ORDRE_TEMPORAIRE+1; --incrémente le compteur
SET @VAR_PCN_SENSABS='+';
SET @VAR_PCN_PERIODECP='1';
SET @VAR_PCN_PERIODEPY='-1';
SET @VAR_PCN_TYPECONGE='REP';
SET @VAR_PCN_CODEETAPE='';
SET @VAR_PCN_LIBELLE='Reprise des données des CP Acquis sur N';
SELECT @VAR_PCN_BASE=BASE FROM ENTETEPAIE WHERE NRUB='7020' AND MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP; --recupération de la base 10ème
--Insertion des CP acquis au 31/05/2020
INSERT INTO HR_SPRINT_ABSENCESALARIE
VALUES (@VAR_PCN_SIREN,@VAR_PCN_ETABLISSEMENT,@VAR_PCN_SALARIE,@VAR_PCN_DATEDEBUT,@VAR_PCN_DATEFIN,@VAR_PCN_ORDRE,@VAR_PCN_TYPECONGE,@VAR_PCN_SENSABS,@VAR_PCN_DATEVALIDITE,
@VAR_PCN_LIBELLE,@VAR_PCN_JOURS,@VAR_PCN_HEURES,@VAR_PCN_BASE,@VAR_PCN_DEBUTDJ,@VAR_PCN_FINDJ,@VAR_PCN_TRAVAILN1,@VAR_PCN_TRAVAILN2,@VAR_PCN_TRAVAILN3,@VAR_PCN_TRAVAILN4,@VAR_PCN_TYPEMVT,@VAR_PCN_PERIODECP,@VAR_PCN_PERIODEPY,@VAR_PCN_TYPEIMPUTE,@VAR_PCN_ETATPOSTPAIE,@VAR_PCN_CODEETAPE);

--Gestion de CP pris sur N
SELECT @VAR_PCN_JOURS=VLRES FROM COMPTEURS WHERE CDRG='CPD' AND CDSSR='150' AND MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP;--récupération du nbre de jours Pris sur N 
SET @VAR_PCN_DATEVALIDITE='31/05/2020';
SELECT @VAR_ORDRE_TEMPORAIRE=COUNT(*) FROM HR_SPRINT_ABSENCESALARIE WHERE PCN_SALARIE=@VAR_PCN_SALARIE;--compte le nombre d'absence du salarié déjà traité
SET @VAR_PCN_ORDRE=@VAR_ORDRE_TEMPORAIRE+1; --incrémente le compteur
SET @VAR_PCN_SENSABS='-';
SET @VAR_PCN_PERIODECP='1';
SET @VAR_PCN_PERIODEPY='-1';
SET @VAR_PCN_TYPEIMPUTE='AC2';
SET @VAR_PCN_TYPECONGE='CPA';
SET @VAR_PCN_CODEETAPE='P';
SET @VAR_PCN_LIBELLE='Reprise des données des CP Pris sur N';
SET @VAR_PCN_BASE='';
--@Insertion des CP pris au 31/05/2020
INSERT INTO HR_SPRINT_ABSENCESALARIE
VALUES (@VAR_PCN_SIREN,@VAR_PCN_ETABLISSEMENT,@VAR_PCN_SALARIE,@VAR_PCN_DATEDEBUT,@VAR_PCN_DATEFIN,@VAR_PCN_ORDRE,@VAR_PCN_TYPECONGE,@VAR_PCN_SENSABS,@VAR_PCN_DATEVALIDITE,
@VAR_PCN_LIBELLE,@VAR_PCN_JOURS,@VAR_PCN_HEURES,@VAR_PCN_BASE,@VAR_PCN_DEBUTDJ,@VAR_PCN_FINDJ,@VAR_PCN_TRAVAILN1,@VAR_PCN_TRAVAILN2,@VAR_PCN_TRAVAILN3,@VAR_PCN_TRAVAILN4,@VAR_PCN_TYPEMVT,@VAR_PCN_PERIODECP,@VAR_PCN_PERIODEPY,@VAR_PCN_TYPEIMPUTE,@VAR_PCN_ETATPOSTPAIE,@VAR_PCN_CODEETAPE);

--Gestion de CP pris en cours d'acquisition
SELECT @VAR_PCN_JOURS=VLRES FROM COMPTEURS WHERE CDRG='CPD' AND CDSSR='300' AND MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP;--récupération du nbre de jours Pris sur N 
SET @VAR_PCN_DATEVALIDITE='01/06/2020';
SELECT @VAR_ORDRE_TEMPORAIRE=COUNT(*) FROM HR_SPRINT_ABSENCESALARIE WHERE PCN_SALARIE=@VAR_PCN_SALARIE;--compte le nombre d'absence du salarié déjà traité
SET @VAR_PCN_ORDRE=@VAR_ORDRE_TEMPORAIRE+1; --incrémente le compteur
SET @VAR_PCN_SENSABS='+';
SET @VAR_PCN_PERIODECP='0';
SET @VAR_PCN_PERIODEPY='-1';
SET @VAR_PCN_TYPEIMPUTE='AC2';
SET @VAR_PCN_TYPECONGE='REP';
SET @VAR_PCN_CODEETAPE='P';
SET @VAR_PCN_LIBELLE='Reprise des données des CP Acquis sur N+1';
SELECT @VAR_PCN_BASE=BASE FROM ENTETEPAIE WHERE NRUB='7030' AND MATRI=@VAR_CMATR AND CEMP=@VAR_CEMP; --recupération de la base 10ème
--Insertion des CP acquis au 01/06/2020
INSERT INTO HR_SPRINT_ABSENCESALARIE
VALUES (@VAR_PCN_SIREN,@VAR_PCN_ETABLISSEMENT,@VAR_PCN_SALARIE,@VAR_PCN_DATEDEBUT,@VAR_PCN_DATEFIN,@VAR_PCN_ORDRE,@VAR_PCN_TYPECONGE,@VAR_PCN_SENSABS,@VAR_PCN_DATEVALIDITE,
@VAR_PCN_LIBELLE,@VAR_PCN_JOURS,@VAR_PCN_HEURES,@VAR_PCN_BASE,@VAR_PCN_DEBUTDJ,@VAR_PCN_FINDJ,@VAR_PCN_TRAVAILN1,@VAR_PCN_TRAVAILN2,@VAR_PCN_TRAVAILN3,@VAR_PCN_TRAVAILN4,@VAR_PCN_TYPEMVT,@VAR_PCN_PERIODECP,@VAR_PCN_PERIODEPY,@VAR_PCN_TYPEIMPUTE,@VAR_PCN_ETATPOSTPAIE,@VAR_PCN_CODEETAPE);

Print 'Reprise des CP pour le salarié '+@VAR_PCN_SALARIE+' ligne en cours '+cast(@VAR_LIGNE_INDIVIDU_EN_COURS as varchar(255))+'/'+cast(@VAR_LIGNE_TOTAL_INDIVIDUS as varchar(255))

SET @VAR_LIGNE_INDIVIDU_EN_COURS=@VAR_LIGNE_INDIVIDU_EN_COURS+1;
END
GO

--Reprie de l'analytique

--Source HRU IMPUTATIONANALYTIQUE destination CVENTIL, CVENTILENTETE,CSECTION et axe

--Attention la reprie par ASC de la table CVENTIL n'est pas autorisée dans l'application de Paie. On devra passer par un fichier d'import VEN

DECLARE

--CSECTION
@VAR_CSP_SIREN varchar(35),
@VAR_CSP_AXE char(2),
@VAR_CSP_SOUSPLAN char(2),
@VAR_CSP_SECTION varchar(17),
@VAR_CSP_LIBELLE varchar(35),
@VAR_CSP_ABREGE varchar(35),
@VAR_TEST_SECTION_EXISTE char(1),
--CVENTILENTETE
@VAR_CVT_SIREN varchar(35),
@VAR_CVT_CODE varchar(17),
@VAR_CVT_LIBELLE varchar(17),
@VAR_CVT_ABREGE varchar(17),
@VAR_CVT_LIBRE varchar(17),
@VAR_CVT_INVISIBLE char(1),
@VAR_CVT_EXISTEAXE1 char(1),
@VAR_CVT_EXISTEAXE2 char(1),
@VAR_CVT_EXISTEAXE3 char(1),
@VAR_CVT_EXISTEAXE4 char(1),
@VAR_CVT_EXISTEAXE5 char(1),
--CVENTIL
@VAR_CVE_SIREN char(35),
@VAR_CVE_CODE varchar(17),
@VAR_CVE_AXE char(2),
@VAR_CVE_TAUXMONTANT varchar(255),
@VAR_CVE_TAUXQTE1 float,
@VAR_CVE_TAUXQTE2 float,
@VAR_CVE_NUMEROVENTIL int,
@VAR_CVE_MONTANT float,
@VAR_CVE_SOUSPLAN1 varchar(17),
@VAR_CVE_SOUSPLAN2 varchar(17),
@VAR_CVE_SOUSPLAN3 varchar(17),
@VAR_CVE_SOUSPLAN4 varchar(17),
@VAR_CVE_SOUSPLAN5 varchar(17),
@VAR_CVE_SOUSPLAN6 varchar(17),
@VAR_CVE_TYPE char(3),
@VAR_MATRICULE_HRU varchar(10),
@VAR_CEMP varchar(10),
@VAR_SIREN varchar(35),
@VAR_MATRICULE_HRS varchar(10),
@VAR_LIGNE_EN_COURS_IMPUTATION int,
@VAR_TOTAL_LIGNE_IMPUTATION int,
@VAR_LONGUEUR_AXE1 int,
@VAR_LONGUEUR_AXE2 int,
@VAR_LONGUEUR_AXE3 int,
@VAR_LONGUEUR_AXE4 int,
@VAR_LONGUEUR_AXE5 int,
@VAR_LONGUEUR_TOTAL int,
@VAR_AXE1_AXE2_LONGEUR int,
@VAR_MULTI_AXE char(1),


--AXE
@VAR_X_SIREN varchar(35),
@VAR_X_AXE char(2),
@VAR_X_LIBELLE char (35),
@VAR_X_COMPTABLE char(1),
@VAR_X_CHANTIER char(1),
@VAR_X_MODEREOUVERTURE char(1),
@VAR_X_SECTIONATTENTE char (17),
@VAR_X_REGLESAISIE varchar(35),
@VAR_X_ABREGE char(17),
@VAR_X_LONGSECTION int,
@VAR_X_BOURREANA char(1),
@VAR_X_SOCIETE char(3),
@VAR_X_STRUCTURE char(1),
@VAR_X_GENEATTENTE varchar(17),
@VAR_X_CPESTRUCT char(1),
@VAR_X_FERME char(1),
@VAR_X_SAISIETRANCHE char(1),
@VAR_TEST_AXE_EXISTE int;

SELECT @VAR_LIGNE_EN_COURS_IMPUTATION=MIN(IMPUTATIONANALYTIQUE_LIGNE) FROM IMPUTATIONANALYTIQUE;
SELECT @VAR_TOTAL_LIGNE_IMPUTATION=MAX(IMPUTATIONANALYTIQUE_LIGNE) FROM IMPUTATIONANALYTIQUE;

SET @VAR_CVE_TYPE='SAL';
SET @VAR_X_COMPTABLE='X';
SET @VAR_X_CHANTIER='-';
SET @VAR_X_STRUCTURE='-';
SET @VAR_X_FERME='-';
SET @VAR_X_SAISIETRANCHE='-';
SET @VAR_X_BOURREANA='0';
SET @VAR_CSP_SOUSPLAN='S1';
SET @VAR_CVT_INVISIBLE='-';



WHILE @VAR_LIGNE_EN_COURS_IMPUTATION<@VAR_TOTAL_LIGNE_IMPUTATION

BEGIN

SELECT @VAR_MATRICULE_HRU=MATRI FROM IMPUTATIONANALYTIQUE WHERE IMPUTATIONANALYTIQUE_LIGNE=@VAR_LIGNE_EN_COURS_IMPUTATION;--récupération matricule HRU
SELECT @VAR_CEMP=CEMP FROM IMPUTATIONANALYTIQUE WHERE IMPUTATIONANALYTIQUE_LIGNE=@VAR_LIGNE_EN_COURS_IMPUTATION;--récupération du code société
SELECT @VAR_MATRICULE_HRS=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_MATRICULE_HRU AND IND_CEMP=@VAR_CEMP;--récupération du code matricule HRS
SET @VAR_CVT_CODE=@VAR_MATRICULE_HRS;
SET @VAR_CVE_CODE=@VAR_MATRICULE_HRS;
SELECT @VAR_SIREN=IND_SIREN FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRS=@VAR_MATRICULE_HRS AND IND_CEMP=@VAR_CEMP;--récupération du SIREN
SET @VAR_CVT_SIREN=@VAR_SIREN;
SET @VAR_CVE_SIREN=@VAR_SIREN;
SET @VAR_X_SIREN=@VAR_SIREN;
SET @VAR_CSP_SIREN=@VAR_SIREN;

SET @VAR_CVE_NUMEROVENTIL=1;

SET @VAR_CVE_TAUXMONTANT='100,00';

SELECT @VAR_MULTI_AXE=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='MULTI_AXE';

IF @VAR_MULTI_AXE='-' --si un axe analytique 

	BEGIN

	SELECT @VAR_CVE_SOUSPLAN1=IMP01 FROM IMPUTATIONANALYTIQUE WHERE IMPUTATIONANALYTIQUE_LIGNE=@VAR_LIGNE_EN_COURS_IMPUTATION;

	INSERT HR_SPRINT_CVENTIL
	VALUES (@VAR_CVE_SIREN,@VAR_CVE_CODE,@VAR_CVE_AXE,@VAR_CVE_TAUXMONTANT,@VAR_CVE_TAUXQTE1,@VAR_CVE_TAUXQTE2,@VAR_CVE_NUMEROVENTIL,@VAR_CVE_MONTANT,@VAR_CVE_SOUSPLAN1,@VAR_CVE_SOUSPLAN2,@VAR_CVE_SOUSPLAN3,@VAR_CVE_SOUSPLAN4,
	@VAR_CVE_SOUSPLAN5,@VAR_CVE_SOUSPLAN6,@VAR_CVE_TYPE);
	
	END


IF @VAR_MULTI_AXE='X' --si plusieurs axe analytique 

	BEGIN
	
	SELECT @VAR_LONGUEUR_AXE1=CAST(PAR_VALEUR AS INT) FROM PARAMETRES WHERE PAR_NOM='AXE_1';
	SELECT @VAR_LONGUEUR_AXE2=CAST(PAR_VALEUR AS INT)  FROM PARAMETRES WHERE PAR_NOM='AXE_2';
	SELECT @VAR_LONGUEUR_AXE3=CAST(PAR_VALEUR AS INT)  FROM PARAMETRES WHERE PAR_NOM='AXE_3';
	SELECT @VAR_LONGUEUR_AXE4=CAST(PAR_VALEUR AS INT)  FROM PARAMETRES WHERE PAR_NOM='AXE_4';
	SELECT @VAR_LONGUEUR_AXE5=CAST(PAR_VALEUR AS INT)  FROM PARAMETRES WHERE PAR_NOM='AXE_5';

	SET @VAR_LONGUEUR_TOTAL=@VAR_LONGUEUR_AXE1+@VAR_LONGUEUR_AXE2+@VAR_LONGUEUR_AXE3+@VAR_LONGUEUR_AXE4+@VAR_LONGUEUR_AXE5;--longueur total de la section
	SET @VAR_AXE1_AXE2_LONGEUR=@VAR_LONGUEUR_AXE1+@VAR_LONGUEUR_AXE2;

	PRINT 'Longueur axe 1 '+CAST(@VAR_LONGUEUR_AXE1 AS varchar(255))
	PRINT 'Longueur axe 2 '+CAST(@VAR_LONGUEUR_AXE2 AS varchar(255))
	PRINT 'Longueur axe 3 '+CAST(@VAR_LONGUEUR_AXE3 AS varchar(255))
	PRINT 'Longueur axe 4 '+CAST(@VAR_LONGUEUR_AXE4 AS varchar(255))
	PRINT 'Longueur axe 5 '+CAST(@VAR_LONGUEUR_AXE4 AS varchar(255))
	
	IF @VAR_LONGUEUR_AXE1>0

		BEGIN

		--Gestion de la table CVENTIL

		SELECT @VAR_CVE_SOUSPLAN1=LEFT(IMP01,@VAR_LONGUEUR_AXE1) FROM IMPUTATIONANALYTIQUE WHERE IMPUTATIONANALYTIQUE_LIGNE=@VAR_LIGNE_EN_COURS_IMPUTATION; 
		SET @VAR_CVE_AXE='A1'; 
		
		INSERT HR_SPRINT_CVENTIL
		VALUES (@VAR_CVE_SIREN,@VAR_CVE_CODE,@VAR_CVE_AXE,@VAR_CVE_TAUXMONTANT,@VAR_CVE_TAUXQTE1,@VAR_CVE_TAUXQTE2,@VAR_CVE_NUMEROVENTIL,@VAR_CVE_MONTANT,@VAR_CVE_SOUSPLAN1,@VAR_CVE_SOUSPLAN2,@VAR_CVE_SOUSPLAN3,@VAR_CVE_SOUSPLAN4,
		@VAR_CVE_SOUSPLAN5,@VAR_CVE_SOUSPLAN6,@VAR_CVE_TYPE);
		
		--Gestion de la table CVENTILENTETE

		SET @VAR_CVT_CODE=@VAR_CVE_CODE;
		SET @VAR_CVT_LIBELLE=@VAR_CVT_CODE;
		SET @VAR_CVT_ABREGE=@VAR_CVE_CODE;
		SET @VAR_CVT_LIBRE=@VAR_CVE_CODE;
		SET @VAR_CVT_EXISTEAXE1='X';
		SET @VAR_CVT_EXISTEAXE2='-';
		SET @VAR_CVT_EXISTEAXE3='-';
		SET @VAR_CVT_EXISTEAXE4='-';
		SET @VAR_CVT_EXISTEAXE5='-';

		INSERT INTO HR_SPRINT_CVENTILENTETE
		VALUES(@VAR_CVT_SIREN,@VAR_CVT_CODE,@VAR_CVT_LIBELLE,@VAR_CVT_ABREGE,@VAR_CVT_LIBRE,@VAR_CVT_INVISIBLE,@VAR_CVT_EXISTEAXE1,@VAR_CVT_EXISTEAXE2,@VAR_CVT_EXISTEAXE3,
		@VAR_CVT_EXISTEAXE4,@VAR_CVT_EXISTEAXE5);

		--Gestion de la table AXE

		SET @VAR_X_AXE='A1'; 
		SET @VAR_X_LIBELLE='Reprise FRH A1';
		SET @VAR_X_ABREGE=@VAR_X_LIBELLE;
		SET @VAR_X_SECTIONATTENTE='ZZZZZZ';

		SELECT @VAR_TEST_AXE_EXISTE=COUNT(*) FROM HR_SPRINT_AXE WHERE X_AXE=@VAR_X_AXE AND X_SIREN=@VAR_X_SIREN;--test si la ligne existe déjà

		IF @VAR_TEST_AXE_EXISTE=0

			BEGIN

			INSERT INTO HR_SPRINT_AXE
			VALUES (@VAR_X_SIREN,@VAR_X_AXE,@VAR_X_LIBELLE,@VAR_X_COMPTABLE,@VAR_X_CHANTIER,@VAR_X_MODEREOUVERTURE,@VAR_X_SECTIONATTENTE,@VAR_X_REGLESAISIE,@VAR_X_ABREGE,
			@VAR_X_LONGSECTION,@VAR_X_BOURREANA,@VAR_X_SOCIETE,@VAR_X_STRUCTURE,@VAR_X_GENEATTENTE,@VAR_X_CPESTRUCT,@VAR_X_FERME,@VAR_X_SAISIETRANCHE);

			PRINT 'Création de l axe A1'

			END

		IF @VAR_TEST_AXE_EXISTE=1

			BEGIN

			PRINT 'L axe A1 existe déjà'

			END

		--Gestion de la table CSECTION

		SET @VAR_CSP_SECTION=@VAR_CVE_SOUSPLAN1;--récupération du code section
		SET @VAR_CSP_AXE=@VAR_X_AXE;
		SET @VAR_CSP_ABREGE=@VAR_CSP_SECTION;
		SET @VAR_CSP_LIBELLE=@VAR_CSP_ABREGE;

		SELECT @VAR_TEST_SECTION_EXISTE=COUNT(*) FROM HR_SPRINT_CSECTION WHERE CSP_AXE=@VAR_CSP_AXE AND CSP_SIREN=@VAR_CSP_SIREN AND CSP_SECTION=@VAR_CSP_SECTION;
		
		IF @VAR_TEST_SECTION_EXISTE=0

			BEGIN

			INSERT INTO HR_SPRINT_CSECTION
			VALUES (@VAR_CSP_SIREN,@VAR_CSP_AXE,@VAR_CSP_SOUSPLAN,@VAR_CSP_SECTION,@VAR_CSP_ABREGE,@VAR_CSP_LIBELLE);

			Print 'Création d une section analytique'


			END

		IF @VAR_TEST_SECTION_EXISTE=1

			BEGIN

			Print 'La section existe déjà'

			END

					   			 
		PRINT 'Le matricule '+@VAR_MATRICULE_HRS+'est ventilé sur l axe 1 ' +@VAR_CVE_SOUSPLAN1


		END

	IF @VAR_LONGUEUR_AXE2>0

		BEGIN

		--Gestion de la table CVENTIL


		SELECT @VAR_CVE_SOUSPLAN1=RIGHT(LEFT(IMP01,@VAR_AXE1_AXE2_LONGEUR),@VAR_LONGUEUR_AXE2) FROM IMPUTATIONANALYTIQUE WHERE IMPUTATIONANALYTIQUE_LIGNE=@VAR_LIGNE_EN_COURS_IMPUTATION; 
		SET @VAR_CVE_AXE='A2'; 
		
		INSERT HR_SPRINT_CVENTIL
		VALUES (@VAR_CVE_SIREN,@VAR_CVE_CODE,@VAR_CVE_AXE,@VAR_CVE_TAUXMONTANT,@VAR_CVE_TAUXQTE1,@VAR_CVE_TAUXQTE2,@VAR_CVE_NUMEROVENTIL,@VAR_CVE_MONTANT,@VAR_CVE_SOUSPLAN1,@VAR_CVE_SOUSPLAN2,@VAR_CVE_SOUSPLAN3,@VAR_CVE_SOUSPLAN4,
		@VAR_CVE_SOUSPLAN5,@VAR_CVE_SOUSPLAN6,@VAR_CVE_TYPE);

		--Gestion de la table CVENTILENTETE

		SET @VAR_CVT_CODE=@VAR_CVE_CODE;
		SET @VAR_CVT_LIBELLE=@VAR_CVT_CODE;
		SET @VAR_CVT_ABREGE=@VAR_CVE_CODE;
		SET @VAR_CVT_LIBRE=@VAR_CVE_CODE;
		SET @VAR_CVT_EXISTEAXE1='-';
		SET @VAR_CVT_EXISTEAXE2='X';
		SET @VAR_CVT_EXISTEAXE3='-';
		SET @VAR_CVT_EXISTEAXE4='-';
		SET @VAR_CVT_EXISTEAXE5='-';

		INSERT INTO HR_SPRINT_CVENTILENTETE
		VALUES(@VAR_CVT_SIREN,@VAR_CVT_CODE,@VAR_CVT_LIBELLE,@VAR_CVT_ABREGE,@VAR_CVT_LIBRE,@VAR_CVT_INVISIBLE,@VAR_CVT_EXISTEAXE1,@VAR_CVT_EXISTEAXE2,@VAR_CVT_EXISTEAXE3,
		@VAR_CVT_EXISTEAXE4,@VAR_CVT_EXISTEAXE5);


		--Gestion de la table AXE

		SET @VAR_X_AXE='A2'; 
		SET @VAR_X_LIBELLE='Reprise FRH A2';
		SET @VAR_X_ABREGE=@VAR_X_LIBELLE;
		SET @VAR_X_SECTIONATTENTE='ZZZZZZ';

		SELECT @VAR_TEST_AXE_EXISTE=COUNT(*) FROM HR_SPRINT_AXE WHERE X_AXE=@VAR_X_AXE AND X_SIREN=@VAR_X_SIREN;--test si la ligne existe déjà

		IF @VAR_TEST_AXE_EXISTE=0

			BEGIN

			INSERT INTO HR_SPRINT_AXE
			VALUES (@VAR_X_SIREN,@VAR_X_AXE,@VAR_X_LIBELLE,@VAR_X_COMPTABLE,@VAR_X_CHANTIER,@VAR_X_MODEREOUVERTURE,@VAR_X_SECTIONATTENTE,@VAR_X_REGLESAISIE,@VAR_X_ABREGE,
			@VAR_X_LONGSECTION,@VAR_X_BOURREANA,@VAR_X_SOCIETE,@VAR_X_STRUCTURE,@VAR_X_GENEATTENTE,@VAR_X_CPESTRUCT,@VAR_X_FERME,@VAR_X_SAISIETRANCHE);

			PRINT 'Création de l axe A2'

			END

		IF @VAR_TEST_AXE_EXISTE=1

			BEGIN

			PRINT 'L axe A2 existe déjà'

			END

		--Gestion de la table CSECTION

		SET @VAR_CSP_SECTION=@VAR_CVE_SOUSPLAN1;--récupération du code section
		SET @VAR_CSP_AXE=@VAR_X_AXE;
		SET @VAR_CSP_ABREGE=@VAR_CSP_SECTION;
		SET @VAR_CSP_LIBELLE=@VAR_CSP_ABREGE;

		SELECT @VAR_TEST_SECTION_EXISTE=COUNT(*) FROM HR_SPRINT_CSECTION WHERE CSP_AXE=@VAR_CSP_AXE AND CSP_SIREN=@VAR_CSP_SIREN AND CSP_SECTION=@VAR_CSP_SECTION;
		
		IF @VAR_TEST_SECTION_EXISTE=0

			BEGIN

			INSERT INTO HR_SPRINT_CSECTION
			VALUES (@VAR_CSP_SIREN,@VAR_CSP_AXE,@VAR_CSP_SOUSPLAN,@VAR_CSP_SECTION,@VAR_CSP_ABREGE,@VAR_CSP_LIBELLE);

			Print 'Création d une section analytique'


			END

		IF @VAR_TEST_SECTION_EXISTE=1

			BEGIN

			Print 'La section existe déjà'

			END


		PRINT 'Le matricule '+@VAR_MATRICULE_HRS+'est ventilé sur l axe 2 ' +@VAR_CVE_SOUSPLAN1

		END

	IF @VAR_LONGUEUR_AXE3>0
	
		BEGIN

		SELECT @VAR_CVE_SOUSPLAN1=RIGHT(IMP01,@VAR_LONGUEUR_AXE3) FROM IMPUTATIONANALYTIQUE WHERE IMPUTATIONANALYTIQUE_LIGNE=@VAR_LIGNE_EN_COURS_IMPUTATION; 
		SET @VAR_CVE_AXE='A3'; 
		
		INSERT HR_SPRINT_CVENTIL
		VALUES (@VAR_CVE_SIREN,@VAR_CVE_CODE,@VAR_CVE_AXE,@VAR_CVE_TAUXMONTANT,@VAR_CVE_TAUXQTE1,@VAR_CVE_TAUXQTE2,@VAR_CVE_NUMEROVENTIL,@VAR_CVE_MONTANT,@VAR_CVE_SOUSPLAN1,@VAR_CVE_SOUSPLAN2,@VAR_CVE_SOUSPLAN3,@VAR_CVE_SOUSPLAN4,
		@VAR_CVE_SOUSPLAN5,@VAR_CVE_SOUSPLAN6,@VAR_CVE_TYPE);

		--Gestion de la table CVENTILENTETE

		SET @VAR_CVT_CODE=@VAR_CVE_CODE;
		SET @VAR_CVT_LIBELLE=@VAR_CVT_CODE;
		SET @VAR_CVT_ABREGE=@VAR_CVE_CODE;
		SET @VAR_CVT_LIBRE=@VAR_CVE_CODE;
		SET @VAR_CVT_EXISTEAXE1='X';
		SET @VAR_CVT_EXISTEAXE2='-';
		SET @VAR_CVT_EXISTEAXE3='-';
		SET @VAR_CVT_EXISTEAXE4='-';
		SET @VAR_CVT_EXISTEAXE5='-';

		INSERT INTO HR_SPRINT_CVENTILENTETE
		VALUES(@VAR_CVT_SIREN,@VAR_CVT_CODE,@VAR_CVT_LIBELLE,@VAR_CVT_ABREGE,@VAR_CVT_LIBRE,@VAR_CVT_INVISIBLE,@VAR_CVT_EXISTEAXE1,@VAR_CVT_EXISTEAXE2,@VAR_CVT_EXISTEAXE3,
		@VAR_CVT_EXISTEAXE4,@VAR_CVT_EXISTEAXE5);


		--Gestion de la table AXE

		SET @VAR_X_AXE='A3'; 
		SET @VAR_X_LIBELLE='Reprise FRH A3';
		SET @VAR_X_ABREGE=@VAR_X_LIBELLE;
		SET @VAR_X_SECTIONATTENTE='ZZZZZZ';

		SELECT @VAR_TEST_AXE_EXISTE=COUNT(*) FROM HR_SPRINT_AXE WHERE X_AXE=@VAR_X_AXE AND X_SIREN=@VAR_X_SIREN;--test si la ligne existe déjà

		IF @VAR_TEST_AXE_EXISTE=0

			BEGIN

			INSERT INTO HR_SPRINT_AXE
			VALUES (@VAR_X_SIREN,@VAR_X_AXE,@VAR_X_LIBELLE,@VAR_X_COMPTABLE,@VAR_X_CHANTIER,@VAR_X_MODEREOUVERTURE,@VAR_X_SECTIONATTENTE,@VAR_X_REGLESAISIE,@VAR_X_ABREGE,
			@VAR_X_LONGSECTION,@VAR_X_BOURREANA,@VAR_X_SOCIETE,@VAR_X_STRUCTURE,@VAR_X_GENEATTENTE,@VAR_X_CPESTRUCT,@VAR_X_FERME,@VAR_X_SAISIETRANCHE);

			PRINT 'Création de l axe A3'

			END

		IF @VAR_TEST_AXE_EXISTE=1

			BEGIN

			PRINT 'L axe A3 existe déjà'

			END

		--Gestion de la table CSECTION

		SET @VAR_CSP_SECTION=@VAR_CVE_SOUSPLAN1;--récupération du code section
		SET @VAR_CSP_AXE=@VAR_X_AXE;
		SET @VAR_CSP_ABREGE=@VAR_CSP_SECTION;
		SET @VAR_CSP_LIBELLE=@VAR_CSP_ABREGE;

		SELECT @VAR_TEST_SECTION_EXISTE=COUNT(*) FROM HR_SPRINT_CSECTION WHERE CSP_AXE=@VAR_CSP_AXE AND CSP_SIREN=@VAR_CSP_SIREN AND CSP_SECTION=@VAR_CSP_SECTION;
		
		IF @VAR_TEST_SECTION_EXISTE=0

			BEGIN

			INSERT INTO HR_SPRINT_CSECTION
			VALUES (@VAR_CSP_SIREN,@VAR_CSP_AXE,@VAR_CSP_SOUSPLAN,@VAR_CSP_SECTION,@VAR_CSP_ABREGE,@VAR_CSP_LIBELLE);

			Print 'Création d une section analytique'


			END

		IF @VAR_TEST_SECTION_EXISTE=1

			BEGIN

			Print 'La section existe déjà'

			END

		PRINT 'Le matricule '+@VAR_MATRICULE_HRS+'est ventilé sur l axe 3 ' +@VAR_CVE_SOUSPLAN1

		END
		
	END


UPDATE VENTILATION_INDIVIDUS SET IND_STATUS='Etape Analytique', IND_REPRISE_HR_SPRINT_CVENTIL='X',IND_REPRISE_HR_SPRINT_CVENTILENTETE='X' WHERE IND_MATRICULEHRU=@VAR_MATRICULE_HRU AND IND_SIREN=@VAR_SIREN;

SET @VAR_LIGNE_EN_COURS_IMPUTATION=@VAR_LIGNE_EN_COURS_IMPUTATION+1;

END

Go

ALTER TABLE HR_SPRINT_CVENTIL
ADD CVE_LIGNE INT IDENTITY;

GO

DECLARE

@VAR_VEN_SIREN varchar(35),
@VAR_VEN_TYPE char(3),
@VAR_VEN_CODE varchar(10),
@VAR_VEN_AXE char(2),
@VAR_VEN_SOUSPLAN char(2),
@VAR_VEN_SECTION varchar(17),
@VAR_VEN_POURCENTAGE varchar(255),
@VAR_VEN_NUMEROVENTILATION int,
@VAR_CVE_LIGNE_EN_COURS int,
@VAR_CVE_TOTAL_LIGNES int;

SET @VAR_VEN_TYPE='VEN';
SET @VAR_VEN_SOUSPLAN='S1'
SET @VAR_CVE_LIGNE_EN_COURS=1;
SELECT @VAR_CVE_TOTAL_LIGNES=COUNT(*) FROM HR_SPRINT_CVENTIL;

WHILE @VAR_CVE_LIGNE_EN_COURS<=@VAR_CVE_TOTAL_LIGNES

BEGIN

SELECT @VAR_VEN_SIREN=CVE_SIREN FROM HR_SPRINT_CVENTIL WHERE CVE_LIGNE=@VAR_CVE_LIGNE_EN_COURS;
SELECT @VAR_VEN_CODE=CVE_CODE FROM HR_SPRINT_CVENTIL WHERE CVE_LIGNE=@VAR_CVE_LIGNE_EN_COURS;
SELECT @VAR_VEN_AXE=CVE_AXE FROM HR_SPRINT_CVENTIL WHERE CVE_LIGNE=@VAR_CVE_LIGNE_EN_COURS;
SELECT @VAR_VEN_SECTION=CVE_SOUSPLAN1 FROM HR_SPRINT_CVENTIL WHERE CVE_LIGNE=@VAR_CVE_LIGNE_EN_COURS;
SELECT @VAR_VEN_POURCENTAGE=CVE_TAUXMONTANT FROM HR_SPRINT_CVENTIL WHERE CVE_LIGNE=@VAR_CVE_LIGNE_EN_COURS;
SELECT @VAR_VEN_NUMEROVENTILATION=CVE_NUMEROVENTIL FROM HR_SPRINT_CVENTIL WHERE CVE_LIGNE=@VAR_CVE_LIGNE_EN_COURS;

Print 'Traitement du fichier d import analytique VEN ligne en cours '+cast(@VAR_CVE_LIGNE_EN_COURS as varchar(255))+'/'+cast(@VAR_CVE_TOTAL_LIGNES as varchar(255))

INSERT INTO HR_SPRINT_REPRISEVENTILATIONANALYTIQUE
VALUES (@VAR_VEN_SIREN,@VAR_VEN_TYPE,@VAR_VEN_CODE,@VAR_VEN_AXE,@VAR_VEN_SOUSPLAN,@VAR_VEN_SECTION,@VAR_VEN_POURCENTAGE,@VAR_VEN_NUMEROVENTILATION);

SET @VAR_CVE_LIGNE_EN_COURS=@VAR_CVE_LIGNE_EN_COURS+1;

END

GO

ALTER TABLE HR_SPRINT_CVENTIL
DROP COLUMN CVE_LIGNE;

GO



--Reprise PGHISTODETAIL

--les données sont dans VALIDCONTRAT on ne reprendra que certaines zones libellé emploi, salaires de base,coefficient,horaire mensuel

DECLARE

@VAR_PHD_SIREN varchar(35),
@VAR_PHD_SALARIE varchar(10),
@VAR_PHD_ETABLISSEMENT char(3),
@VAR_PHD_PGINFOSMODIF varchar(35),
@VAR_PHD_PGTYPEHISTO char(3),
@VAR_PHD_NEWVALEUR_EMPLOI varchar(35),
@VAR_PHD_NEWVALEUR_SALAIREMOIS1 varchar(35),
@VAR_PHD_TYPEVALEUR char(1),--Envoyer T pour les libellés d'emploi
@VAR_PHD_TABLETTE varchar(35),
@VAR_PHD_PGTYPEINFOLS char(3),
@VAR_PHD_DATEAPPLIC datetime,
@VAR_PHD_TRAITEMENTOK char(1),
@VAR_PHD_CODTABL char(1),
@VAR_PHD_CODEPOP char(1),
@VAR_PHD_POPULATION char(1),
@VAR_VALIDCONTRAT_LIGNE_EN_COURS int,
@VAR_VALIDCONTRAT_TOTAL_LIGNES int,
@VAR_SALARIE_LIGNE_EN_COURS int,
@VAR_MATRICULE_HRS varchar(10),
@VAR_MATRICULE_HRU varchar(10),
@VAR_CEMP_SALARIE char(5),
@VAR_INDIVIDUS_LIGNE_EN_COURS int,
@VAR_INDIVIDUS_TOTAL int,
@VAR_VALEUR_LIBELLE_EMPLOI_VALIDCONTRAT_ORIGINE varchar(35),
@VAR_VALEUR_LIBELLE_EMPLOI_VALIDCONTRAT_VALEUR_SUIVANTE varchar(35),
@VAR_SIREN_RECHERCHE_EMPLOI varchar(35),
@VAR_LIBELLE_EMPLOI_PARTAGE char(1),
@VAR_VALEUR_COEFFICIENT_VALIDCONTRAT_ORIGINE varchar(35),
@VAR_VALEUR_COEFFICIENT_VALIDCONTRAT_VALEUR_SUIVANTE varchar(35),
@VAR_VALEUR_HORAIRE_BASE_VALIDCONTRAT_ORIGINE varchar(35),
@VAR_VALEUR_MSM_ORIGINE varchar(255),
@VAR_VALEUR_MSM_SUIVANT varchar(255),
@VAR_SALARIE_LIGNE_SUIVANTE int,
@VAR_CMATR_LIGNE varchar(10),
@VAR_CEMP_LIGNE varchar(10),
@VAR_PREMIERE_LIGNE_SALARIE int;

SET @VAR_PHD_TRAITEMENTOK='X';
SET @VAR_PHD_PGTYPEINFOLS='SAL';
SET @VAR_PHD_CODTABL='';
SET @VAR_PHD_ETABLISSEMENT='';

SELECT @VAR_INDIVIDUS_LIGNE_EN_COURS=MIN(IND_LIGNE) FROM VENTILATION_INDIVIDUS;
SELECT @VAR_INDIVIDUS_TOTAL=MAX(IND_LIGNE) FROM VENTILATION_INDIVIDUS;
SELECT @VAR_LIBELLE_EMPLOI_PARTAGE=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='Partage PLE';

IF @VAR_LIBELLE_EMPLOI_PARTAGE='X'
BEGIN
	SET @VAR_SIREN_RECHERCHE_EMPLOI='999999999'
END
ELSE
BEGIN
	SET @VAR_SIREN_RECHERCHE_EMPLOI=@VAR_PHD_SIREN
END


WHILE @VAR_INDIVIDUS_LIGNE_EN_COURS<@VAR_INDIVIDUS_TOTAL--boucle par salariés

BEGIN

SELECT @VAR_MATRICULE_HRU=IND_MATRICULEHRU FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_INDIVIDUS_LIGNE_EN_COURS;--récupération du matricule HRU
SELECT @VAR_CEMP_SALARIE=IND_CEMP FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_INDIVIDUS_LIGNE_EN_COURS; --récupération du code société
SELECT @VAR_PHD_SALARIE=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_INDIVIDUS_LIGNE_EN_COURS; --récupération du matricule HRS
SELECT @VAR_PHD_SIREN=IND_SIREN FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_INDIVIDUS_LIGNE_EN_COURS;--récupération du SIREN

SELECT @VAR_VALIDCONTRAT_TOTAL_LIGNES=MAX(VALIDCONTRAT_LIGNE) FROM VALIDCONTRAT WHERE MATRI=@VAR_MATRICULE_HRU AND CEMP=@VAR_CEMP_SALARIE;--récupération des lignes du salariés sur sa société
SELECT @VAR_SALARIE_LIGNE_EN_COURS=MIN(VALIDCONTRAT_LIGNE) FROM VALIDCONTRAT WHERE MATRI=@VAR_MATRICULE_HRU AND CEMP=@VAR_CEMP_SALARIE;

Print 'Salarié en cours '+@VAR_PHD_SALARIE+' individus '+CAST(@VAR_INDIVIDUS_LIGNE_EN_COURS AS varchar(255))+'/'+CAST(@VAR_INDIVIDUS_TOTAL AS varchar(255))+' société du salarié '+@VAR_CEMP_SALARIE+' matricule HRU'+@VAR_MATRICULE_HRU
Print 'Le salarié a '+CAST(@VAR_VALIDCONTRAT_TOTAL_LIGNES AS varchar(255))+' contrat(s)'

WHILE @VAR_SALARIE_LIGNE_EN_COURS<=@VAR_VALIDCONTRAT_TOTAL_LIGNES--Boucle dans VALIDCONTRAT sur le salarié en cours

	BEGIN

	Print 'Traitement du contrat '+CAST(@VAR_SALARIE_LIGNE_EN_COURS AS varchar(255))+'/'+CAST(@VAR_VALIDCONTRAT_TOTAL_LIGNES AS varchar(255))

	SELECT @VAR_PREMIERE_LIGNE_SALARIE=MIN(VALIDCONTRAT_LIGNE) FROM VALIDCONTRAT WHERE MATRI=@VAR_MATRICULE_HRU;--récupération du numéro de la première ligne du salarié dans la table
	
	--Initialisation des premieres valeurs 

	IF @VAR_SALARIE_LIGNE_EN_COURS=@VAR_PREMIERE_LIGNE_SALARIE --si on est sur la premère ligne on initialise les valeurs

		BEGIN

		--Gestion du libellé d'emploi
		
		SELECT @VAR_VALEUR_LIBELLE_EMPLOI_VALIDCONTRAT_ORIGINE=LQUAL FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_SALARIE_LIGNE_EN_COURS;--récupération de la valeur d'origine
		SELECT @VAR_PHD_NEWVALEUR_EMPLOI=TRA_VALEURHRS FROM TRANSCO WHERE TRA_VALEURHRU=@VAR_VALEUR_LIBELLE_EMPLOI_VALIDCONTRAT_ORIGINE AND TRA_SIREN=@VAR_SIREN_RECHERCHE_EMPLOI;--récupération de la valeur HRS sur la société en cours
		SET @VAR_PHD_PGTYPEHISTO='001';
		SET @VAR_PHD_PGINFOSMODIF='PSA_LIBELLEEMPLOI';
		SET @VAR_PHD_TYPEVALEUR='T';
		SET @VAR_PHD_TABLETTE='PGLIBEMPLOI';
		SET @VAR_PHD_CODEPOP='';
		SET @VAR_PHD_POPULATION='';
		SELECT @VAR_PHD_DATEAPPLIC=CAST(DVCTR AS datetime) FROM VALIDCONTRAT  WHERE VALIDCONTRAT_LIGNE=@VAR_SALARIE_LIGNE_EN_COURS;--récupération de la date d'origine

		Print 'Initialisation de la première valeur libellé emploi'+@VAR_VALEUR_LIBELLE_EMPLOI_VALIDCONTRAT_ORIGINE+' code '+@VAR_PHD_NEWVALEUR_EMPLOI+' avec la date '+CAST(@VAR_PHD_DATEAPPLIC AS varchar(255))

		INSERT INTO HR_SPRINT_PGHISTODETAIL
		VALUES (@VAR_PHD_SIREN,@VAR_PHD_SALARIE,@VAR_PHD_ETABLISSEMENT,@VAR_PHD_PGINFOSMODIF,@VAR_PHD_PGTYPEHISTO,@VAR_PHD_NEWVALEUR_EMPLOI,@VAR_PHD_TYPEVALEUR,@VAR_PHD_TABLETTE,@VAR_PHD_PGTYPEINFOLS,@VAR_PHD_DATEAPPLIC,
		@VAR_PHD_TRAITEMENTOK,@VAR_PHD_CODTABL,@VAR_PHD_CODEPOP,@VAR_PHD_POPULATION);


		--Gestion du salaire de base

		SELECT @VAR_VALEUR_MSM_ORIGINE=CAST(MSM AS varchar(255)) FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_SALARIE_LIGNE_EN_COURS;--récupération de la valeur d'origine
		
		SET @VAR_PHD_NEWVALEUR_SALAIREMOIS1=@VAR_VALEUR_MSM_ORIGINE;--récupération du nouveau salaire de base
		SET @VAR_PHD_PGTYPEHISTO='003';
		SET @VAR_PHD_PGINFOSMODIF='PSA_SALAIREMOIS1';
		SET @VAR_PHD_TYPEVALEUR='F';
		SET @VAR_PHD_TABLETTE='';
		SET @VAR_PHD_CODEPOP='';
		SET @VAR_PHD_POPULATION='';

		SELECT @VAR_PHD_DATEAPPLIC=CAST(DVCTR AS datetime) FROM VALIDCONTRAT  WHERE VALIDCONTRAT_LIGNE=@VAR_SALARIE_LIGNE_EN_COURS;--récupération de la date du changement

		Print 'Initialisation du premier salarie de base'+CAST(@VAR_VALEUR_MSM_ORIGINE AS varchar(255))+' avec la date '+CAST(@VAR_PHD_DATEAPPLIC AS varchar(255))


		INSERT INTO HR_SPRINT_PGHISTODETAIL
		VALUES (@VAR_PHD_SIREN,@VAR_PHD_SALARIE,@VAR_PHD_ETABLISSEMENT,@VAR_PHD_PGINFOSMODIF,@VAR_PHD_PGTYPEHISTO,@VAR_PHD_NEWVALEUR_SALAIREMOIS1,@VAR_PHD_TYPEVALEUR,@VAR_PHD_TABLETTE,@VAR_PHD_PGTYPEINFOLS,@VAR_PHD_DATEAPPLIC,
		@VAR_PHD_TRAITEMENTOK,@VAR_PHD_CODTABL,@VAR_PHD_CODEPOP,@VAR_PHD_POPULATION);

		END --fin de test de la première ligne

	--Pour les contrats suivants comparatif entre la valeur M et la valeur M+1 et ajout de la valeur M+1 si différent

	SET @VAR_SALARIE_LIGNE_SUIVANTE=@VAR_SALARIE_LIGNE_EN_COURS+1;--numéro de la ligne suivante pour récupérer la valeur +1 pour la comparaison

	IF @VAR_SALARIE_LIGNE_SUIVANTE>@VAR_VALIDCONTRAT_TOTAL_LIGNES--controle que la ligne suivante ne dépasse pas la dernière ligne du salarié

	SET @VAR_SALARIE_LIGNE_SUIVANTE=@VAR_SALARIE_LIGNE_SUIVANTE-1;

	SELECT @VAR_CMATR_LIGNE=MATRI FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_SALARIE_LIGNE_EN_COURS;--récupération du matricule de la ligne pour controle
	SELECT @VAR_CEMP_LIGNE=CEMP FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_SALARIE_LIGNE_EN_COURS; --récupération du CEMP pour controle


	IF @VAR_CMATR_LIGNE=@VAR_MATRICULE_HRU AND @VAR_CEMP_LIGNE=@VAR_CEMP_SALARIE  --si la ligne en cours est sur le bon salarié et la bonne société
	
	BEGIN

		--Gestion du libellé d'emploi

	SELECT @VAR_VALEUR_LIBELLE_EMPLOI_VALIDCONTRAT_ORIGINE=LQUAL FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_SALARIE_LIGNE_EN_COURS;--récupération de la valeur d'origine
	SELECT @VAR_VALEUR_LIBELLE_EMPLOI_VALIDCONTRAT_VALEUR_SUIVANTE=LQUAL FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_SALARIE_LIGNE_SUIVANTE;--récupération de la valeur +1

	Print 'La valeur du libellé d emploi d origine est '+@VAR_VALEUR_LIBELLE_EMPLOI_VALIDCONTRAT_ORIGINE+' la valeur +1 est ' +@VAR_VALEUR_LIBELLE_EMPLOI_VALIDCONTRAT_VALEUR_SUIVANTE
		
	IF @VAR_VALEUR_LIBELLE_EMPLOI_VALIDCONTRAT_ORIGINE<>@VAR_VALEUR_LIBELLE_EMPLOI_VALIDCONTRAT_VALEUR_SUIVANTE --si valeur différente 
		BEGIN
				
		SELECT @VAR_PHD_NEWVALEUR_EMPLOI=TRA_VALEURHRS FROM TRANSCO WHERE TRA_VALEURHRU=@VAR_VALEUR_LIBELLE_EMPLOI_VALIDCONTRAT_VALEUR_SUIVANTE AND TRA_SIREN=@VAR_SIREN_RECHERCHE_EMPLOI;--récupération de la valeur HRS sur la société en cours
		SET @VAR_PHD_PGTYPEHISTO='001';
		SET @VAR_PHD_PGINFOSMODIF='PSA_LIBELLEEMPLOI';
		SET @VAR_PHD_TYPEVALEUR='T';
		SET @VAR_PHD_TABLETTE='PGLIBEMPLOI';
		SET @VAR_PHD_CODEPOP='';
		SET @VAR_PHD_POPULATION='';
		SELECT @VAR_PHD_DATEAPPLIC=CAST(DVCTR AS datetime) FROM VALIDCONTRAT  WHERE VALIDCONTRAT_LIGNE=@VAR_SALARIE_LIGNE_SUIVANTE;--récupération de la date du changement
					   
		Print 'Insertion du libellé d emploi '+CAST(@VAR_PHD_NEWVALEUR_EMPLOI AS varchar(3))+' à la date du '+CAST(@VAR_PHD_DATEAPPLIC AS varchar(255))

		INSERT INTO HR_SPRINT_PGHISTODETAIL
		VALUES (@VAR_PHD_SIREN,@VAR_PHD_SALARIE,@VAR_PHD_ETABLISSEMENT,@VAR_PHD_PGINFOSMODIF,@VAR_PHD_PGTYPEHISTO,@VAR_PHD_NEWVALEUR_EMPLOI,@VAR_PHD_TYPEVALEUR,@VAR_PHD_TABLETTE,@VAR_PHD_PGTYPEINFOLS,@VAR_PHD_DATEAPPLIC,
		@VAR_PHD_TRAITEMENTOK,@VAR_PHD_CODTABL,@VAR_PHD_CODEPOP,@VAR_PHD_POPULATION);
						
		END

	--Gestion du salaie de base
		
	SELECT @VAR_VALEUR_MSM_ORIGINE=CAST(MSM AS varchar(255)) FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_SALARIE_LIGNE_EN_COURS;--récupération de la valeur d'origine
	SELECT @VAR_VALEUR_MSM_SUIVANT=CAST(MSM AS varchar(255)) FROM VALIDCONTRAT WHERE VALIDCONTRAT_LIGNE=@VAR_SALARIE_LIGNE_SUIVANTE;--récupération de la valeur suivante

	Print 'Le salaire de base d origine est '+@VAR_VALEUR_MSM_ORIGINE+' la valeur +1 est '+@VAR_VALEUR_MSM_SUIVANT

	IF @VAR_VALEUR_MSM_ORIGINE<>@VAR_VALEUR_MSM_SUIVANT

		BEGIN

		SET @VAR_PHD_NEWVALEUR_SALAIREMOIS1=@VAR_VALEUR_MSM_SUIVANT;--récupération du nouveau salaire de base
		SET @VAR_PHD_PGINFOSMODIF='PSA_SALAIREMOIS1';
		SET @VAR_PHD_TYPEVALEUR='F';
		SET @VAR_PHD_TABLETTE='';
		SET @VAR_PHD_CODEPOP='';
		SET @VAR_PHD_POPULATION='';
		SET @VAR_PHD_PGTYPEHISTO='003';

		SELECT @VAR_PHD_DATEAPPLIC=CAST(DVCTR AS datetime) FROM VALIDCONTRAT  WHERE VALIDCONTRAT_LIGNE=@VAR_SALARIE_LIGNE_SUIVANTE;--récupération de la date du changement

		Print 'Insertion du nouveau salaire de base '+CAST(@VAR_PHD_NEWVALEUR_SALAIREMOIS1 as varchar(255))+' à la date du '+CAST(@VAR_PHD_DATEAPPLIC AS varchar(255))

		INSERT INTO HR_SPRINT_PGHISTODETAIL
		VALUES (@VAR_PHD_SIREN,@VAR_PHD_SALARIE,@VAR_PHD_ETABLISSEMENT,@VAR_PHD_PGINFOSMODIF,@VAR_PHD_PGTYPEHISTO,@VAR_PHD_NEWVALEUR_SALAIREMOIS1,@VAR_PHD_TYPEVALEUR,@VAR_PHD_TABLETTE,@VAR_PHD_PGTYPEINFOLS,@VAR_PHD_DATEAPPLIC,
		@VAR_PHD_TRAITEMENTOK,@VAR_PHD_CODTABL,@VAR_PHD_CODEPOP,@VAR_PHD_POPULATION);

		END

			----------------------------------------------------------------------------------------------------------
			--Fin du traitement de la ligne en cours
	
	Print 'Fin de traitement du salarié'

	SET @VAR_SALARIE_LIGNE_EN_COURS=@VAR_SALARIE_LIGNE_EN_COURS+1;--incrémentation du compteur boucle contrats salariés
		
	END

	ELSE --si pas de modification

		BEGIN
					
		SET @VAR_SALARIE_LIGNE_EN_COURS=@VAR_SALARIE_LIGNE_EN_COURS+1;--incrémentation du compteur boucle contrats salariés
		
		Print 'Passage ligne suivante'

		END
	
	END


UPDATE VENTILATION_INDIVIDUS SET IND_STATUS='Etape PGHISTODETAIL', IND_REPRISE_HR_SPRINT_PGHISTODETAIL='X' WHERE IND_MATRICULEHRU=@VAR_MATRICULE_HRU AND IND_SIREN=@VAR_PHD_SIREN;

SET @VAR_INDIVIDUS_LIGNE_EN_COURS=@VAR_INDIVIDUS_LIGNE_EN_COURS+1;--incrémentation du compteur

END

DELETE HR_SPRINT_PGHISTODETAIL WHERE PHD_NEWVALEUR='';--la colonne MSM peut etre à vide et le script alimente la table.

GO


--Gestion de la table PAIEENCOURS/HISTOBULLETIN/HISTOCUMSAL

--Génération des datetimes de début et de fin zone PPAIE. La colonne est au format AAAAMM la fonction CAST ne peut pas convertir au format datetime

 
UPDATE ENTETEPAIE SET TRANSCO_PPAIE_TEMPORAIRE=CONCAT(PPAIE,'01');--passage au format AAAAMMJJ
UPDATE ENTETEPAIE SET TRANSCO_PPAIE=TRANSCO_PPAIE_TEMPORAIRE;--passage au format datetime 

GO

--Gestion de la datetime de fin TRANSCO_PPAIE_FIN


UPDATE ENTETEPAIE SET TRANSCO_MOIS=MONTH(TRANSCO_PPAIE) FROM ENTETEPAIE

UPDATE ENTETEPAIE SET TRANSCO_PPAIE_FIN=CONCAT(PPAIE,'31') WHERE TRANSCO_MOIS='1' OR TRANSCO_MOIS='3' OR TRANSCO_MOIS='5' OR TRANSCO_MOIS='7' OR TRANSCO_MOIS='8' OR TRANSCO_MOIS='10' OR TRANSCO_MOIS='12';--passage au format datetime time

UPDATE ENTETEPAIE SET TRANSCO_PPAIE_FIN=CONCAT(PPAIE,'30') WHERE TRANSCO_MOIS='4' OR TRANSCO_MOIS='6' OR TRANSCO_MOIS='9' OR TRANSCO_MOIS='11'--passage au format datetime time

UPDATE ENTETEPAIE SET TRANSCO_PPAIE_FIN=CONCAT(PPAIE,'28') WHERE TRANSCO_MOIS='2';--passage au format datetime time



GO

DECLARE --analyse de la table ENTETEPAIE pour trouver les dates des bulletins

@VAR_BULL_SIREN varchar(35),
@VAR_BULL_ETABLISSEMENT varchar(35),
@VAR_BULL_SALARIE varchar(10),
@VAR_BULL_DATEDEBUT datetime,
@VAR_BULL_DATEFIN datetime,
@VAR_TOTAL_LIGNE_EN_TETE int,
@VAR_TOTAL_LIGNE_EN_COURS int,
@VAR_CMATR varchar(10),
@VAR_CEMP varchar(10),
@VAR_MOIS_EXPORT int,
@VAR_BULLETIN_EXISTE int,
@VAR_INDIVIDUS_LIGNE_EN_COURS int,
@VAR_TOTAL_INDIVIDUS int,
@VAR_PAR_BULLETIN char(1);

SELECT @VAR_PAR_BULLETIN=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='Reprise bulletins';

SELECT @VAR_INDIVIDUS_LIGNE_EN_COURS=MIN(IND_LIGNE) FROM VENTILATION_INDIVIDUS;
SELECT @VAR_TOTAL_INDIVIDUS=MAX(IND_LIGNE) FROM VENTILATION_INDIVIDUS;

SET @VAR_MOIS_EXPORT=1;

SELECT @VAR_TOTAL_LIGNE_EN_TETE=COUNT(*) FROM ENTETEPAIE;

IF @VAR_PAR_BULLETIN='X'

BEGIN

WHILE @VAR_INDIVIDUS_LIGNE_EN_COURS<=@VAR_TOTAL_INDIVIDUS--boucle par salariés

	BEGIN

	SELECT @VAR_CMATR=IND_MATRICULEHRU FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_INDIVIDUS_LIGNE_EN_COURS;--récupération du matricule en cours
	SELECT @VAR_CEMP=IND_CEMP FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_INDIVIDUS_LIGNE_EN_COURS; --récupération du CEMP
	SELECT @VAR_BULL_SIREN=IND_SIREN FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_INDIVIDUS_LIGNE_EN_COURS; --récupération du SIREN de la société
	SELECT @VAR_BULL_SALARIE=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_INDIVIDUS_LIGNE_EN_COURS; --récupération du matricule HRS
	
	WHILE @VAR_MOIS_EXPORT<=12 --boucle par mois/salariés

		BEGIN

		SELECT DISTINCT @VAR_BULL_DATEDEBUT=TRANSCO_PPAIE FROM ENTETEPAIE  WHERE MATRI=@VAR_CMATR AND TRANSCO_MOIS=@VAR_MOIS_EXPORT AND CEMP=@VAR_CEMP;--date de début du bulletin
		SELECT DISTINCT @VAR_BULL_DATEFIN=TRANSCO_PPAIE_FIN FROM ENTETEPAIE  WHERE MATRI=@VAR_CMATR AND TRANSCO_MOIS=@VAR_MOIS_EXPORT AND CEMP=@VAR_CEMP;;--date de fin du bulletin

		INSERT INTO HR_SPRINT_PAIEENCOURS
		VALUES (@VAR_BULL_SIREN,'',@VAR_BULL_SALARIE,@VAR_BULL_DATEDEBUT,@VAR_BULL_DATEFIN,'','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','');


		Print 'Création du bulletin ligne en cours pour le salarié matricule HRU '+@VAR_CMATR+' mois en cours '+CAST(@VAR_MOIS_EXPORT as varchar(255))

		SET @VAR_MOIS_EXPORT=@VAR_MOIS_EXPORT+1;

		END--fin de boucle par mois/salaries

	Print 'Passage au salarié suivant ligne en cours '+CAST(@VAR_INDIVIDUS_LIGNE_EN_COURS as varchar(255))+'/'+	CAST(@VAR_TOTAL_INDIVIDUS as varchar(255))
	SET @VAR_INDIVIDUS_LIGNE_EN_COURS=@VAR_INDIVIDUS_LIGNE_EN_COURS+1;
	SET @VAR_MOIS_EXPORT=1;--RAZ du compteur mois
	END--fin de boucle salarié

END--fin de si

IF @VAR_PAR_BULLETIN='-'

BEGIN

PRINT 'Pas d export des bulletins'

END

GO

--Analyse entetepaie pour créer HISTOBULLETIN et HISTOCUMSAL

DECLARE

@VAR_BULL_SIREN varchar(35),
@VAR_BULL_ETABLISSEMENT varchar(35),
@VAR_CMATR varchar(10),
@VAR_BULL_MATRICULEHRS varchar(10),
@VAR_BULL_NRUB char(5),
@VAR_BULL_DATEDEBUT datetime,
@VAR_BULL_DATEFIN datetime,
@VAR_BULL_MONTANT varchar (255),
@VAR_BULL_BASE varchar(255),
@VAR_TOTAL_LIGNE_EN_TETE int,
@VAR_TOTAL_LIGNE_EN_COURS int,
@VAR_CEMP varchar(10),
@VAR_MOIS_EXPORT int,
@VAR_BULLETIN_EXISTE int,
@VAR_ENTETE_LIGNE_EN_COURS int,
@VAR_TOTAL_ENTETE int,
@VAR_PAR_BULLETIN char(1);

SELECT @VAR_PAR_BULLETIN=PAR_VALEUR FROM PARAMETRES WHERE PAR_NOM='Reprise bulletins';

SELECT @VAR_ENTETE_LIGNE_EN_COURS=MIN(ENTETEPAIE_LIGNE) FROM ENTETEPAIE;
SELECT @VAR_TOTAL_ENTETE=MAX(ENTETEPAIE_LIGNE) FROM ENTETEPAIE;

IF @VAR_PAR_BULLETIN='X'

BEGIN--début de si

WHILE @VAR_ENTETE_LIGNE_EN_COURS<=@VAR_TOTAL_ENTETE--boucle bulletin

	BEGIN--début de la boucle
	
	Print 'Analyse de la ligne '+CAST(@VAR_ENTETE_LIGNE_EN_COURS AS varchar(255))+'/'+CAST(@VAR_TOTAL_ENTETE AS varchar(255))
	
	SELECT @VAR_CMATR=MATRI FROM ENTETEPAIE WHERE @VAR_ENTETE_LIGNE_EN_COURS=ENTETEPAIE_LIGNE;--récupération du matricule en cours
	SELECT @VAR_CEMP=CEMP FROM ENTETEPAIE WHERE @VAR_ENTETE_LIGNE_EN_COURS=ENTETEPAIE_LIGNE; --récupération du CEMP
	SELECT @VAR_BULL_MATRICULEHRS=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_CEMP=@VAR_CEMP; --récupération du matricule HRS
	SELECT @VAR_BULL_SIREN=IND_SIREN FROM VENTILATION_INDIVIDUS WHERE IND_MATRICULEHRU=@VAR_CMATR AND IND_CEMP=@VAR_CEMP; --récupération du SIREN

	SELECT @VAR_BULL_DATEDEBUT=TRANSCO_PPAIE FROM ENTETEPAIE WHERE ENTETEPAIE_LIGNE=@VAR_ENTETE_LIGNE_EN_COURS; --récupération de la date de début
	SELECT @VAR_BULL_DATEFIN=TRANSCO_PPAIE_FIN FROM ENTETEPAIE WHERE ENTETEPAIE_LIGNE=@VAR_ENTETE_LIGNE_EN_COURS; --récupération de la date de début

	SELECT @VAR_BULL_BASE=BASE FROM ENTETEPAIE WHERE ENTETEPAIE_LIGNE=@VAR_ENTETE_LIGNE_EN_COURS;--récupération base rubrique
	SELECT @VAR_BULL_NRUB=NRUB FROM ENTETEPAIE WHERE ENTETEPAIE_LIGNE=@VAR_ENTETE_LIGNE_EN_COURS;--récupération du code rubrique

	IF LEN(@VAR_BULL_NRUB)=3--si la rubrique fait 3 positions alors c'est un cumul
		BEGIN
		Print 'La rubrique HRU '+CAST(@VAR_BULL_NRUB AS varchar(255))+' est un cumul'

		INSERT INTO HR_SPRINT_HISTOCUMSAL
		VALUES (@VAR_BULL_SIREN,'',@VAR_BULL_MATRICULEHRS,@VAR_BULL_DATEDEBUT,@VAR_BULL_DATEFIN,'','','','','','','','','','','','');
		END
	ELSE --sinon c'est une rubrique
		BEGIN
		Print 'La rubrique HRU '+CAST(@VAR_BULL_NRUB AS varchar(255))+' est une rubrique dans HRS'
		
		INSERT INTO HR_SPRINT_HISTOBULLETIN
		VALUES (@VAR_BULL_SIREN,'',@VAR_BULL_MATRICULEHRS,@VAR_BULL_DATEDEBUT,@VAR_BULL_DATEFIN,'',@VAR_BULL_NRUB,'','',@VAR_BULL_BASE,'','','','','','','','','','','','','','','','','');
		
	
		END
	 
	 SET @VAR_ENTETE_LIGNE_EN_COURS=@VAR_ENTETE_LIGNE_EN_COURS+1;

	END --fin de boucle

END --fin de si

IF @VAR_PAR_BULLETIN='-'

BEGIN

PRINT 'Pas d export des bulletins'

END

GO

--MAJ des tables PAIEENCOURS/HISTOBULLETIN/HISTOCUMSAL

DECLARE

@VAR_PPU_SALARIE varchar(10),
@VAR_INDIVIDU_EN_COURS int,
@VAR_TOTAL_INDIVIDUS int;


SELECT @VAR_INDIVIDU_EN_COURS=MIN(IND_LIGNE) FROM VENTILATION_INDIVIDUS;

SELECT @VAR_TOTAL_INDIVIDUS=MAX(IND_LIGNE) FROM VENTILATION_INDIVIDUS;

WHILE @VAR_INDIVIDU_EN_COURS<=@VAR_TOTAL_INDIVIDUS --boucle par individus

BEGIN 

UPDATE HR_SPRINT_PAIEENCOURS SET PPU_TOPCLOTURE='X'; --MAJ Code établissement

SELECT @VAR_PPU_SALARIE=IND_MATRICULEHRS FROM VENTILATION_INDIVIDUS WHERE IND_LIGNE=@VAR_INDIVIDU_EN_COURS; --récupération matricule HRS salarié
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_ETABLISSEMENT=(SELECT PSA_ETABLISSEMENT FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_LIBELLE=(SELECT PSA_LIBELLE FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ Code du nom
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_PRENOM=(SELECT PSA_PRENOM FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_ADRESSE1=(SELECT PSA_ADRESSE1 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ Adresse
--UPDATE HR_SPRINT_PAIEENCOURS SET PPU_ADRESSE2=(SELECT PSA_ADRESSE2 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ Adresse 2
--UPDATE HR_SPRINT_PAIEENCOURS SET PPU_ADRESSE3=(SELECT PSA_ADRESSE3 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ Adresse
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_TRAVAILN1=(SELECT PSA_TRAVAILN1 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ TRAVAILN1
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_TRAVAILN2=(SELECT PSA_TRAVAILN2 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ TRAVAILN2
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_TRAVAILN3=(SELECT PSA_TRAVAILN3 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ TRAVAILN3
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_TRAVAILN3=(SELECT PSA_TRAVAILN3 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ TRAVAILN4
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_CODESTAT=(SELECT PSA_CODESTAT FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_NUMEROSS=(SELECT PSA_NUMEROSS FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_CODEPOSTAL=(SELECT PSA_CODEPOSTAL FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_VILLE=(SELECT PSA_VILLE FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_INDICE=(SELECT PSA_INDICE FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_NIVEAU=(SELECT PSA_NIVEAU FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_CONVENTION=(SELECT PSA_CONVENTION FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_AUXILIAIRE=(SELECT PSA_AUXILIAIRE FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_LIBREPCMB1=(SELECT PSA_LIBREPCMB1 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_LIBREPCMB2=(SELECT PSA_LIBREPCMB2 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_LIBREPCMB3=(SELECT PSA_LIBREPCMB3 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_LIBREPCMB4=(SELECT PSA_LIBREPCMB4 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_QUALIFICATION=(SELECT PSA_QUALIFICATION FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_COEFFICIENT=(SELECT PSA_COEFFICIENT FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_DATEENTREE=(SELECT PSA_DATEENTREE FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_DATESORTIE=(SELECT PSA_DATESORTIE FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_LIBELLEEMPLOI=(SELECT PSA_LIBELLEEMPLOI FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
UPDATE HR_SPRINT_PAIEENCOURS SET PPU_CIVILITE=(SELECT PSA_CIVILITE FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PPU_SALARIE=@VAR_PPU_SALARIE; --MAJ CODESTAT
--HISTOBULLETIN
UPDATE HR_SPRINT_HISTOBULLETIN SET PHB_ETABLISSEMENT=(SELECT PSA_ETABLISSEMENT FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHB_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_HISTOBULLETIN SET PHB_TRAVAILN1=(SELECT PSA_TRAVAILN1 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHB_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_HISTOBULLETIN SET PHB_TRAVAILN2=(SELECT PSA_TRAVAILN2 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHB_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_HISTOBULLETIN SET PHB_TRAVAILN3=(SELECT PSA_TRAVAILN3 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHB_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_HISTOBULLETIN SET PHB_TRAVAILN4=(SELECT PSA_TRAVAILN4 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHB_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_HISTOBULLETIN SET PHB_LIBREPCMB1=(SELECT PSA_LIBREPCMB1 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHB_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_HISTOBULLETIN SET PHB_LIBREPCMB2=(SELECT PHB_LIBREPCMB2 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHB_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_HISTOBULLETIN SET PHB_LIBREPCMB3=(SELECT PHB_LIBREPCMB3 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHB_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_HISTOBULLETIN SET PHB_LIBREPCMB4=(SELECT PHB_LIBREPCMB4 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHB_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
--HISTOCUMSAL
UPDATE HR_SPRINT_HISTOCUMSAL SET PHC_ETABLISSEMENT=(SELECT PSA_ETABLISSEMENT FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHC_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_HISTOCUMSAL SET PHC_TRAVAILN1=(SELECT PSA_TRAVAILN1 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHC_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_HISTOCUMSAL SET PHC_TRAVAILN2=(SELECT PSA_TRAVAILN2 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHC_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_HISTOCUMSAL SET PHC_TRAVAILN3=(SELECT PSA_TRAVAILN3 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHC_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_HISTOCUMSAL SET PHC_TRAVAILN4=(SELECT PSA_TRAVAILN4 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHC_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_HISTOCUMSAL SET PHC_LIBREPCMB1=(SELECT PSA_LIBREPCMB1 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHC_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_HISTOCUMSAL SET PHC_LIBREPCMB2=(SELECT PSA_LIBREPCMB2 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHC_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_HISTOCUMSAL SET PHC_LIBREPCMB3=(SELECT PSA_LIBREPCMB3 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHC_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement
UPDATE HR_SPRINT_HISTOCUMSAL SET PHC_LIBREPCMB4=(SELECT PSA_LIBREPCMB4 FROM HR_SPRINT_SALARIES WHERE PSA_SALARIE=@VAR_PPU_SALARIE) WHERE PHC_SALARIE=@VAR_PPU_SALARIE; --MAJ Code établissement

Print 'Traitement du salarié '+@VAR_PPU_SALARIE+' ligne en cours '+CAST(@VAR_INDIVIDU_EN_COURS as varchar(255))+'/'+CAST(@VAR_TOTAL_INDIVIDUS as varchar(255))

SET @VAR_INDIVIDU_EN_COURS=@VAR_INDIVIDU_EN_COURS+1;--incrémentation du compteur

END

GO

--MAJ tables HISTOBULLETIN et HISTOCUMSAL

PRINT 'Fin de traitement :-)'
